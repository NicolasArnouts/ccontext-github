[
  {
    "title": "Wobble Card",
    "url": "https://ui.aceternity.com/components/wobble-card",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nWobble Card\n\nA card effect that translates and scales on mousemove, perfect for feature cards.\n\nBackground\nFeatures\nCard\nCTA\nSpecial\nPreview\nCode\nGippity AI powers the entire universe\n\nWith over 100,000 mothly active bot users, Gippity AI is the most popular AI platform for developers.\n\nNo shirt, no shoes, no weapons.\n\nIf someone yells “stop!”, goes limp, or taps out, the fight is over.\n\nSignup for blazing-fast cutting-edge state of the art Gippity AI wrapper today!\n\nWith over 100,000 mothly active bot users, Gippity AI is the most popular AI platform for developers.\n\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nDownload noise.webp\n\nDownload noise.webp from this link and paste it in the public folder.\n\nCopy the source code\n\ncomponents/ui/wobble-card.tsx\n\n\"use client\";\nimport React, { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n \nexport const WobbleCard = ({\n  children,\n  containerClassName,\n  className,\n}: {\n  children: React.ReactNode;\n  containerClassName?: string;\n  className?: string;\n}) => {\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n  const [isHovering, setIsHovering] = useState(false);\n \n  const handleMouseMove = (event: React.MouseEvent<HTMLElement>) => {\n    const { clientX, clientY } = event;\n    const rect = event.currentTarget.getBoundingClientRect();\n    const x = (clientX - (rect.left + rect.width / 2)) / 20;\n    const y = (clientY - (rect.top + rect.height / 2)) / 20;\n    setMousePosition({ x, y });\n  };\n  return (\n    <motion.section\n      onMouseMove={handleMouseMove}\n      onMouseEnter={() => setIsHovering(true)}\n      onMouseLeave={() => {\n        setIsHovering(false);\n        setMousePosition({ x: 0, y: 0 });\n      }}\n      style={{\n        transform: isHovering\n          ? `translate3d(${mousePosition.x}px, ${mousePosition.y}px, 0) scale3d(1, 1, 1)`\n          : \"translate3d(0px, 0px, 0) scale3d(1, 1, 1)\",\n        transition: \"transform 0.1s ease-out\",\n      }}\n      className={cn(\n        \"mx-auto w-full bg-indigo-800  relative rounded-2xl overflow-hidden\",\n        containerClassName\n      )}\n    >\n      <div\n        className=\"relative  h-full [background-image:radial-gradient(88%_100%_at_top,rgba(255,255,255,0.5),rgba(255,255,255,0))]  sm:mx-0 sm:rounded-2xl overflow-hidden\"\n        style={{\n          boxShadow:\n            \"0 10px 32px rgba(34, 42, 53, 0.12), 0 1px 1px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(34, 42, 53, 0.05), 0 4px 6px rgba(34, 42, 53, 0.08), 0 24px 108px rgba(47, 48, 55, 0.10)\",\n        }}\n      >\n        <motion.div\n          style={{\n            transform: isHovering\n              ? `translate3d(${-mousePosition.x}px, ${-mousePosition.y}px, 0) scale3d(1.03, 1.03, 1)`\n              : \"translate3d(0px, 0px, 0) scale3d(1, 1, 1)\",\n            transition: \"transform 0.1s ease-out\",\n          }}\n          className={cn(\"h-full px-4 py-20 sm:px-10\", className)}\n        >\n          <Noise />\n          {children}\n        </motion.div>\n      </div>\n    </motion.section>\n  );\n};\n \nconst Noise = () => {\n  return (\n    <div\n      className=\"absolute inset-0 w-full h-full scale-[1.2] transform opacity-10 [mask-image:radial-gradient(#fff,transparent,75%)]\"\n      style={{\n        backgroundImage: \"url(/noise.webp)\",\n        backgroundSize: \"30%\",\n      }}\n    ></div>\n  );\n};\nCopy\nExpand\nProps\nProp Name\tType\tRequired\tDescription\nchildren\tReact.ReactNode\tYes\tContent to be rendered inside the WobbleCard.\ncontainerClassName\tstring\tNo\tOptional className for styling the container.\nclassName\tstring\tNo\tOptional className for styling the children wrapper.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Cards",
    "url": "https://ui.aceternity.com/components/cards",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nCards\n\nA set of cards that can be used for different use cases\n\nCard\nTestimonials\nFeatures\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge react-icons\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nModify Tailwind Config File\ntailwind.config.ts\nimport type { Config } from \"tailwindcss\";\n \nconst config: Config = {\n  content: [\n    \"./pages/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./app/**/*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n    extend: {\n      animation: {\n        move: \"move 5s linear infinite\",\n      },\n      keyframes: {\n        move: {\n          \"0%\": { transform: \"translateX(-200px)\" },\n          \"100%\": { transform: \"translateX(200px)\" },\n        },\n      },\n    },\n  },\n  plugins: [],\n};\n \nexport default config;\nCopy\nFeature Block Animated Card\nPreview\nCode\nDamn good card\n\nA card that showcases a set of tools that you use to create your product.\n\nBackground Overlay Card\nPreview\nCode\nBackground Overlays\n\nThis card is for some special elements, like displaying background gifs on hover only.\n\nContent Card\nPreview\nCode\n\nManu Arora\n\n2 min read\n\nAuthor Card\n\nCard with Author avatar, complete name and time to read - most suitable for blogs.\n\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Feature Sections",
    "url": "https://ui.aceternity.com/components/feature-sections",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nFeature Sections\n\nA set of feature sections ranging from bento grids to simple layouts\n\nCard\nFeatures\nBento Grid\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge @tabler/icons-react cobe\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nBento Grid\nPreview\nCode\nLoading...\nSimple with card gradient\nPreview\nCode\nLoading...\nSimple with hover effects\nPreview\nCode\nLoading...\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Wavy Background",
    "url": "https://ui.aceternity.com/components/wavy-background",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nWavy Background\n\nA cool background effect with waves that move.\n\nBackground\nSpecial\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge simplex-noise\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/wavy-background.tsx\n\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { createNoise3D } from \"simplex-noise\";\n \nexport const WavyBackground = ({\n  children,\n  className,\n  containerClassName,\n  colors,\n  waveWidth,\n  backgroundFill,\n  blur = 10,\n  speed = \"fast\",\n  waveOpacity = 0.5,\n  ...props\n}: {\n  children?: any;\n  className?: string;\n  containerClassName?: string;\n  colors?: string[];\n  waveWidth?: number;\n  backgroundFill?: string;\n  blur?: number;\n  speed?: \"slow\" | \"fast\";\n  waveOpacity?: number;\n  [key: string]: any;\n}) => {\n  const noise = createNoise3D();\n  let w: number,\n    h: number,\n    nt: number,\n    i: number,\n    x: number,\n    ctx: any,\n    canvas: any;\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const getSpeed = () => {\n    switch (speed) {\n      case \"slow\":\n        return 0.001;\n      case \"fast\":\n        return 0.002;\n      default:\n        return 0.001;\n    }\n  };\n \n  const init = () => {\n    canvas = canvasRef.current;\n    ctx = canvas.getContext(\"2d\");\n    w = ctx.canvas.width = window.innerWidth;\n    h = ctx.canvas.height = window.innerHeight;\n    ctx.filter = `blur(${blur}px)`;\n    nt = 0;\n    window.onresize = function () {\n      w = ctx.canvas.width = window.innerWidth;\n      h = ctx.canvas.height = window.innerHeight;\n      ctx.filter = `blur(${blur}px)`;\n    };\n    render();\n  };\n \n  const waveColors = colors ?? [\n    \"#38bdf8\",\n    \"#818cf8\",\n    \"#c084fc\",\n    \"#e879f9\",\n    \"#22d3ee\",\n  ];\n  const drawWave = (n: number) => {\n    nt += getSpeed();\n    for (i = 0; i < n; i++) {\n      ctx.beginPath();\n      ctx.lineWidth = waveWidth || 50;\n      ctx.strokeStyle = waveColors[i % waveColors.length];\n      for (x = 0; x < w; x += 5) {\n        var y = noise(x / 800, 0.3 * i, nt) * 100;\n        ctx.lineTo(x, y + h * 0.5); // adjust for height, currently at 50% of the container\n      }\n      ctx.stroke();\n      ctx.closePath();\n    }\n  };\n \n  let animationId: number;\n  const render = () => {\n    ctx.fillStyle = backgroundFill || \"black\";\n    ctx.globalAlpha = waveOpacity || 0.5;\n    ctx.fillRect(0, 0, w, h);\n    drawWave(5);\n    animationId = requestAnimationFrame(render);\n  };\n \n  useEffect(() => {\n    init();\n    return () => {\n      cancelAnimationFrame(animationId);\n    };\n  }, []);\n \n  const [isSafari, setIsSafari] = useState(false);\n  useEffect(() => {\n    // I'm sorry but i have got to support it on safari.\n    setIsSafari(\n      typeof window !== \"undefined\" &&\n        navigator.userAgent.includes(\"Safari\") &&\n        !navigator.userAgent.includes(\"Chrome\")\n    );\n  }, []);\n \n  return (\n    <div\n      className={cn(\n        \"h-screen flex flex-col items-center justify-center\",\n        containerClassName\n      )}\n    >\n      <canvas\n        className=\"absolute inset-0 z-0\"\n        ref={canvasRef}\n        id=\"canvas\"\n        style={{\n          ...(isSafari ? { filter: `blur(${blur}px)` } : {}),\n        }}\n      ></canvas>\n      <div className={cn(\"relative z-10\", className)} {...props}>\n        {children}\n      </div>\n    </div>\n  );\n};\nCopy\nExpand\nProp\tType\tDefault\tDescription\nchildren\tany\t-\tThe content to be displayed on top of the wavy background.\nclassName\tstring\t-\tThe CSS class to apply to the content container.\ncontainerClassName\tstring\t-\tThe CSS class to apply to the main container.\ncolors\tstring[]\t[\"#38bdf8\", \"#818cf8\", \"#c084fc\", \"#e879f9\", \"#22d3ee\"]\tThe colors of the waves.\nwaveWidth\tnumber\t50\tThe width of the waves.\nbackgroundFill\tstring\t\"black\"\tThe background color.\nblur\tnumber\t10\tThe blur effect applied to the waves.\nspeed\t\"slow\" | \"fast\"\t\"fast\"\tThe speed of the wave animation.\nwaveOpacity\tnumber\t0.5\tThe opacity of the waves.\n[key: string]\tany\t-\tAny other props not listed above.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Vortex Background",
    "url": "https://ui.aceternity.com/components/vortex",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nVortex Background\n\nA wavy, swirly, vortex background ideal for CTAs and backgrounds.\n\nBackground\nSpecial\nCTA\nPreview\nCode\nThe hell is this?\n\nThis is chemical burn. It'll hurt more than you've ever been burned and you'll have a scar.\n\nOrder now\nWatch trailer\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge simplex-noise\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/vortex.tsx\n\nimport { cn } from \"@/lib/utils\";\nimport React, { useEffect, useRef } from \"react\";\nimport { createNoise3D } from \"simplex-noise\";\nimport { motion } from \"framer-motion\";\n \ninterface VortexProps {\n  children?: any;\n  className?: string;\n  containerClassName?: string;\n  particleCount?: number;\n  rangeY?: number;\n  baseHue?: number;\n  baseSpeed?: number;\n  rangeSpeed?: number;\n  baseRadius?: number;\n  rangeRadius?: number;\n  backgroundColor?: string;\n}\n \nexport const Vortex = (props: VortexProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const containerRef = useRef(null);\n  const particleCount = props.particleCount || 700;\n  const particlePropCount = 9;\n  const particlePropsLength = particleCount * particlePropCount;\n  const rangeY = props.rangeY || 100;\n  const baseTTL = 50;\n  const rangeTTL = 150;\n  const baseSpeed = props.baseSpeed || 0.0;\n  const rangeSpeed = props.rangeSpeed || 1.5;\n  const baseRadius = props.baseRadius || 1;\n  const rangeRadius = props.rangeRadius || 2;\n  const baseHue = props.baseHue || 220;\n  const rangeHue = 100;\n  const noiseSteps = 3;\n  const xOff = 0.00125;\n  const yOff = 0.00125;\n  const zOff = 0.0005;\n  const backgroundColor = props.backgroundColor || \"#000000\";\n  let tick = 0;\n  const noise3D = createNoise3D();\n  let particleProps = new Float32Array(particlePropsLength);\n  let center: [number, number] = [0, 0];\n \n  const HALF_PI: number = 0.5 * Math.PI;\n  const TAU: number = 2 * Math.PI;\n  const TO_RAD: number = Math.PI / 180;\n  const rand = (n: number): number => n * Math.random();\n  const randRange = (n: number): number => n - rand(2 * n);\n  const fadeInOut = (t: number, m: number): number => {\n    let hm = 0.5 * m;\n    return Math.abs(((t + hm) % m) - hm) / hm;\n  };\n  const lerp = (n1: number, n2: number, speed: number): number =>\n    (1 - speed) * n1 + speed * n2;\n \n  const setup = () => {\n    const canvas = canvasRef.current;\n    const container = containerRef.current;\n    if (canvas && container) {\n      const ctx = canvas.getContext(\"2d\");\n \n      if (ctx) {\n        resize(canvas, ctx);\n        initParticles();\n        draw(canvas, ctx);\n      }\n    }\n  };\n \n  const initParticles = () => {\n    tick = 0;\n    // simplex = new SimplexNoise();\n    particleProps = new Float32Array(particlePropsLength);\n \n    for (let i = 0; i < particlePropsLength; i += particlePropCount) {\n      initParticle(i);\n    }\n  };\n \n  const initParticle = (i: number) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n \n    let x, y, vx, vy, life, ttl, speed, radius, hue;\n \n    x = rand(canvas.width);\n    y = center[1] + randRange(rangeY);\n    vx = 0;\n    vy = 0;\n    life = 0;\n    ttl = baseTTL + rand(rangeTTL);\n    speed = baseSpeed + rand(rangeSpeed);\n    radius = baseRadius + rand(rangeRadius);\n    hue = baseHue + rand(rangeHue);\n \n    particleProps.set([x, y, vx, vy, life, ttl, speed, radius, hue], i);\n  };\n \n  const draw = (canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) => {\n    tick++;\n \n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n \n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n \n    drawParticles(ctx);\n    renderGlow(canvas, ctx);\n    renderToScreen(canvas, ctx);\n \n    window.requestAnimationFrame(() => draw(canvas, ctx));\n  };\n \n  const drawParticles = (ctx: CanvasRenderingContext2D) => {\n    for (let i = 0; i < particlePropsLength; i += particlePropCount) {\n      updateParticle(i, ctx);\n    }\n  };\n \n  const updateParticle = (i: number, ctx: CanvasRenderingContext2D) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n \n    let i2 = 1 + i,\n      i3 = 2 + i,\n      i4 = 3 + i,\n      i5 = 4 + i,\n      i6 = 5 + i,\n      i7 = 6 + i,\n      i8 = 7 + i,\n      i9 = 8 + i;\n    let n, x, y, vx, vy, life, ttl, speed, x2, y2, radius, hue;\n \n    x = particleProps[i];\n    y = particleProps[i2];\n    n = noise3D(x * xOff, y * yOff, tick * zOff) * noiseSteps * TAU;\n    vx = lerp(particleProps[i3], Math.cos(n), 0.5);\n    vy = lerp(particleProps[i4], Math.sin(n), 0.5);\n    life = particleProps[i5];\n    ttl = particleProps[i6];\n    speed = particleProps[i7];\n    x2 = x + vx * speed;\n    y2 = y + vy * speed;\n    radius = particleProps[i8];\n    hue = particleProps[i9];\n \n    drawParticle(x, y, x2, y2, life, ttl, radius, hue, ctx);\n \n    life++;\n \n    particleProps[i] = x2;\n    particleProps[i2] = y2;\n    particleProps[i3] = vx;\n    particleProps[i4] = vy;\n    particleProps[i5] = life;\n \n    (checkBounds(x, y, canvas) || life > ttl) && initParticle(i);\n  };\n \n  const drawParticle = (\n    x: number,\n    y: number,\n    x2: number,\n    y2: number,\n    life: number,\n    ttl: number,\n    radius: number,\n    hue: number,\n    ctx: CanvasRenderingContext2D\n  ) => {\n    ctx.save();\n    ctx.lineCap = \"round\";\n    ctx.lineWidth = radius;\n    ctx.strokeStyle = `hsla(${hue},100%,60%,${fadeInOut(life, ttl)})`;\n    ctx.beginPath();\n    ctx.moveTo(x, y);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.closePath();\n    ctx.restore();\n  };\n \n  const checkBounds = (x: number, y: number, canvas: HTMLCanvasElement) => {\n    return x > canvas.width || x < 0 || y > canvas.height || y < 0;\n  };\n \n  const resize = (\n    canvas: HTMLCanvasElement,\n    ctx?: CanvasRenderingContext2D\n  ) => {\n    const { innerWidth, innerHeight } = window;\n \n    canvas.width = innerWidth;\n    canvas.height = innerHeight;\n \n    center[0] = 0.5 * canvas.width;\n    center[1] = 0.5 * canvas.height;\n  };\n \n  const renderGlow = (\n    canvas: HTMLCanvasElement,\n    ctx: CanvasRenderingContext2D\n  ) => {\n    ctx.save();\n    ctx.filter = \"blur(8px) brightness(200%)\";\n    ctx.globalCompositeOperation = \"lighter\";\n    ctx.drawImage(canvas, 0, 0);\n    ctx.restore();\n \n    ctx.save();\n    ctx.filter = \"blur(4px) brightness(200%)\";\n    ctx.globalCompositeOperation = \"lighter\";\n    ctx.drawImage(canvas, 0, 0);\n    ctx.restore();\n  };\n \n  const renderToScreen = (\n    canvas: HTMLCanvasElement,\n    ctx: CanvasRenderingContext2D\n  ) => {\n    ctx.save();\n    ctx.globalCompositeOperation = \"lighter\";\n    ctx.drawImage(canvas, 0, 0);\n    ctx.restore();\n  };\n \n  useEffect(() => {\n    setup();\n    window.addEventListener(\"resize\", () => {\n      const canvas = canvasRef.current;\n      const ctx = canvas?.getContext(\"2d\");\n      if (canvas && ctx) {\n        resize(canvas, ctx);\n      }\n    });\n  }, []);\n \n  return (\n    <div className={cn(\"relative h-full w-full\", props.containerClassName)}>\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        ref={containerRef}\n        className=\"absolute h-full w-full inset-0 z-0 bg-transparent flex items-center justify-center\"\n      >\n        <canvas ref={canvasRef}></canvas>\n      </motion.div>\n \n      <div className={cn(\"relative z-10\", props.className)}>\n        {props.children}\n      </div>\n    </div>\n  );\n};\nCopy\nExpand\nFull page demo usage\nPreview\nCode\nThe hell is this?\n\nThis is chemical burn. It'll hurt more than you've ever been burned and you'll have a scar.\n\nOrder now\nWatch trailer\nProps\nProp Name\tType\tDefault Value\tDescription\nchildren\tany\t\tOptional children to be rendered inside the component.\nclassName\tstring\t\tOptional className for styling the children wrapper.\ncontainerClassName\tstring\t\tOptional className for styling the container.\nparticleCount\tnumber\t700\tNumber of particles to be generated.\nrangeY\tnumber\t100\tVertical range for particle movement.\nbaseHue\tnumber\t220\tBase hue for particle color.\nbaseSpeed\tnumber\t0.0\tBase speed for particle movement.\nrangeSpeed\tnumber\t1.5\tRange of speed variation for particles.\nbaseRadius\tnumber\t1\tBase radius of particles.\nrangeRadius\tnumber\t2\tRange of radius variation for particles.\nbackgroundColor\tstring\t\"#000000\"\tBackground color of the canvas.\n\nThis component is inspired by this GitHub Repo\n\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Typewriter Effect",
    "url": "https://ui.aceternity.com/components/typewriter-effect",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nTypewriter Effect\n\nText generates as if it is being typed on the screen.\n\nText\nContent\nHero\nSection\nSpecial\nPreview\nCode\n\nThe road to freedom starts from here\n\nBuild awesome apps with Aceternity. \nJoin now\nSignup\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/typewriter-effect.tsx\n\n\"use client\";\n \nimport { cn } from \"@/lib/utils\";\nimport { motion, stagger, useAnimate, useInView } from \"framer-motion\";\nimport { useEffect } from \"react\";\n \nexport const TypewriterEffect = ({\n  words,\n  className,\n  cursorClassName,\n}: {\n  words: {\n    text: string;\n    className?: string;\n  }[];\n  className?: string;\n  cursorClassName?: string;\n}) => {\n  // split text inside of words into array of characters\n  const wordsArray = words.map((word) => {\n    return {\n      ...word,\n      text: word.text.split(\"\"),\n    };\n  });\n \n  const [scope, animate] = useAnimate();\n  const isInView = useInView(scope);\n  useEffect(() => {\n    if (isInView) {\n      animate(\n        \"span\",\n        {\n          display: \"inline-block\",\n          opacity: 1,\n          width: \"fit-content\",\n        },\n        {\n          duration: 0.3,\n          delay: stagger(0.1),\n          ease: \"easeInOut\",\n        }\n      );\n    }\n  }, [isInView]);\n \n  const renderWords = () => {\n    return (\n      <motion.div ref={scope} className=\"inline\">\n        {wordsArray.map((word, idx) => {\n          return (\n            <div key={`word-${idx}`} className=\"inline-block\">\n              {word.text.map((char, index) => (\n                <motion.span\n                  initial={{}}\n                  key={`char-${index}`}\n                  className={cn(\n                    `dark:text-white text-black opacity-0 hidden`,\n                    word.className\n                  )}\n                >\n                  {char}\n                </motion.span>\n              ))}\n              &nbsp;\n            </div>\n          );\n        })}\n      </motion.div>\n    );\n  };\n  return (\n    <div\n      className={cn(\n        \"text-base sm:text-xl md:text-3xl lg:text-5xl font-bold text-center\",\n        className\n      )}\n    >\n      {renderWords()}\n      <motion.span\n        initial={{\n          opacity: 0,\n        }}\n        animate={{\n          opacity: 1,\n        }}\n        transition={{\n          duration: 0.8,\n          repeat: Infinity,\n          repeatType: \"reverse\",\n        }}\n        className={cn(\n          \"inline-block rounded-sm w-[4px] h-4 md:h-6 lg:h-10 bg-blue-500\",\n          cursorClassName\n        )}\n      ></motion.span>\n    </div>\n  );\n};\n \nexport const TypewriterEffectSmooth = ({\n  words,\n  className,\n  cursorClassName,\n}: {\n  words: {\n    text: string;\n    className?: string;\n  }[];\n  className?: string;\n  cursorClassName?: string;\n}) => {\n  // split text inside of words into array of characters\n  const wordsArray = words.map((word) => {\n    return {\n      ...word,\n      text: word.text.split(\"\"),\n    };\n  });\n  const renderWords = () => {\n    return (\n      <div>\n        {wordsArray.map((word, idx) => {\n          return (\n            <div key={`word-${idx}`} className=\"inline-block\">\n              {word.text.map((char, index) => (\n                <span\n                  key={`char-${index}`}\n                  className={cn(`dark:text-white text-black `, word.className)}\n                >\n                  {char}\n                </span>\n              ))}\n              &nbsp;\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n \n  return (\n    <div className={cn(\"flex space-x-1 my-6\", className)}>\n      <motion.div\n        className=\"overflow-hidden pb-2\"\n        initial={{\n          width: \"0%\",\n        }}\n        whileInView={{\n          width: \"fit-content\",\n        }}\n        transition={{\n          duration: 2,\n          ease: \"linear\",\n          delay: 1,\n        }}\n      >\n        <div\n          className=\"text-xs sm:text-base md:text-xl lg:text:3xl xl:text-5xl font-bold\"\n          style={{\n            whiteSpace: \"nowrap\",\n          }}\n        >\n          {renderWords()}{\" \"}\n        </div>{\" \"}\n      </motion.div>\n      <motion.span\n        initial={{\n          opacity: 0,\n        }}\n        animate={{\n          opacity: 1,\n        }}\n        transition={{\n          duration: 0.8,\n \n          repeat: Infinity,\n          repeatType: \"reverse\",\n        }}\n        className={cn(\n          \"block rounded-sm w-[4px]  h-4 sm:h-6 xl:h-12 bg-blue-500\",\n          cursorClassName\n        )}\n      ></motion.span>\n    </div>\n  );\n};\nCopy\nExpand\nExample\n\nA more janky animation to give a typing effect.\n\nPreview\nCode\n\nThe road to freedom starts from here\n\n     \nJoin now\nSignup\nProps\nProp name\tType\tDescription\nclassName\tstring\tThe class name of the container component.\nwords\tArray<{text: string; className: string;}>\tEvery word with a className that you can define\ncursorClassName\tstring\tThe className of the cursor component\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Tracing Beam",
    "url": "https://ui.aceternity.com/components/tracing-beam",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nTracing Beam\n\nA Beam that follows the path of an SVG as the user scrolls. Adjusts beam length with scroll speed.\n\nContent\nScroll\nUtility\nPreview\nCode\nReact\n\nLorem Ipsum Dolor Sit Amet\n\nSit duis est minim proident non nisi velit non consectetur. Esse adipisicing laboris consectetur enim ipsum reprehenderit eu deserunt Lorem ut aliqua anim do. Duis cupidatat qui irure cupidatat incididunt incididunt enim magna id est qui sunt fugiat. Laboris do duis pariatur fugiat Lorem aute sit ullamco. Qui deserunt non reprehenderit dolore nisi velit exercitation Lorem qui do enim culpa. Aliqua eiusmod in occaecat reprehenderit laborum nostrud fugiat voluptate do Lorem culpa officia sint labore. Tempor consectetur excepteur ut fugiat veniam commodo et labore dolore commodo pariatur.\n\nDolor minim irure ut Lorem proident. Ipsum do pariatur est ad ad veniam in commodo id reprehenderit adipisicing. Proident duis exercitation ad quis ex cupidatat cupidatat occaecat adipisicing.\n\nTempor quis dolor veniam quis dolor. Sit reprehenderit eiusmod reprehenderit deserunt amet laborum consequat adipisicing officia qui irure id sint adipisicing. Adipisicing fugiat aliqua nulla nostrud. Amet culpa officia aliquip deserunt veniam deserunt officia adipisicing aliquip proident officia sunt.\n\nChangelog\n\nLorem Ipsum Dolor Sit Amet\n\nEx irure dolore veniam ex velit non aute nisi labore ipsum occaecat deserunt cupidatat aute. Enim cillum dolor et nulla sunt exercitation non voluptate qui aliquip esse tempor. Ullamco ut sunt consectetur sint qui qui do do qui do. Labore laborum culpa magna reprehenderit ea velit id esse adipisicing deserunt amet dolore. Ipsum occaecat veniam commodo proident aliqua id ad deserunt dolor aliquip duis veniam sunt.\n\nIn dolore veniam excepteur eu est et sunt velit. Ipsum sint esse veniam fugiat esse qui sint ad sunt reprehenderit do qui proident reprehenderit. Laborum exercitation aliqua reprehenderit ea sint cillum ut mollit.\n\nLaunch Week\n\nLorem Ipsum Dolor Sit Amet\n\nEx irure dolore veniam ex velit non aute nisi labore ipsum occaecat deserunt cupidatat aute. Enim cillum dolor et nulla sunt exercitation non voluptate qui aliquip esse tempor. Ullamco ut sunt consectetur sint qui qui do do qui do. Labore laborum culpa magna reprehenderit ea velit id esse adipisicing deserunt amet dolore. Ipsum occaecat veniam commodo proident aliqua id ad deserunt dolor aliquip duis veniam sunt.\n\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nAdd the following code in tailwind.config.js file\nconst defaultTheme = require(\"tailwindcss/defaultTheme\");\nconst colors = require(\"tailwindcss/colors\");\nconst {\n  default: flattenColorPalette,\n} = require(\"tailwindcss/lib/util/flattenColorPalette\");\n \n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./src/**/*.{ts,tsx}\"],\n  darkMode: \"class\",\n  theme: {\n    // rest of the code\n  },\n  plugins: [\n    // rest of the code\n    addVariablesForColors,\n  ],\n};\n \n// This plugin adds each Tailwind color as a global CSS variable, e.g. var(--gray-200).\nfunction addVariablesForColors({ addBase, theme }: any) {\n  let allColors = flattenColorPalette(theme(\"colors\"));\n  let newVars = Object.fromEntries(\n    Object.entries(allColors).map(([key, val]) => [`--${key}`, val])\n  );\n \n  addBase({\n    \":root\": newVars,\n  });\n}\nCopy\nCopy the source code\n\ncomponents/ui/tracing-beam.tsx\n\n\"use client\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport {\n  motion,\n  useTransform,\n  useScroll,\n  useVelocity,\n  useSpring,\n} from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n \nexport const TracingBeam = ({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const { scrollYProgress } = useScroll({\n    target: ref,\n    offset: [\"start start\", \"end start\"],\n  });\n \n  const contentRef = useRef<HTMLDivElement>(null);\n  const [svgHeight, setSvgHeight] = useState(0);\n \n  useEffect(() => {\n    if (contentRef.current) {\n      setSvgHeight(contentRef.current.offsetHeight);\n    }\n  }, []);\n \n  const y1 = useSpring(\n    useTransform(scrollYProgress, [0, 0.8], [50, svgHeight]),\n    {\n      stiffness: 500,\n      damping: 90,\n    }\n  );\n  const y2 = useSpring(\n    useTransform(scrollYProgress, [0, 1], [50, svgHeight - 200]),\n    {\n      stiffness: 500,\n      damping: 90,\n    }\n  );\n \n  return (\n    <motion.div\n      ref={ref}\n      className={cn(\"relative w-full max-w-4xl mx-auto h-full\", className)}\n    >\n      <div className=\"absolute -left-4 md:-left-20 top-3\">\n        <motion.div\n          transition={{\n            duration: 0.2,\n            delay: 0.5,\n          }}\n          animate={{\n            boxShadow:\n              scrollYProgress.get() > 0\n                ? \"none\"\n                : \"rgba(0, 0, 0, 0.24) 0px 3px 8px\",\n          }}\n          className=\"ml-[27px] h-4 w-4 rounded-full border border-netural-200 shadow-sm flex items-center justify-center\"\n        >\n          <motion.div\n            transition={{\n              duration: 0.2,\n              delay: 0.5,\n            }}\n            animate={{\n              backgroundColor:\n                scrollYProgress.get() > 0 ? \"white\" : \"var(--emerald-500)\",\n              borderColor:\n                scrollYProgress.get() > 0 ? \"white\" : \"var(--emerald-600)\",\n            }}\n            className=\"h-2 w-2  rounded-full border border-neutral-300 bg-white\"\n          />\n        </motion.div>\n        <svg\n          viewBox={`0 0 20 ${svgHeight}`}\n          width=\"20\"\n          height={svgHeight} // Set the SVG height\n          className=\" ml-4 block\"\n          aria-hidden=\"true\"\n        >\n          <motion.path\n            d={`M 1 0V -36 l 18 24 V ${svgHeight * 0.8} l -18 24V ${svgHeight}`}\n            fill=\"none\"\n            stroke=\"#9091A0\"\n            strokeOpacity=\"0.16\"\n            transition={{\n              duration: 10,\n            }}\n          ></motion.path>\n          <motion.path\n            d={`M 1 0V -36 l 18 24 V ${svgHeight * 0.8} l -18 24V ${svgHeight}`}\n            fill=\"none\"\n            stroke=\"url(#gradient)\"\n            strokeWidth=\"1.25\"\n            className=\"motion-reduce:hidden\"\n            transition={{\n              duration: 10,\n            }}\n          ></motion.path>\n          <defs>\n            <motion.linearGradient\n              id=\"gradient\"\n              gradientUnits=\"userSpaceOnUse\"\n              x1=\"0\"\n              x2=\"0\"\n              y1={y1} // set y1 for gradient\n              y2={y2} // set y2 for gradient\n            >\n              <stop stopColor=\"#18CCFC\" stopOpacity=\"0\"></stop>\n              <stop stopColor=\"#18CCFC\"></stop>\n              <stop offset=\"0.325\" stopColor=\"#6344F5\"></stop>\n              <stop offset=\"1\" stopColor=\"#AE48FF\" stopOpacity=\"0\"></stop>\n            </motion.linearGradient>\n          </defs>\n        </svg>\n      </div>\n      <div ref={contentRef}>{children}</div>\n    </motion.div>\n  );\n};\nCopy\nExpand\nProps\nProp name\tType\tDescription\nclassName\tstring\tThe class name of the child component.\nchildren\tReact.ReactNode\tThe contents of your page\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Text Reveal Card",
    "url": "https://ui.aceternity.com/components/text-reveal-card",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nText Reveal Card\n\nMousemove effect to reveal text content at the bottom of the card.\n\nText\nContent\nHero\nSection\nSpecial\nCard\nPreview\nCode\nSometimes, you just need to see it.\n\nThis is a text reveal card. Hover over the card to reveal the hidden text.\n\nI know the chemistry\n\nYou know the business\n\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/text-reveal-card.tsx\n\n\"use client\";\nimport React, { useEffect, useRef, useState, memo } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { twMerge } from \"tailwind-merge\";\nimport { cn } from \"@/lib/utils\";\n \nexport const TextRevealCard = ({\n  text,\n  revealText,\n  children,\n  className,\n}: {\n  text: string;\n  revealText: string;\n  children?: React.ReactNode;\n  className?: string;\n}) => {\n  const [widthPercentage, setWidthPercentage] = useState(0);\n  const cardRef = useRef<HTMLDivElement | any>(null);\n  const [left, setLeft] = useState(0);\n  const [localWidth, setLocalWidth] = useState(0);\n  const [isMouseOver, setIsMouseOver] = useState(false);\n \n  useEffect(() => {\n    if (cardRef.current) {\n      const { left, width: localWidth } =\n        cardRef.current.getBoundingClientRect();\n      setLeft(left);\n      setLocalWidth(localWidth);\n    }\n  }, []);\n \n  function mouseMoveHandler(event: any) {\n    event.preventDefault();\n \n    const { clientX } = event;\n    if (cardRef.current) {\n      const relativeX = clientX - left;\n      setWidthPercentage((relativeX / localWidth) * 100);\n    }\n  }\n \n  function mouseLeaveHandler() {\n    setIsMouseOver(false);\n    setWidthPercentage(0);\n  }\n  function mouseEnterHandler() {\n    setIsMouseOver(true);\n  }\n  function touchMoveHandler(event: React.TouchEvent<HTMLDivElement>) {\n    event.preventDefault();\n    const clientX = event.touches[0]!.clientX;\n    if (cardRef.current) {\n      const relativeX = clientX - left;\n      setWidthPercentage((relativeX / localWidth) * 100);\n    }\n  }\n \n  const rotateDeg = (widthPercentage - 50) * 0.1;\n  return (\n    <div\n      onMouseEnter={mouseEnterHandler}\n      onMouseLeave={mouseLeaveHandler}\n      onMouseMove={mouseMoveHandler}\n      onTouchStart={mouseEnterHandler}\n      onTouchEnd={mouseLeaveHandler}\n      onTouchMove={touchMoveHandler}\n      ref={cardRef}\n      className={cn(\n        \"bg-[#1d1c20] border border-white/[0.08] w-[40rem] rounded-lg p-8 relative overflow-hidden\",\n        className\n      )}\n    >\n      {children}\n \n      <div className=\"h-40  relative flex items-center overflow-hidden\">\n        <motion.div\n          style={{\n            width: \"100%\",\n          }}\n          animate={\n            isMouseOver\n              ? {\n                  opacity: widthPercentage > 0 ? 1 : 0,\n                  clipPath: `inset(0 ${100 - widthPercentage}% 0 0)`,\n                }\n              : {\n                  clipPath: `inset(0 ${100 - widthPercentage}% 0 0)`,\n                }\n          }\n          transition={isMouseOver ? { duration: 0 } : { duration: 0.4 }}\n          className=\"absolute bg-[#1d1c20] z-20  will-change-transform\"\n        >\n          <p\n            style={{\n              textShadow: \"4px 4px 15px rgba(0,0,0,0.5)\",\n            }}\n            className=\"text-base sm:text-[3rem] py-10 font-bold text-white bg-clip-text text-transparent bg-gradient-to-b from-white to-neutral-300\"\n          >\n            {revealText}\n          </p>\n        </motion.div>\n        <motion.div\n          animate={{\n            left: `${widthPercentage}%`,\n            rotate: `${rotateDeg}deg`,\n            opacity: widthPercentage > 0 ? 1 : 0,\n          }}\n          transition={isMouseOver ? { duration: 0 } : { duration: 0.4 }}\n          className=\"h-40 w-[8px] bg-gradient-to-b from-transparent via-neutral-800 to-transparent absolute z-50 will-change-transform\"\n        ></motion.div>\n \n        <div className=\" overflow-hidden [mask-image:linear-gradient(to_bottom,transparent,white,transparent)]\">\n          <p className=\"text-base sm:text-[3rem] py-10 font-bold bg-clip-text text-transparent bg-[#323238]\">\n            {text}\n          </p>\n          <MemoizedStars />\n        </div>\n      </div>\n    </div>\n  );\n};\n \nexport const TextRevealCardTitle = ({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  return (\n    <h2 className={twMerge(\"text-white text-lg mb-2\", className)}>\n      {children}\n    </h2>\n  );\n};\n \nexport const TextRevealCardDescription = ({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  return (\n    <p className={twMerge(\"text-[#a9a9a9] text-sm\", className)}>{children}</p>\n  );\n};\n \nconst Stars = () => {\n  const randomMove = () => Math.random() * 4 - 2;\n  const randomOpacity = () => Math.random();\n  const random = () => Math.random();\n  return (\n    <div className=\"absolute inset-0\">\n      {[...Array(80)].map((_, i) => (\n        <motion.span\n          key={`star-${i}`}\n          animate={{\n            top: `calc(${random() * 100}% + ${randomMove()}px)`,\n            left: `calc(${random() * 100}% + ${randomMove()}px)`,\n            opacity: randomOpacity(),\n            scale: [1, 1.2, 0],\n          }}\n          transition={{\n            duration: random() * 10 + 20,\n            repeat: Infinity,\n            ease: \"linear\",\n          }}\n          style={{\n            position: \"absolute\",\n            top: `${random() * 100}%`,\n            left: `${random() * 100}%`,\n            width: `2px`,\n            height: `2px`,\n            backgroundColor: \"white\",\n            borderRadius: \"50%\",\n            zIndex: 1,\n          }}\n          className=\"inline-block\"\n        ></motion.span>\n      ))}\n    </div>\n  );\n};\n \nexport const MemoizedStars = memo(Stars);\nCopy\nExpand\nProps\nProp name\tType\tDescription\nclassName\tstring\tThe class name of the TextReveal component.\ntext\tstring\tPiece of text that stays on the card\nrevealText\tstring\tText that reveals when hovered over the card\nchildren\tReact Node\tTitle and Descriptions for the Card\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Text Generate Effect",
    "url": "https://ui.aceternity.com/components/text-generate-effect",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nText Generate Effect\n\nA cool text effect that fades in text on page load, one by one.\n\nText\nContent\nHero\nSection\nSpecial\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/text-generate-effect.tsx\n\n\"use client\";\nimport { useEffect } from \"react\";\nimport { motion, stagger, useAnimate } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n \nexport const TextGenerateEffect = ({\n  words,\n  className,\n  filter = true,\n  duration = 0.5,\n}: {\n  words: string;\n  className?: string;\n  filter?: boolean;\n  duration?: number;\n}) => {\n  const [scope, animate] = useAnimate();\n  let wordsArray = words.split(\" \");\n  useEffect(() => {\n    animate(\n      \"span\",\n      {\n        opacity: 1,\n        filter: filter ? \"blur(0px)\" : \"none\",\n      },\n      {\n        duration: duration ? duration : 1,\n        delay: stagger(0.2),\n      }\n    );\n  }, [scope.current]);\n \n  const renderWords = () => {\n    return (\n      <motion.div ref={scope}>\n        {wordsArray.map((word, idx) => {\n          return (\n            <motion.span\n              key={word + idx}\n              className=\"dark:text-white text-black opacity-0\"\n              style={{\n                filter: filter ? \"blur(10px)\" : \"none\",\n              }}\n            >\n              {word}{\" \"}\n            </motion.span>\n          );\n        })}\n      </motion.div>\n    );\n  };\n \n  return (\n    <div className={cn(\"font-bold\", className)}>\n      <div className=\"mt-4\">\n        <div className=\" dark:text-white text-black text-2xl leading-snug tracking-wide\">\n          {renderWords()}\n        </div>\n      </div>\n    </div>\n  );\n};\nCopy\nExpand\nExample\nSimple without filter\nPreview\nCode\nLoading...\nProps\nProp name\tType\tDescription\nclassName\tstring\tThe class name of the child component.\nwords\tstring\tThe word string that you want to animate\nduration\tnumber\tThe duration of the animation\nfilter\tboolean\tWhether to apply a filter to the text\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "SVG Mask Effect",
    "url": "https://ui.aceternity.com/components/svg-mask-effect",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nSVG Mask Effect\n\nA mask reveal effect, hover the cursor over a container to reveal what's underneath.\n\nCard\nSpecial\nPreview\nCode\nThe first rule of MRR Club is you do not talk about MRR Club. The second rule of MRR Club is you DO NOT talk about MRR Club.\n\nThe first rule of MRR Club is you do not talk about MRR Club. The second rule of MRR Club is you DO NOT talk about MRR Club.\n\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nAdd mask in public folder\npublic/mask.svg\n<svg\n  width=\"1298\"\n  height=\"1298\"\n  viewBox=\"0 0 1298 1298\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n>\n  <circle cx=\"649\" cy=\"649\" r=\"649\" fill=\"black\" />\n</svg>\nCopy\nCopy the source code\n\ncomponents/ui/svg-mask-effect.tsx\n\n\"use client\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n \nexport const MaskContainer = ({\n  children,\n  revealText,\n  size = 10,\n  revealSize = 600,\n  className,\n}: {\n  children?: string | React.ReactNode;\n  revealText?: string | React.ReactNode;\n  size?: number;\n  revealSize?: number;\n  className?: string;\n}) => {\n  const [isHovered, setIsHovered] = useState(false);\n  const [mousePosition, setMousePosition] = useState<any>({ x: null, y: null });\n  const containerRef = useRef<any>(null);\n  const updateMousePosition = (e: any) => {\n    const rect = containerRef.current.getBoundingClientRect();\n    setMousePosition({ x: e.clientX - rect.left, y: e.clientY - rect.top });\n  };\n \n  useEffect(() => {\n    containerRef.current.addEventListener(\"mousemove\", updateMousePosition);\n    return () => {\n      if (containerRef.current) {\n        containerRef.current.removeEventListener(\n          \"mousemove\",\n          updateMousePosition\n        );\n      }\n    };\n  }, []);\n  let maskSize = isHovered ? revealSize : size;\n \n  return (\n    <motion.div\n      ref={containerRef}\n      className={cn(\"h-screen relative\", className)}\n      animate={{\n        backgroundColor: isHovered ? \"var(--slate-900)\" : \"var(--white)\",\n      }}\n    >\n      <motion.div\n        className=\"w-full h-full flex items-center justify-center text-6xl absolute bg-black bg-grid-white/[0.2] text-white [mask-image:url(/mask.svg)] [mask-size:40px] [mask-repeat:no-repeat]\"\n        animate={{\n          maskPosition: `${mousePosition.x - maskSize / 2}px ${\n            mousePosition.y - maskSize / 2\n          }px`,\n          maskSize: `${maskSize}px`,\n        }}\n        transition={{\n          duration: 0,\n        }}\n      >\n        <div className=\"absolute inset-0 bg-black h-full w-full z-0 opacity-50\" />\n        <div\n          onMouseEnter={() => {\n            setIsHovered(true);\n          }}\n          onMouseLeave={() => {\n            setIsHovered(false);\n          }}\n          className=\"max-w-4xl mx-auto text-center text-white  text-4xl font-bold relative z-20\"\n        >\n          {children}\n        </div>\n      </motion.div>\n \n      <div className=\"w-full h-full flex items-center justify-center  text-white\">\n        {revealText}\n      </div>\n    </motion.div>\n  );\n};\nCopy\nExpand\nProps\nProp name\tType\tDescription\nclassName\tstring\tThe class name of the Background Beams component.\nchildren\tstring | ReactNode\tThe content of the page that you want to keep static / always on the page\nrevealText\tstring | ReactNode\tThe component that is revealed on hover\nsize\tnumber\tsize of the mask\nrevealSize\tnumber\tHovered over size of the mask\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Animated Tabs",
    "url": "https://ui.aceternity.com/components/tabs",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nAnimated Tabs\n\nTabs to switch content, click on a tab to check background animation.\n\nHero\nFeatures\nProduct\nUtility\nPreview\nCode\nProduct\nServices\nPlayground\nContent\nRandom\n\nProduct Tab\n\nServices tab\n\nPlayground tab\n\nContent tab\n\nRandom tab\n\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/tabs.tsx\n\n\"use client\";\n \nimport { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n \ntype Tab = {\n  title: string;\n  value: string;\n  content?: string | React.ReactNode | any;\n};\n \nexport const Tabs = ({\n  tabs: propTabs,\n  containerClassName,\n  activeTabClassName,\n  tabClassName,\n  contentClassName,\n}: {\n  tabs: Tab[];\n  containerClassName?: string;\n  activeTabClassName?: string;\n  tabClassName?: string;\n  contentClassName?: string;\n}) => {\n  const [active, setActive] = useState<Tab>(propTabs[0]);\n  const [tabs, setTabs] = useState<Tab[]>(propTabs);\n \n  const moveSelectedTabToTop = (idx: number) => {\n    const newTabs = [...propTabs];\n    const selectedTab = newTabs.splice(idx, 1);\n    newTabs.unshift(selectedTab[0]);\n    setTabs(newTabs);\n    setActive(newTabs[0]);\n  };\n \n  const [hovering, setHovering] = useState(false);\n \n  return (\n    <>\n      <div\n        className={cn(\n          \"flex flex-row items-center justify-start [perspective:1000px] relative overflow-auto sm:overflow-visible no-visible-scrollbar max-w-full w-full\",\n          containerClassName\n        )}\n      >\n        {propTabs.map((tab, idx) => (\n          <button\n            key={tab.title}\n            onClick={() => {\n              moveSelectedTabToTop(idx);\n            }}\n            onMouseEnter={() => setHovering(true)}\n            onMouseLeave={() => setHovering(false)}\n            className={cn(\"relative px-4 py-2 rounded-full\", tabClassName)}\n            style={{\n              transformStyle: \"preserve-3d\",\n            }}\n          >\n            {active.value === tab.value && (\n              <motion.div\n                layoutId=\"clickedbutton\"\n                transition={{ type: \"spring\", bounce: 0.3, duration: 0.6 }}\n                className={cn(\n                  \"absolute inset-0 bg-gray-200 dark:bg-zinc-800 rounded-full \",\n                  activeTabClassName\n                )}\n              />\n            )}\n \n            <span className=\"relative block text-black dark:text-white\">\n              {tab.title}\n            </span>\n          </button>\n        ))}\n      </div>\n      <FadeInDiv\n        tabs={tabs}\n        active={active}\n        key={active.value}\n        hovering={hovering}\n        className={cn(\"mt-32\", contentClassName)}\n      />\n    </>\n  );\n};\n \nexport const FadeInDiv = ({\n  className,\n  tabs,\n  hovering,\n}: {\n  className?: string;\n  key?: string;\n  tabs: Tab[];\n  active: Tab;\n  hovering?: boolean;\n}) => {\n  const isActive = (tab: Tab) => {\n    return tab.value === tabs[0].value;\n  };\n  return (\n    <div className=\"relative w-full h-full\">\n      {tabs.map((tab, idx) => (\n        <motion.div\n          key={tab.value}\n          layoutId={tab.value}\n          style={{\n            scale: 1 - idx * 0.1,\n            top: hovering ? idx * -50 : 0,\n            zIndex: -idx,\n            opacity: idx < 3 ? 1 - idx * 0.1 : 0,\n          }}\n          animate={{\n            y: isActive(tab) ? [0, 40, 0] : 0,\n          }}\n          className={cn(\"w-full h-full absolute top-0 left-0\", className)}\n        >\n          {tab.content}\n        </motion.div>\n      ))}\n    </div>\n  );\n};\nCopy\nExpand\nCopy to globals.css to hide scrollbar (optional)\nglobals.css\n.no-visible-scrollbar {\n  scrollbar-width: none;\n  -ms-overflow-style: none;\n  -webkit-overflow-scrolling: touch;\n}\n \n.no-visible-scrollbar::-webkit-scrollbar {\n  display: none;\n}\nCopy\nProps\nProp\tType\tDescription\ntabs\tTab[]\tAn array of Tab objects. Each Tab object has title, value, and content properties.\ncontainerClassName\tstring\tOptional. CSS class name for the container div.\nactiveTabClassName\tstring\tOptional. CSS class name for the active tab.\ntabClassName\tstring\tOptional. CSS class name for the tab.\ncontentClassName\tstring\tOptional. CSS class name for the content div.\n\nFadeInDiv Component\n\nProp\tType\tDescription\nclassName\tstring\tOptional. CSS class name for the FadeInDiv.\ntabs\tTab[]\tAn array of Tab objects. Each Tab object has title, value, and content properties.\nactive\tTab\tThe currently active Tab object.\nhovering\tboolean\tOptional. A boolean indicating whether the mouse is hovering over the component.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Tailwind CSS buttons",
    "url": "https://ui.aceternity.com/components/tailwindcss-buttons",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nTailwind CSS buttons\n\nA curated list of awesome, battle tested Tailwind CSS buttons components\n\nButton\nUtility\nPreview\nCode\nSketch\nSimple\nInvert it\nTailwind Connect\nGradient\nUnapologetic\nLit up borders\nBorder Magic\nBRUTAL\nFavourite\nOutline\nShimmer\nNext.js Blue\nNext White\nSPOTIFY\nBackdrop blur\nPLAYLIST\nFigma\nFigma Outline\nTop gradient\n\nAll the buttons can be copied directly from the preview. The source code is also available in the Installation section.\n\nInstallation (optional)\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge react-element-to-jsx-string\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\n\nCopy these keyframe and animation styles in tailwind.config.ts file\n\ntailwind.config.ts\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./src/pages/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./src/components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./src/app/**/*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  darkMode: \"class\",\n  theme: {\n    extend: {\n      animation: {\n        shimmer: \"shimmer 2s linear infinite\",\n      },\n      keyframes: {\n        shimmer: {\n          from: {\n            backgroundPosition: \"0 0\",\n          },\n          to: {\n            backgroundPosition: \"-200% 0\",\n          },\n        },\n      },\n    },\n  },\n  plugins: [],\n};\nCopy\nCopy the source code (optional)\n\ncomponents/ui/tailwindcss-buttons.tsx\n\n\"use client\";\nimport React from \"react\";\nimport { IconClipboard } from \"@tabler/icons-react\";\nimport { cn } from \"@/lib/utils\";\n \nexport const ButtonsCard = ({\n  children,\n  className,\n  onClick,\n}: {\n  children?: React.ReactNode;\n  className?: string;\n  onClick?: () => void;\n}) => {\n  return (\n    <div\n      onClick={onClick}\n      className={cn(\n        \"h-60 w-full bg-white rounded-xl border border-neutral-100 dark:bg-black dark:border-white/[0.2] hover:border-neutral-200 group/btn overflow-hidden relative flex items-center justify-center\",\n        className\n      )}\n    >\n      <div className=\"absolute inset-0 dark:bg-dot-white/[0.1] bg-dot-black/[0.1]\" />\n      <IconClipboard className=\"absolute top-2 right-2 text-neutral-300 group-hover/btn:block hidden h-4 w-4 transition duration-200\" />\n      <div className=\"relative z-40\">{children}</div>\n    </div>\n  );\n};\nCopy\nExpand\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Sticky Scroll Reveal",
    "url": "https://ui.aceternity.com/components/sticky-scroll-reveal",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nSticky Scroll Reveal\n\nA sticky container that sticks while scrolling, text reveals on scroll\n\nSpecial\nParallax\nSection\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nAdd the following code in tailwind.config.js file\nconst defaultTheme = require(\"tailwindcss/defaultTheme\");\nconst colors = require(\"tailwindcss/colors\");\nconst {\n  default: flattenColorPalette,\n} = require(\"tailwindcss/lib/util/flattenColorPalette\");\n \n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./src/**/*.{ts,tsx}\"],\n  darkMode: \"class\",\n  theme: {\n    // rest of the code\n  },\n  plugins: [\n    // rest of the code\n    addVariablesForColors,\n  ],\n};\n \n// This plugin adds each Tailwind color as a global CSS variable, e.g. var(--gray-200).\nfunction addVariablesForColors({ addBase, theme }: any) {\n  let allColors = flattenColorPalette(theme(\"colors\"));\n  let newVars = Object.fromEntries(\n    Object.entries(allColors).map(([key, val]) => [`--${key}`, val])\n  );\n \n  addBase({\n    \":root\": newVars,\n  });\n}\nCopy\nCopy the source code\n\ncomponents/ui/sticky-scroll-reveal.tsx\n\n\"use client\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useMotionValueEvent, useScroll } from \"framer-motion\";\nimport { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n \nexport const StickyScroll = ({\n  content,\n  contentClassName,\n}: {\n  content: {\n    title: string;\n    description: string;\n    content?: React.ReactNode | any;\n  }[];\n  contentClassName?: string;\n}) => {\n  const [activeCard, setActiveCard] = React.useState(0);\n  const ref = useRef<any>(null);\n  const { scrollYProgress } = useScroll({\n    // uncomment line 22 and comment line 23 if you DONT want the overflow container and want to have it change on the entire page scroll\n    // target: ref\n    container: ref,\n    offset: [\"start start\", \"end start\"],\n  });\n  const cardLength = content.length;\n \n  useMotionValueEvent(scrollYProgress, \"change\", (latest) => {\n    const cardsBreakpoints = content.map((_, index) => index / cardLength);\n    const closestBreakpointIndex = cardsBreakpoints.reduce(\n      (acc, breakpoint, index) => {\n        const distance = Math.abs(latest - breakpoint);\n        if (distance < Math.abs(latest - cardsBreakpoints[acc])) {\n          return index;\n        }\n        return acc;\n      },\n      0\n    );\n    setActiveCard(closestBreakpointIndex);\n  });\n \n  const backgroundColors = [\n    \"var(--slate-900)\",\n    \"var(--black)\",\n    \"var(--neutral-900)\",\n  ];\n  const linearGradients = [\n    \"linear-gradient(to bottom right, var(--cyan-500), var(--emerald-500))\",\n    \"linear-gradient(to bottom right, var(--pink-500), var(--indigo-500))\",\n    \"linear-gradient(to bottom right, var(--orange-500), var(--yellow-500))\",\n  ];\n \n  const [backgroundGradient, setBackgroundGradient] = useState(\n    linearGradients[0]\n  );\n \n  useEffect(() => {\n    setBackgroundGradient(linearGradients[activeCard % linearGradients.length]);\n  }, [activeCard]);\n \n  return (\n    <motion.div\n      animate={{\n        backgroundColor: backgroundColors[activeCard % backgroundColors.length],\n      }}\n      className=\"h-[30rem] overflow-y-auto flex justify-center relative space-x-10 rounded-md p-10\"\n      ref={ref}\n    >\n      <div className=\"div relative flex items-start px-4\">\n        <div className=\"max-w-2xl\">\n          {content.map((item, index) => (\n            <div key={item.title + index} className=\"my-20\">\n              <motion.h2\n                initial={{\n                  opacity: 0,\n                }}\n                animate={{\n                  opacity: activeCard === index ? 1 : 0.3,\n                }}\n                className=\"text-2xl font-bold text-slate-100\"\n              >\n                {item.title}\n              </motion.h2>\n              <motion.p\n                initial={{\n                  opacity: 0,\n                }}\n                animate={{\n                  opacity: activeCard === index ? 1 : 0.3,\n                }}\n                className=\"text-kg text-slate-300 max-w-sm mt-10\"\n              >\n                {item.description}\n              </motion.p>\n            </div>\n          ))}\n          <div className=\"h-40\" />\n        </div>\n      </div>\n      <div\n        style={{ background: backgroundGradient }}\n        className={cn(\n          \"hidden lg:block h-60 w-80 rounded-md bg-white sticky top-10 overflow-hidden\",\n          contentClassName\n        )}\n      >\n        {content[activeCard].content ?? null}\n      </div>\n    </motion.div>\n  );\n};\nCopy\nExpand\nProps\nProp name\tType\tDescription\ncontent\tArray<{title: string, description: string, content: React.ReactNode}>\tcontent object that renders the children inside sticky scroll component .\ncontentClassName\tstring\tclassName for the right side container that sticks to the top .\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Spotlight",
    "url": "https://ui.aceternity.com/components/spotlight",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nSpotlight\n\nA spotlight effect with Tailwind CSS, good for drawing attention to a particular element on the page.\n\nHero\nFooter\nSection\nSpecial\nPreview\nCode\nSpotlight\nis the new trend.\n\nSpotlight effect is a great way to draw attention to a specific part of the page. Here, we are drawing the attention towards the text section of the page. I don't know why but I'm running out of copy.\n\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/Spotlight.tsx\n\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\n \ntype SpotlightProps = {\n  className?: string;\n  fill?: string;\n};\n \nexport const Spotlight = ({ className, fill }: SpotlightProps) => {\n  return (\n    <svg\n      className={cn(\n        \"animate-spotlight pointer-events-none absolute z-[1]  h-[169%] w-[138%] lg:w-[84%] opacity-0\",\n        className\n      )}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 3787 2842\"\n      fill=\"none\"\n    >\n      <g filter=\"url(#filter)\">\n        <ellipse\n          cx=\"1924.71\"\n          cy=\"273.501\"\n          rx=\"1924.71\"\n          ry=\"273.501\"\n          transform=\"matrix(-0.822377 -0.568943 -0.568943 0.822377 3631.88 2291.09)\"\n          fill={fill || \"white\"}\n          fillOpacity=\"0.21\"\n        ></ellipse>\n      </g>\n      <defs>\n        <filter\n          id=\"filter\"\n          x=\"0.860352\"\n          y=\"0.838989\"\n          width=\"3785.16\"\n          height=\"2840.26\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\"></feFlood>\n          <feBlend\n            mode=\"normal\"\n            in=\"SourceGraphic\"\n            in2=\"BackgroundImageFix\"\n            result=\"shape\"\n          ></feBlend>\n          <feGaussianBlur\n            stdDeviation=\"151\"\n            result=\"effect1_foregroundBlur_1065_8\"\n          ></feGaussianBlur>\n        </filter>\n      </defs>\n    </svg>\n  );\n};\nCopy\nExpand\n\nCopy the highlighted spotlight animation into tailwind.config.js file\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./src/**/*.{ts,tsx}\"],\n  darkMode: \"class\",\n  theme: {\n    extend: {\n      animation: {\n        spotlight: \"spotlight 2s ease .75s 1 forwards\",\n      },\n      keyframes: {\n        spotlight: {\n          \"0%\": {\n            opacity: 0,\n            transform: \"translate(-72%, -62%) scale(0.5)\",\n          },\n          \"100%\": {\n            opacity: 1,\n            transform: \"translate(-50%,-40%) scale(1)\",\n          },\n        },\n      },\n    },\n  },\n  plugins: [],\n};\nCopy\nProps\nProp name\tType\tDescription\nclassName\tstring\tThe class name of the spotlight component.\nfill\tstring\tHex color for the spotlight fill.\n\nThis component is inspired from TypeHero's landing page\n\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Sparkles",
    "url": "https://ui.aceternity.com/components/sparkles",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nSparkles\n\nA configurable sparkles component that can be used as a background or as a standalone component.\n\nSection\nSpecial\nCall To Action\nHero\nPreview\nCode\nAceternity\nInstallation\nCLI\nManual\nInstall Dependencies\nnpm i framer-motion clsx tailwind-merge @tsparticles/react @tsparticles/engine @tsparticles/slim\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy and paste the following code into your project\n\ncomponents/ui/sparkles.tsx\n\n\"use client\";\nimport React, { useId, useMemo } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport Particles, { initParticlesEngine } from \"@tsparticles/react\";\nimport type { Container, SingleOrMultiple } from \"@tsparticles/engine\";\nimport { loadSlim } from \"@tsparticles/slim\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, useAnimation } from \"framer-motion\";\n \ntype ParticlesProps = {\n  id?: string;\n  className?: string;\n  background?: string;\n  particleSize?: number;\n  minSize?: number;\n  maxSize?: number;\n  speed?: number;\n  particleColor?: string;\n  particleDensity?: number;\n};\nexport const SparklesCore = (props: ParticlesProps) => {\n  const {\n    id,\n    className,\n    background,\n    minSize,\n    maxSize,\n    speed,\n    particleColor,\n    particleDensity,\n  } = props;\n  const [init, setInit] = useState(false);\n  useEffect(() => {\n    initParticlesEngine(async (engine) => {\n      await loadSlim(engine);\n    }).then(() => {\n      setInit(true);\n    });\n  }, []);\n  const controls = useAnimation();\n \n  const particlesLoaded = async (container?: Container) => {\n    if (container) {\n      console.log(container);\n      controls.start({\n        opacity: 1,\n        transition: {\n          duration: 1,\n        },\n      });\n    }\n  };\n \n  const generatedId = useId();\n  return (\n    <motion.div animate={controls} className={cn(\"opacity-0\", className)}>\n      {init && (\n        <Particles\n          id={id || generatedId}\n          className={cn(\"h-full w-full\")}\n          particlesLoaded={particlesLoaded}\n          options={{\n            background: {\n              color: {\n                value: background || \"#0d47a1\",\n              },\n            },\n            fullScreen: {\n              enable: false,\n              zIndex: 1,\n            },\n \n            fpsLimit: 120,\n            interactivity: {\n              events: {\n                onClick: {\n                  enable: true,\n                  mode: \"push\",\n                },\n                onHover: {\n                  enable: false,\n                  mode: \"repulse\",\n                },\n                resize: true as any,\n              },\n              modes: {\n                push: {\n                  quantity: 4,\n                },\n                repulse: {\n                  distance: 200,\n                  duration: 0.4,\n                },\n              },\n            },\n            particles: {\n              bounce: {\n                horizontal: {\n                  value: 1,\n                },\n                vertical: {\n                  value: 1,\n                },\n              },\n              collisions: {\n                absorb: {\n                  speed: 2,\n                },\n                bounce: {\n                  horizontal: {\n                    value: 1,\n                  },\n                  vertical: {\n                    value: 1,\n                  },\n                },\n                enable: false,\n                maxSpeed: 50,\n                mode: \"bounce\",\n                overlap: {\n                  enable: true,\n                  retries: 0,\n                },\n              },\n              color: {\n                value: particleColor || \"#ffffff\",\n                animation: {\n                  h: {\n                    count: 0,\n                    enable: false,\n                    speed: 1,\n                    decay: 0,\n                    delay: 0,\n                    sync: true,\n                    offset: 0,\n                  },\n                  s: {\n                    count: 0,\n                    enable: false,\n                    speed: 1,\n                    decay: 0,\n                    delay: 0,\n                    sync: true,\n                    offset: 0,\n                  },\n                  l: {\n                    count: 0,\n                    enable: false,\n                    speed: 1,\n                    decay: 0,\n                    delay: 0,\n                    sync: true,\n                    offset: 0,\n                  },\n                },\n              },\n              effect: {\n                close: true,\n                fill: true,\n                options: {},\n                type: {} as SingleOrMultiple<string> | undefined,\n              },\n              groups: {},\n              move: {\n                angle: {\n                  offset: 0,\n                  value: 90,\n                },\n                attract: {\n                  distance: 200,\n                  enable: false,\n                  rotate: {\n                    x: 3000,\n                    y: 3000,\n                  },\n                },\n                center: {\n                  x: 50,\n                  y: 50,\n                  mode: \"percent\",\n                  radius: 0,\n                },\n                decay: 0,\n                distance: {},\n                direction: \"none\",\n                drift: 0,\n                enable: true,\n                gravity: {\n                  acceleration: 9.81,\n                  enable: false,\n                  inverse: false,\n                  maxSpeed: 50,\n                },\n                path: {\n                  clamp: true,\n                  delay: {\n                    value: 0,\n                  },\n                  enable: false,\n                  options: {},\n                },\n                outModes: {\n                  default: \"out\",\n                },\n                random: false,\n                size: false,\n                speed: {\n                  min: 0.1,\n                  max: 1,\n                },\n                spin: {\n                  acceleration: 0,\n                  enable: false,\n                },\n                straight: false,\n                trail: {\n                  enable: false,\n                  length: 10,\n                  fill: {},\n                },\n                vibrate: false,\n                warp: false,\n              },\n              number: {\n                density: {\n                  enable: true,\n                  width: 400,\n                  height: 400,\n                },\n                limit: {\n                  mode: \"delete\",\n                  value: 0,\n                },\n                value: particleDensity || 120,\n              },\n              opacity: {\n                value: {\n                  min: 0.1,\n                  max: 1,\n                },\n                animation: {\n                  count: 0,\n                  enable: true,\n                  speed: speed || 4,\n                  decay: 0,\n                  delay: 0,\n                  sync: false,\n                  mode: \"auto\",\n                  startValue: \"random\",\n                  destroy: \"none\",\n                },\n              },\n              reduceDuplicates: false,\n              shadow: {\n                blur: 0,\n                color: {\n                  value: \"#000\",\n                },\n                enable: false,\n                offset: {\n                  x: 0,\n                  y: 0,\n                },\n              },\n              shape: {\n                close: true,\n                fill: true,\n                options: {},\n                type: \"circle\",\n              },\n              size: {\n                value: {\n                  min: minSize || 1,\n                  max: maxSize || 3,\n                },\n                animation: {\n                  count: 0,\n                  enable: false,\n                  speed: 5,\n                  decay: 0,\n                  delay: 0,\n                  sync: false,\n                  mode: \"auto\",\n                  startValue: \"random\",\n                  destroy: \"none\",\n                },\n              },\n              stroke: {\n                width: 0,\n              },\n              zIndex: {\n                value: 0,\n                opacityRate: 1,\n                sizeRate: 1,\n                velocityRate: 1,\n              },\n              destroy: {\n                bounds: {},\n                mode: \"none\",\n                split: {\n                  count: 1,\n                  factor: {\n                    value: 3,\n                  },\n                  rate: {\n                    value: {\n                      min: 4,\n                      max: 9,\n                    },\n                  },\n                  sizeOffset: true,\n                },\n              },\n              roll: {\n                darken: {\n                  enable: false,\n                  value: 0,\n                },\n                enable: false,\n                enlighten: {\n                  enable: false,\n                  value: 0,\n                },\n                mode: \"vertical\",\n                speed: 25,\n              },\n              tilt: {\n                value: 0,\n                animation: {\n                  enable: false,\n                  speed: 0,\n                  decay: 0,\n                  sync: false,\n                },\n                direction: \"clockwise\",\n                enable: false,\n              },\n              twinkle: {\n                lines: {\n                  enable: false,\n                  frequency: 0.05,\n                  opacity: 1,\n                },\n                particles: {\n                  enable: false,\n                  frequency: 0.05,\n                  opacity: 1,\n                },\n              },\n              wobble: {\n                distance: 5,\n                enable: false,\n                speed: {\n                  angle: 50,\n                  move: 10,\n                },\n              },\n              life: {\n                count: 0,\n                delay: {\n                  value: 0,\n                  sync: false,\n                },\n                duration: {\n                  value: 0,\n                  sync: false,\n                },\n              },\n              rotate: {\n                value: 0,\n                animation: {\n                  enable: false,\n                  speed: 0,\n                  decay: 0,\n                  sync: false,\n                },\n                direction: \"clockwise\",\n                path: false,\n              },\n              orbit: {\n                animation: {\n                  count: 0,\n                  enable: false,\n                  speed: 1,\n                  decay: 0,\n                  delay: 0,\n                  sync: false,\n                },\n                enable: false,\n                opacity: 1,\n                rotation: {\n                  value: 45,\n                },\n                width: 1,\n              },\n              links: {\n                blink: false,\n                color: {\n                  value: \"#fff\",\n                },\n                consent: false,\n                distance: 100,\n                enable: false,\n                frequency: 1,\n                opacity: 1,\n                shadow: {\n                  blur: 5,\n                  color: {\n                    value: \"#000\",\n                  },\n                  enable: false,\n                },\n                triangles: {\n                  enable: false,\n                  frequency: 1,\n                },\n                width: 1,\n                warp: false,\n              },\n              repulse: {\n                value: 0,\n                enabled: false,\n                distance: 1,\n                duration: 1,\n                factor: 1,\n                speed: 1,\n              },\n            },\n            detectRetina: true,\n          }}\n        />\n      )}\n    </motion.div>\n  );\n};\nCopy\nExpand\nExamples\nPreview\nCode\nBuild great products\nProps\nProp name\tType\tDescription\nid\tstring\tThe id of the sparkles component.\nclassName\tstring\tThe class name of the sparkles component.\nbackground\tstring\tThe background color of the sparkles component.\nparticleSize\tnumber\tThe size of the particles in the sparkles component.\nminSize\tnumber\tThe minimum size of the particles in the sparkles component.\nmaxSize\tnumber\tThe maximum size of the particles in the sparkles component.\nspeed\tnumber\tThe speed of the particles in the sparkles component.\nparticleColor\tstring\tThe color of the particles in the sparkles component.\nparticleDensity\tnumber\tThe density of the particles in the sparkles component.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Signup Form",
    "url": "https://ui.aceternity.com/components/signup-form",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nSignup Form\n\nA customizable form built on top of shadcn's input and label, with a touch of framer motion\n\nUtility\nForm\nSection\nPreview\nCode\nWelcome to Aceternity\n\nLogin to aceternity if you can because we don't have a login flow yet\n\nFirst name\nLast name\nEmail Address\nPassword\nYour twitter password\nSign up →\nGitHub\nGoogle\nOnlyFans\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge @radix-ui/react-label @tabler/icons-react\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nModify the config file to add a plugin and a box shadow\ntailwind.config.ts\nconst defaultTheme = require(\"tailwindcss/defaultTheme\");\n \nconst colors = require(\"tailwindcss/colors\");\nconst {\n  default: flattenColorPalette,\n} = require(\"tailwindcss/lib/util/flattenColorPalette\");\n \n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./src/**/*.{ts,tsx}\"],\n  darkMode: \"class\",\n  theme: {\n    // rest of the code\n    extend: {\n      boxShadow: {\n        input: `0px 2px 3px -1px rgba(0,0,0,0.1), 0px 1px 0px 0px rgba(25,28,33,0.02), 0px 0px 0px 1px rgba(25,28,33,0.08)`,\n      },\n    },\n  },\n  plugins: [addVariablesForColors],\n};\n \nfunction addVariablesForColors({ addBase, theme }: any) {\n  let allColors = flattenColorPalette(theme(\"colors\"));\n  let newVars = Object.fromEntries(\n    Object.entries(allColors).map(([key, val]) => [`--${key}`, val])\n  );\n \n  addBase({\n    \":root\": newVars,\n  });\n}\nCopy\nCopy the source code\n\ncomponents/ui/input.tsx\n\n// Input component extends from shadcnui - https://ui.shadcn.com/docs/components/input\n\"use client\";\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { useMotionTemplate, useMotionValue, motion } from \"framer-motion\";\n \nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n \nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    const radius = 100; // change this to increase the rdaius of the hover effect\n    const [visible, setVisible] = React.useState(false);\n \n    let mouseX = useMotionValue(0);\n    let mouseY = useMotionValue(0);\n \n    function handleMouseMove({ currentTarget, clientX, clientY }: any) {\n      let { left, top } = currentTarget.getBoundingClientRect();\n \n      mouseX.set(clientX - left);\n      mouseY.set(clientY - top);\n    }\n    return (\n      <motion.div\n        style={{\n          background: useMotionTemplate`\n        radial-gradient(\n          ${visible ? radius + \"px\" : \"0px\"} circle at ${mouseX}px ${mouseY}px,\n          var(--blue-500),\n          transparent 80%\n        )\n      `,\n        }}\n        onMouseMove={handleMouseMove}\n        onMouseEnter={() => setVisible(true)}\n        onMouseLeave={() => setVisible(false)}\n        className=\"p-[2px] rounded-lg transition duration-300 group/input\"\n      >\n        <input\n          type={type}\n          className={cn(\n            `flex h-10 w-full border-none bg-gray-50 dark:bg-zinc-800 text-black dark:text-white shadow-input rounded-md px-3 py-2 text-sm  file:border-0 file:bg-transparent \n          file:text-sm file:font-medium placeholder:text-neutral-400 dark:placeholder-text-neutral-600 \n          focus-visible:outline-none focus-visible:ring-[2px]  focus-visible:ring-neutral-400 dark:focus-visible:ring-neutral-600\n           disabled:cursor-not-allowed disabled:opacity-50\n           dark:shadow-[0px_0px_1px_1px_var(--neutral-700)]\n           group-hover/input:shadow-none transition duration-400\n           `,\n            className\n          )}\n          ref={ref}\n          {...props}\n        />\n      </motion.div>\n    );\n  }\n);\nInput.displayName = \"Input\";\n \nexport { Input };\nCopy\nExpand\n\ncomponents/ui/label.tsx\n\n// Label component extends from shadcnui - https://ui.shadcn.com/docs/components/label\n \n\"use client\";\nimport * as React from \"react\";\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\n \nimport { cn } from \"@/lib/utils\";\n \nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"text-sm font-medium text-black dark:text-white leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n      className\n    )}\n    {...props}\n  />\n));\nLabel.displayName = LabelPrimitive.Root.displayName;\n \nexport { Label };\nCopy\nExpand\nProps\ninput.tsx\nProp Name\tType\tDescription\nclassName\tstring\tAdditional CSS classes to apply to the input component.\ntype\tstring\tSpecifies the type of input (e.g., \"text\", \"password\"). Inherits all standard HTML input types.\n...props\tReact.InputHTMLAttributes<HTMLInputElement>\tSpreads the rest of the input attributes (e.g., placeholder, disabled, value, etc.) from React's InputHTMLAttributes.\nref\tReact.Ref<HTMLInputElement>\tRef forwarding is used to allow parent components to directly access the DOM input element.\nlabel.tsx\nProp\tType\tDescription\nclassName\tstring\tAdditional CSS classes to apply to the label component.\n...props\tReact.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\tAll other props supported by LabelPrimitive.Root from @radix-ui/react-label.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Sidebar",
    "url": "https://ui.aceternity.com/components/sidebar",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nSidebar\n\nExpandable sidebar that expands on hover, mobile responsive and dark mode support\n\nSidebar\nSpecial\nUtilities\nDashboard\nPreview\nCode\nDashboard\nProfile\nSettings\nLogout\nManu Arora\nInstallation\nCLI\nManual\nInstall util dependencies\nnpm i framer-motion clsx tailwind-merge @tabler/icons-react\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/sidebar.tsx\n\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport Link, { LinkProps } from \"next/link\";\nimport React, { useState, createContext, useContext } from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { IconMenu2, IconX } from \"@tabler/icons-react\";\n \ninterface Links {\n  label: string;\n  href: string;\n  icon: React.JSX.Element | React.ReactNode;\n}\n \ninterface SidebarContextProps {\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  animate: boolean;\n}\n \nconst SidebarContext = createContext<SidebarContextProps | undefined>(\n  undefined\n);\n \nexport const useSidebar = () => {\n  const context = useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider\");\n  }\n  return context;\n};\n \nexport const SidebarProvider = ({\n  children,\n  open: openProp,\n  setOpen: setOpenProp,\n  animate = true,\n}: {\n  children: React.ReactNode;\n  open?: boolean;\n  setOpen?: React.Dispatch<React.SetStateAction<boolean>>;\n  animate?: boolean;\n}) => {\n  const [openState, setOpenState] = useState(false);\n \n  const open = openProp !== undefined ? openProp : openState;\n  const setOpen = setOpenProp !== undefined ? setOpenProp : setOpenState;\n \n  return (\n    <SidebarContext.Provider value={{ open, setOpen, animate: animate }}>\n      {children}\n    </SidebarContext.Provider>\n  );\n};\n \nexport const Sidebar = ({\n  children,\n  open,\n  setOpen,\n  animate,\n}: {\n  children: React.ReactNode;\n  open?: boolean;\n  setOpen?: React.Dispatch<React.SetStateAction<boolean>>;\n  animate?: boolean;\n}) => {\n  return (\n    <SidebarProvider open={open} setOpen={setOpen} animate={animate}>\n      {children}\n    </SidebarProvider>\n  );\n};\n \nexport const SidebarBody = (props: React.ComponentProps<typeof motion.div>) => {\n  return (\n    <>\n      <DesktopSidebar {...props} />\n      <MobileSidebar {...(props as React.ComponentProps<\"div\">)} />\n    </>\n  );\n};\n \nexport const DesktopSidebar = ({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof motion.div>) => {\n  const { open, setOpen, animate } = useSidebar();\n  return (\n    <>\n      <motion.div\n        className={cn(\n          \"h-full px-4 py-4 hidden  md:flex md:flex-col bg-neutral-100 dark:bg-neutral-800 w-[300px] flex-shrink-0\",\n          className\n        )}\n        animate={{\n          width: animate ? (open ? \"300px\" : \"60px\") : \"300px\",\n        }}\n        onMouseEnter={() => setOpen(true)}\n        onMouseLeave={() => setOpen(false)}\n        {...props}\n      >\n        {children}\n      </motion.div>\n    </>\n  );\n};\n \nexport const MobileSidebar = ({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\">) => {\n  const { open, setOpen } = useSidebar();\n  return (\n    <>\n      <div\n        className={cn(\n          \"h-10 px-4 py-4 flex flex-row md:hidden  items-center justify-between bg-neutral-100 dark:bg-neutral-800 w-full\"\n        )}\n        {...props}\n      >\n        <div className=\"flex justify-end z-20 w-full\">\n          <IconMenu2\n            className=\"text-neutral-800 dark:text-neutral-200\"\n            onClick={() => setOpen(!open)}\n          />\n        </div>\n        <AnimatePresence>\n          {open && (\n            <motion.div\n              initial={{ x: \"-100%\", opacity: 0 }}\n              animate={{ x: 0, opacity: 1 }}\n              exit={{ x: \"-100%\", opacity: 0 }}\n              transition={{\n                duration: 0.3,\n                ease: \"easeInOut\",\n              }}\n              className={cn(\n                \"fixed h-full w-full inset-0 bg-white dark:bg-neutral-900 p-10 z-[100] flex flex-col justify-between\",\n                className\n              )}\n            >\n              <div\n                className=\"absolute right-10 top-10 z-50 text-neutral-800 dark:text-neutral-200\"\n                onClick={() => setOpen(!open)}\n              >\n                <IconX />\n              </div>\n              {children}\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    </>\n  );\n};\n \nexport const SidebarLink = ({\n  link,\n  className,\n  ...props\n}: {\n  link: Links;\n  className?: string;\n  props?: LinkProps;\n}) => {\n  const { open, animate } = useSidebar();\n  return (\n    <Link\n      href={link.href}\n      className={cn(\n        \"flex items-center justify-start gap-2  group/sidebar py-2\",\n        className\n      )}\n      {...props}\n    >\n      {link.icon}\n \n      <motion.span\n        animate={{\n          display: animate ? (open ? \"inline-block\" : \"none\") : \"inline-block\",\n          opacity: animate ? (open ? 1 : 0) : 1,\n        }}\n        className=\"text-neutral-700 dark:text-neutral-200 text-sm group-hover/sidebar:translate-x-1 transition duration-150 whitespace-pre inline-block !p-0 !m-0\"\n      >\n        {link.label}\n      </motion.span>\n    </Link>\n  );\n};\nCopy\nExpand\nExample\nDefault sidebar open\n\nuse the prop animate={false} to disable the animation\n\nPreview\nCode\nAcet Labs\nDashboard\nProfile\nSettings\nLogout\nManu Arora\nProps\nSidebarProvider Props\nProp Name\tType\tDefault\tDescription\nchildren\tReact.ReactNode\t-\tThe content to be rendered inside the provider.\nopen\tboolean\tfalse\tControls the open state of the sidebar.\nsetOpen\tReact.Dispatch<React.SetStateAction<boolean>>\t-\tFunction to set the open state of the sidebar.\nSidebar Props\nProp Name\tType\tDefault\tDescription\nchildren\tReact.ReactNode\t-\tThe content to be rendered inside the sidebar.\nopen\tboolean\tfalse\tControls the open state of the sidebar.\nsetOpen\tReact.Dispatch<React.SetStateAction<boolean>>\t-\tFunction to set the open state of the sidebar.\nanimate\tboolean\ttrue\tControls the animation of the sidebar. Put false if you want to disable animation\nSidebarBody Props\nProp Name\tType\tDefault\tDescription\nprops\tReact.ComponentProps<typeof motion.div>\t-\tProps to be passed to the motion.div component.\nDesktopSidebar Props\nProp Name\tType\tDefault\tDescription\nclassName\tstring\t-\tAdditional class names for styling.\nchildren\tReact.ReactNode\t-\tThe content to be rendered inside the desktop sidebar.\nprops\tReact.ComponentProps<typeof motion.div>\t-\tProps to be passed to the motion.div component.\nMobileSidebar Props\nProp Name\tType\tDefault\tDescription\nclassName\tstring\t-\tAdditional class names for styling.\nchildren\tReact.ReactNode\t-\tThe content to be rendered inside the mobile sidebar.\nprops\tReact.ComponentProps<\"div\">\t-\tProps to be passed to the div component.\nSidebarLink Props\nProp Name\tType\tDefault\tDescription\nlink\tLinks\t-\tThe link object containing label, href, and icon.\nclassName\tstring\t-\tAdditional class names for styling.\nprops\tLinkProps\t-\tProps to be passed to the Link component.\nLinks Interface\nProperty\tType\tDescription\nlabel\tstring\tThe text label for the link.\nhref\tstring\tThe URL the link points to.\nicon\tReact.JSX.Element | React.ReactNode\tThe icon to be displayed alongside the link.\nSidebarContextProps Interface\nProperty\tType\tDescription\nopen\tboolean\tIndicates whether the sidebar is open.\nsetOpen\tReact.Dispatch<React.SetStateAction<boolean>>\tFunction to set the open state of the sidebar.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Shooting Stars and Stars Background",
    "url": "https://ui.aceternity.com/components/shooting-stars-and-stars-background",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nShooting Stars and Stars Background\n\nA shooting star animation on top of a starry background, as seen on figmaplug.in\n\nCard\nBackground\nGradient\nSpecial\nPreview\nCode\nShooting Star\nx\nStar Background\nInstallation\nCLI\nManual\nInstall util dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code for Shooting Stars\n\ncomponents/ui/shooting-stars.tsx\n\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport React, { useEffect, useState, useRef } from \"react\";\n \ninterface ShootingStar {\n  id: number;\n  x: number;\n  y: number;\n  angle: number;\n  scale: number;\n  speed: number;\n  distance: number;\n}\n \ninterface ShootingStarsProps {\n  minSpeed?: number;\n  maxSpeed?: number;\n  minDelay?: number;\n  maxDelay?: number;\n  starColor?: string;\n  trailColor?: string;\n  starWidth?: number;\n  starHeight?: number;\n  className?: string;\n}\n \nconst getRandomStartPoint = () => {\n  const side = Math.floor(Math.random() * 4);\n  const offset = Math.random() * window.innerWidth;\n \n  switch (side) {\n    case 0:\n      return { x: offset, y: 0, angle: 45 };\n    case 1:\n      return { x: window.innerWidth, y: offset, angle: 135 };\n    case 2:\n      return { x: offset, y: window.innerHeight, angle: 225 };\n    case 3:\n      return { x: 0, y: offset, angle: 315 };\n    default:\n      return { x: 0, y: 0, angle: 45 };\n  }\n};\nexport const ShootingStars: React.FC<ShootingStarsProps> = ({\n  minSpeed = 10,\n  maxSpeed = 30,\n  minDelay = 1200,\n  maxDelay = 4200,\n  starColor = \"#9E00FF\",\n  trailColor = \"#2EB9DF\",\n  starWidth = 10,\n  starHeight = 1,\n  className,\n}) => {\n  const [star, setStar] = useState<ShootingStar | null>(null);\n  const svgRef = useRef<SVGSVGElement>(null);\n \n  useEffect(() => {\n    const createStar = () => {\n      const { x, y, angle } = getRandomStartPoint();\n      const newStar: ShootingStar = {\n        id: Date.now(),\n        x,\n        y,\n        angle,\n        scale: 1,\n        speed: Math.random() * (maxSpeed - minSpeed) + minSpeed,\n        distance: 0,\n      };\n      setStar(newStar);\n \n      const randomDelay = Math.random() * (maxDelay - minDelay) + minDelay;\n      setTimeout(createStar, randomDelay);\n    };\n \n    createStar();\n \n    return () => {};\n  }, [minSpeed, maxSpeed, minDelay, maxDelay]);\n \n  useEffect(() => {\n    const moveStar = () => {\n      if (star) {\n        setStar((prevStar) => {\n          if (!prevStar) return null;\n          const newX =\n            prevStar.x +\n            prevStar.speed * Math.cos((prevStar.angle * Math.PI) / 180);\n          const newY =\n            prevStar.y +\n            prevStar.speed * Math.sin((prevStar.angle * Math.PI) / 180);\n          const newDistance = prevStar.distance + prevStar.speed;\n          const newScale = 1 + newDistance / 100;\n          if (\n            newX < -20 ||\n            newX > window.innerWidth + 20 ||\n            newY < -20 ||\n            newY > window.innerHeight + 20\n          ) {\n            return null;\n          }\n          return {\n            ...prevStar,\n            x: newX,\n            y: newY,\n            distance: newDistance,\n            scale: newScale,\n          };\n        });\n      }\n    };\n \n    const animationFrame = requestAnimationFrame(moveStar);\n    return () => cancelAnimationFrame(animationFrame);\n  }, [star]);\n \n  return (\n    <svg\n      ref={svgRef}\n      className={cn(\"w-full h-full absolute inset-0\", className)}\n    >\n      {star && (\n        <rect\n          key={star.id}\n          x={star.x}\n          y={star.y}\n          width={starWidth * star.scale}\n          height={starHeight}\n          fill=\"url(#gradient)\"\n          transform={`rotate(${star.angle}, ${\n            star.x + (starWidth * star.scale) / 2\n          }, ${star.y + starHeight / 2})`}\n        />\n      )}\n      <defs>\n        <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n          <stop offset=\"0%\" style={{ stopColor: trailColor, stopOpacity: 0 }} />\n          <stop\n            offset=\"100%\"\n            style={{ stopColor: starColor, stopOpacity: 1 }}\n          />\n        </linearGradient>\n      </defs>\n    </svg>\n  );\n};\nCopy\nExpand\nCopy the source code for Stars Background\n\ncomponents/ui/stars-background.tsx\n\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport React, {\n  useState,\n  useEffect,\n  useRef,\n  RefObject,\n  useCallback,\n} from \"react\";\n \ninterface StarProps {\n  x: number;\n  y: number;\n  radius: number;\n  opacity: number;\n  twinkleSpeed: number | null;\n}\n \ninterface StarBackgroundProps {\n  starDensity?: number;\n  allStarsTwinkle?: boolean;\n  twinkleProbability?: number;\n  minTwinkleSpeed?: number;\n  maxTwinkleSpeed?: number;\n  className?: string;\n}\n \nexport const StarsBackground: React.FC<StarBackgroundProps> = ({\n  starDensity = 0.00015,\n  allStarsTwinkle = true,\n  twinkleProbability = 0.7,\n  minTwinkleSpeed = 0.5,\n  maxTwinkleSpeed = 1,\n  className,\n}) => {\n  const [stars, setStars] = useState<StarProps[]>([]);\n  const canvasRef: RefObject<HTMLCanvasElement> =\n    useRef<HTMLCanvasElement>(null);\n \n  const generateStars = useCallback(\n    (width: number, height: number): StarProps[] => {\n      const area = width * height;\n      const numStars = Math.floor(area * starDensity);\n      return Array.from({ length: numStars }, () => {\n        const shouldTwinkle =\n          allStarsTwinkle || Math.random() < twinkleProbability;\n        return {\n          x: Math.random() * width,\n          y: Math.random() * height,\n          radius: Math.random() * 0.05 + 0.5,\n          opacity: Math.random() * 0.5 + 0.5,\n          twinkleSpeed: shouldTwinkle\n            ? minTwinkleSpeed +\n              Math.random() * (maxTwinkleSpeed - minTwinkleSpeed)\n            : null,\n        };\n      });\n    },\n    [\n      starDensity,\n      allStarsTwinkle,\n      twinkleProbability,\n      minTwinkleSpeed,\n      maxTwinkleSpeed,\n    ]\n  );\n \n  useEffect(() => {\n    const updateStars = () => {\n      if (canvasRef.current) {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) return;\n \n        const { width, height } = canvas.getBoundingClientRect();\n        canvas.width = width;\n        canvas.height = height;\n        setStars(generateStars(width, height));\n      }\n    };\n \n    updateStars();\n \n    const resizeObserver = new ResizeObserver(updateStars);\n    if (canvasRef.current) {\n      resizeObserver.observe(canvasRef.current);\n    }\n \n    return () => {\n      if (canvasRef.current) {\n        resizeObserver.unobserve(canvasRef.current);\n      }\n    };\n  }, [\n    starDensity,\n    allStarsTwinkle,\n    twinkleProbability,\n    minTwinkleSpeed,\n    maxTwinkleSpeed,\n    generateStars,\n  ]);\n \n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n \n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n \n    let animationFrameId: number;\n \n    const render = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      stars.forEach((star) => {\n        ctx.beginPath();\n        ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);\n        ctx.fillStyle = `rgba(255, 255, 255, ${star.opacity})`;\n        ctx.fill();\n \n        if (star.twinkleSpeed !== null) {\n          star.opacity =\n            0.5 +\n            Math.abs(Math.sin((Date.now() * 0.001) / star.twinkleSpeed) * 0.5);\n        }\n      });\n \n      animationFrameId = requestAnimationFrame(render);\n    };\n \n    render();\n \n    return () => {\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [stars]);\n \n  return (\n    <canvas\n      ref={canvasRef}\n      className={cn(\"h-full w-full absolute inset-0\", className)}\n    />\n  );\n};\nCopy\nExpand\nProps\nShooting Stars\nProp\tType\tDefault\tDescription\nminSpeed\tnumber\t10\tMinimum speed of the shooting stars\nmaxSpeed\tnumber\t30\tMaximum speed of the shooting stars\nminDelay\tnumber\t4200\tMinimum delay between shooting stars (in milliseconds)\nmaxDelay\tnumber\t8700\tMaximum delay between shooting stars (in milliseconds)\nstarColor\tstring\t\"#9E00FF\"\tColor of the star (end of the gradient)\ntrailColor\tstring\t\"#2EB9DF\"\tColor of the star's trail (start of the gradient)\nstarWidth\tnumber\t10\tWidth of the shooting star\nstarHeight\tnumber\t1\tHeight of the shooting star\nclassName\tstring\tundefined\tAdditional CSS classes to apply to the SVG container\nStars Background\nProp\tType\tDefault\tDescription\nstarDensity\tnumber\t0.00015\tDetermines the number of stars per pixel area. Higher values create more stars.\nallStarsTwinkle\tboolean\ttrue\tIf true, all stars will twinkle. If false, only a portion of stars will twinkle based on twinkleProbability.\ntwinkleProbability\tnumber\t0.7\tThe probability (0-1) that a star will twinkle when allStarsTwinkle is false.\nminTwinkleSpeed\tnumber\t0.5\tThe minimum duration (in seconds) for a star's twinkle animation.\nmaxTwinkleSpeed\tnumber\t1\tThe maximum duration (in seconds) for a star's twinkle animation.\nclassName\tstring\tundefined\tAdditional CSS classes to apply to the container div.\n\nThis component is created by Vijay Verma for figmaplug.in. You can checkout the original code here\n\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Placeholders And Vanish Input",
    "url": "https://ui.aceternity.com/components/placeholders-and-vanish-input",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nPlaceholders And Vanish Input\n\nSliding in placeholders and vanish effect of input on submit\n\nUtility\nForm\nSection\nSpecial\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/placeholders-and-vanish-input.tsx\n\n\"use client\";\n \nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\n \nexport function PlaceholdersAndVanishInput({\n  placeholders,\n  onChange,\n  onSubmit,\n}: {\n  placeholders: string[];\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\n}) {\n  const [currentPlaceholder, setCurrentPlaceholder] = useState(0);\n \n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const startAnimation = () => {\n    intervalRef.current = setInterval(() => {\n      setCurrentPlaceholder((prev) => (prev + 1) % placeholders.length);\n    }, 3000);\n  };\n  const handleVisibilityChange = () => {\n    if (document.visibilityState !== \"visible\" && intervalRef.current) {\n      clearInterval(intervalRef.current); // Clear the interval when the tab is not visible\n      intervalRef.current = null;\n    } else if (document.visibilityState === \"visible\") {\n      startAnimation(); // Restart the interval when the tab becomes visible\n    }\n  };\n \n  useEffect(() => {\n    startAnimation();\n    document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n \n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n    };\n  }, [placeholders]);\n \n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const newDataRef = useRef<any[]>([]);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [value, setValue] = useState(\"\");\n  const [animating, setAnimating] = useState(false);\n \n  const draw = useCallback(() => {\n    if (!inputRef.current) return;\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n \n    canvas.width = 800;\n    canvas.height = 800;\n    ctx.clearRect(0, 0, 800, 800);\n    const computedStyles = getComputedStyle(inputRef.current);\n \n    const fontSize = parseFloat(computedStyles.getPropertyValue(\"font-size\"));\n    ctx.font = `${fontSize * 2}px ${computedStyles.fontFamily}`;\n    ctx.fillStyle = \"#FFF\";\n    ctx.fillText(value, 16, 40);\n \n    const imageData = ctx.getImageData(0, 0, 800, 800);\n    const pixelData = imageData.data;\n    const newData: any[] = [];\n \n    for (let t = 0; t < 800; t++) {\n      let i = 4 * t * 800;\n      for (let n = 0; n < 800; n++) {\n        let e = i + 4 * n;\n        if (\n          pixelData[e] !== 0 &&\n          pixelData[e + 1] !== 0 &&\n          pixelData[e + 2] !== 0\n        ) {\n          newData.push({\n            x: n,\n            y: t,\n            color: [\n              pixelData[e],\n              pixelData[e + 1],\n              pixelData[e + 2],\n              pixelData[e + 3],\n            ],\n          });\n        }\n      }\n    }\n \n    newDataRef.current = newData.map(({ x, y, color }) => ({\n      x,\n      y,\n      r: 1,\n      color: `rgba(${color[0]}, ${color[1]}, ${color[2]}, ${color[3]})`,\n    }));\n  }, [value]);\n \n  useEffect(() => {\n    draw();\n  }, [value, draw]);\n \n  const animate = (start: number) => {\n    const animateFrame = (pos: number = 0) => {\n      requestAnimationFrame(() => {\n        const newArr = [];\n        for (let i = 0; i < newDataRef.current.length; i++) {\n          const current = newDataRef.current[i];\n          if (current.x < pos) {\n            newArr.push(current);\n          } else {\n            if (current.r <= 0) {\n              current.r = 0;\n              continue;\n            }\n            current.x += Math.random() > 0.5 ? 1 : -1;\n            current.y += Math.random() > 0.5 ? 1 : -1;\n            current.r -= 0.05 * Math.random();\n            newArr.push(current);\n          }\n        }\n        newDataRef.current = newArr;\n        const ctx = canvasRef.current?.getContext(\"2d\");\n        if (ctx) {\n          ctx.clearRect(pos, 0, 800, 800);\n          newDataRef.current.forEach((t) => {\n            const { x: n, y: i, r: s, color: color } = t;\n            if (n > pos) {\n              ctx.beginPath();\n              ctx.rect(n, i, s, s);\n              ctx.fillStyle = color;\n              ctx.strokeStyle = color;\n              ctx.stroke();\n            }\n          });\n        }\n        if (newDataRef.current.length > 0) {\n          animateFrame(pos - 8);\n        } else {\n          setValue(\"\");\n          setAnimating(false);\n        }\n      });\n    };\n    animateFrame(start);\n  };\n \n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\" && !animating) {\n      vanishAndSubmit();\n    }\n  };\n \n  const vanishAndSubmit = () => {\n    setAnimating(true);\n    draw();\n \n    const value = inputRef.current?.value || \"\";\n    if (value && inputRef.current) {\n      const maxX = newDataRef.current.reduce(\n        (prev, current) => (current.x > prev ? current.x : prev),\n        0\n      );\n      animate(maxX);\n    }\n  };\n \n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    vanishAndSubmit();\n    onSubmit && onSubmit(e);\n  };\n  return (\n    <form\n      className={cn(\n        \"w-full relative max-w-xl mx-auto bg-white dark:bg-zinc-800 h-12 rounded-full overflow-hidden shadow-[0px_2px_3px_-1px_rgba(0,0,0,0.1),_0px_1px_0px_0px_rgba(25,28,33,0.02),_0px_0px_0px_1px_rgba(25,28,33,0.08)] transition duration-200\",\n        value && \"bg-gray-50\"\n      )}\n      onSubmit={handleSubmit}\n    >\n      <canvas\n        className={cn(\n          \"absolute pointer-events-none  text-base transform scale-50 top-[20%] left-2 sm:left-8 origin-top-left filter invert dark:invert-0 pr-20\",\n          !animating ? \"opacity-0\" : \"opacity-100\"\n        )}\n        ref={canvasRef}\n      />\n      <input\n        onChange={(e) => {\n          if (!animating) {\n            setValue(e.target.value);\n            onChange && onChange(e);\n          }\n        }}\n        onKeyDown={handleKeyDown}\n        ref={inputRef}\n        value={value}\n        type=\"text\"\n        className={cn(\n          \"w-full relative text-sm sm:text-base z-50 border-none dark:text-white bg-transparent text-black h-full rounded-full focus:outline-none focus:ring-0 pl-4 sm:pl-10 pr-20\",\n          animating && \"text-transparent dark:text-transparent\"\n        )}\n      />\n \n      <button\n        disabled={!value}\n        type=\"submit\"\n        className=\"absolute right-2 top-1/2 z-50 -translate-y-1/2 h-8 w-8 rounded-full disabled:bg-gray-100 bg-black dark:bg-zinc-900 dark:disabled:bg-zinc-800 transition duration-200 flex items-center justify-center\"\n      >\n        <motion.svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"24\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          className=\"text-gray-300 h-4 w-4\"\n        >\n          <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n          <motion.path\n            d=\"M5 12l14 0\"\n            initial={{\n              strokeDasharray: \"50%\",\n              strokeDashoffset: \"50%\",\n            }}\n            animate={{\n              strokeDashoffset: value ? 0 : \"50%\",\n            }}\n            transition={{\n              duration: 0.3,\n              ease: \"linear\",\n            }}\n          />\n          <path d=\"M13 18l6 -6\" />\n          <path d=\"M13 6l6 6\" />\n        </motion.svg>\n      </button>\n \n      <div className=\"absolute inset-0 flex items-center rounded-full pointer-events-none\">\n        <AnimatePresence mode=\"wait\">\n          {!value && (\n            <motion.p\n              initial={{\n                y: 5,\n                opacity: 0,\n              }}\n              key={`current-placeholder-${currentPlaceholder}`}\n              animate={{\n                y: 0,\n                opacity: 1,\n              }}\n              exit={{\n                y: -15,\n                opacity: 0,\n              }}\n              transition={{\n                duration: 0.3,\n                ease: \"linear\",\n              }}\n              className=\"dark:text-zinc-500 text-sm sm:text-base font-normal text-neutral-500 pl-4 sm:pl-12 text-left w-[calc(100%-2rem)] truncate\"\n            >\n              {placeholders[currentPlaceholder]}\n            </motion.p>\n          )}\n        </AnimatePresence>\n      </div>\n    </form>\n  );\n}\nCopy\nExpand\nProps\nProp Name\tType\tDescription\nplaceholders\tstring[]\tAn array of strings used as placeholders that cycle in the input field.\nonChange\t(e: React.ChangeEvent<HTMLInputElement>) => void\tFunction called when the input value changes.\nonSubmit\t(e: React.FormEvent<HTMLFormElement>) => void\tFunction called when the form is submitted.\n\nThis component is inspired by the Open AI's Hero Section and Rauno's Craft of Vanish Input.\n\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Parallax Grid Scroll",
    "url": "https://ui.aceternity.com/components/parallax-scroll",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nParallax Grid Scroll\n\nA grid where two columns scroll in oposite directions, giving a parallax effect.\n\nSection\nParallax\nCard\nGrid\nPreview\nCode\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/parallax-scroll.tsx\n\n\"use client\";\nimport { useScroll, useTransform } from \"framer-motion\";\nimport { useRef } from \"react\";\nimport { motion } from \"framer-motion\";\nimport Image from \"next/image\";\nimport { cn } from \"@/lib/utils\";\n \nexport const ParallaxScroll = ({\n  images,\n  className,\n}: {\n  images: string[];\n  className?: string;\n}) => {\n  const gridRef = useRef<any>(null);\n  const { scrollYProgress } = useScroll({\n    container: gridRef, // remove this if your container is not fixed height\n    offset: [\"start start\", \"end start\"], // remove this if your container is not fixed height\n  });\n \n  const translateFirst = useTransform(scrollYProgress, [0, 1], [0, -200]);\n  const translateSecond = useTransform(scrollYProgress, [0, 1], [0, 200]);\n  const translateThird = useTransform(scrollYProgress, [0, 1], [0, -200]);\n \n  const third = Math.ceil(images.length / 3);\n \n  const firstPart = images.slice(0, third);\n  const secondPart = images.slice(third, 2 * third);\n  const thirdPart = images.slice(2 * third);\n \n  return (\n    <div\n      className={cn(\"h-[40rem] items-start overflow-y-auto w-full\", className)}\n      ref={gridRef}\n    >\n      <div\n        className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 items-start  max-w-5xl mx-auto gap-10 py-40 px-10\"\n        ref={gridRef}\n      >\n        <div className=\"grid gap-10\">\n          {firstPart.map((el, idx) => (\n            <motion.div\n              style={{ y: translateFirst }} // Apply the translateY motion value here\n              key={\"grid-1\" + idx}\n            >\n              <Image\n                src={el}\n                className=\"h-80 w-full object-cover object-left-top rounded-lg gap-10 !m-0 !p-0\"\n                height=\"400\"\n                width=\"400\"\n                alt=\"thumbnail\"\n              />\n            </motion.div>\n          ))}\n        </div>\n        <div className=\"grid gap-10\">\n          {secondPart.map((el, idx) => (\n            <motion.div style={{ y: translateSecond }} key={\"grid-2\" + idx}>\n              <Image\n                src={el}\n                className=\"h-80 w-full object-cover object-left-top rounded-lg gap-10 !m-0 !p-0\"\n                height=\"400\"\n                width=\"400\"\n                alt=\"thumbnail\"\n              />\n            </motion.div>\n          ))}\n        </div>\n        <div className=\"grid gap-10\">\n          {thirdPart.map((el, idx) => (\n            <motion.div style={{ y: translateThird }} key={\"grid-3\" + idx}>\n              <Image\n                src={el}\n                className=\"h-80 w-full object-cover object-left-top rounded-lg gap-10 !m-0 !p-0\"\n                height=\"400\"\n                width=\"400\"\n                alt=\"thumbnail\"\n              />\n            </motion.div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\nCopy\nExpand\nExample\nPreview\nCode\nCopy the source code\n\ncomponents/ui/parallax-scroll-2.tsx\n\n\"use client\";\nimport { useScroll, useTransform } from \"framer-motion\";\nimport { useRef } from \"react\";\nimport { motion } from \"framer-motion\";\nimport Image from \"next/image\";\nimport { cn } from \"@/lib/utils\";\n \nexport const ParallaxScrollSecond = ({\n  images,\n  className,\n}: {\n  images: string[];\n  className?: string;\n}) => {\n  const gridRef = useRef<any>(null);\n  const { scrollYProgress } = useScroll({\n    container: gridRef, // remove this if your container is not fixed height\n    offset: [\"start start\", \"end start\"], // remove this if your container is not fixed height\n  });\n \n  const translateYFirst = useTransform(scrollYProgress, [0, 1], [0, -200]);\n  const translateXFirst = useTransform(scrollYProgress, [0, 1], [0, -200]);\n  const rotateXFirst = useTransform(scrollYProgress, [0, 1], [0, -20]);\n \n  const translateYThird = useTransform(scrollYProgress, [0, 1], [0, -200]);\n  const translateXThird = useTransform(scrollYProgress, [0, 1], [0, 200]);\n  const rotateXThird = useTransform(scrollYProgress, [0, 1], [0, 20]);\n \n  const third = Math.ceil(images.length / 3);\n \n  const firstPart = images.slice(0, third);\n  const secondPart = images.slice(third, 2 * third);\n  const thirdPart = images.slice(2 * third);\n \n  return (\n    <div\n      className={cn(\"h-[40rem] items-start overflow-y-auto w-full\", className)}\n      ref={gridRef}\n    >\n      <div\n        className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 items-start max-w-5xl mx-auto gap-10 py-40 px-10\"\n        ref={gridRef}\n      >\n        <div className=\"grid gap-10\">\n          {firstPart.map((el, idx) => (\n            <motion.div\n              style={{\n                y: translateYFirst,\n                x: translateXFirst,\n                rotateZ: rotateXFirst,\n              }} // Apply the translateY motion value here\n              key={\"grid-1\" + idx}\n            >\n              <Image\n                src={el}\n                className=\"h-80 w-full object-cover object-left-top rounded-lg gap-10 !m-0 !p-0\"\n                height=\"400\"\n                width=\"400\"\n                alt=\"thumbnail\"\n              />\n            </motion.div>\n          ))}\n        </div>\n        <div className=\"grid gap-10\">\n          {secondPart.map((el, idx) => (\n            <motion.div key={\"grid-2\" + idx}>\n              <Image\n                src={el}\n                className=\"h-80 w-full object-cover object-left-top rounded-lg gap-10 !m-0 !p-0\"\n                height=\"400\"\n                width=\"400\"\n                alt=\"thumbnail\"\n              />\n            </motion.div>\n          ))}\n        </div>\n        <div className=\"grid gap-10\">\n          {thirdPart.map((el, idx) => (\n            <motion.div\n              style={{\n                y: translateYThird,\n                x: translateXThird,\n                rotateZ: rotateXThird,\n              }}\n              key={\"grid-3\" + idx}\n            >\n              <Image\n                src={el}\n                className=\"h-80 w-full object-cover object-left-top rounded-lg gap-10 !m-0 !p-0\"\n                height=\"400\"\n                width=\"400\"\n                alt=\"thumbnail\"\n              />\n            </motion.div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\nCopy\nExpand\nProps\nProp name\tType\tDescription\nclassName\tstring\tThe class name of the child component.\nimages\tstring[]\tThe array of image URLs for the parallax scroll\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Navbar Menu",
    "url": "https://ui.aceternity.com/components/navbar-menu",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nNavbar Menu\n\nA navbar menu that animates its children on hover, makes a beautiful bignav\n\nNavbar\nUtility\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/navbar-menu.tsx\n\n\"use client\";\nimport React from \"react\";\nimport { motion } from \"framer-motion\";\nimport Link from \"next/link\";\nimport Image from \"next/image\";\n \nconst transition = {\n  type: \"spring\",\n  mass: 0.5,\n  damping: 11.5,\n  stiffness: 100,\n  restDelta: 0.001,\n  restSpeed: 0.001,\n};\n \nexport const MenuItem = ({\n  setActive,\n  active,\n  item,\n  children,\n}: {\n  setActive: (item: string) => void;\n  active: string | null;\n  item: string;\n  children?: React.ReactNode;\n}) => {\n  return (\n    <div onMouseEnter={() => setActive(item)} className=\"relative \">\n      <motion.p\n        transition={{ duration: 0.3 }}\n        className=\"cursor-pointer text-black hover:opacity-[0.9] dark:text-white\"\n      >\n        {item}\n      </motion.p>\n      {active !== null && (\n        <motion.div\n          initial={{ opacity: 0, scale: 0.85, y: 10 }}\n          animate={{ opacity: 1, scale: 1, y: 0 }}\n          transition={transition}\n        >\n          {active === item && (\n            <div className=\"absolute top-[calc(100%_+_1.2rem)] left-1/2 transform -translate-x-1/2 pt-4\">\n              <motion.div\n                transition={transition}\n                layoutId=\"active\" // layoutId ensures smooth animation\n                className=\"bg-white dark:bg-black backdrop-blur-sm rounded-2xl overflow-hidden border border-black/[0.2] dark:border-white/[0.2] shadow-xl\"\n              >\n                <motion.div\n                  layout // layout ensures smooth animation\n                  className=\"w-max h-full p-4\"\n                >\n                  {children}\n                </motion.div>\n              </motion.div>\n            </div>\n          )}\n        </motion.div>\n      )}\n    </div>\n  );\n};\n \nexport const Menu = ({\n  setActive,\n  children,\n}: {\n  setActive: (item: string | null) => void;\n  children: React.ReactNode;\n}) => {\n  return (\n    <nav\n      onMouseLeave={() => setActive(null)} // resets the state\n      className=\"relative rounded-full border border-transparent dark:bg-black dark:border-white/[0.2] bg-white shadow-input flex justify-center space-x-4 px-8 py-6 \"\n    >\n      {children}\n    </nav>\n  );\n};\n \nexport const ProductItem = ({\n  title,\n  description,\n  href,\n  src,\n}: {\n  title: string;\n  description: string;\n  href: string;\n  src: string;\n}) => {\n  return (\n    <Link href={href} className=\"flex space-x-2\">\n      <Image\n        src={src}\n        width={140}\n        height={70}\n        alt={title}\n        className=\"flex-shrink-0 rounded-md shadow-2xl\"\n      />\n      <div>\n        <h4 className=\"text-xl font-bold mb-1 text-black dark:text-white\">\n          {title}\n        </h4>\n        <p className=\"text-neutral-700 text-sm max-w-[10rem] dark:text-neutral-300\">\n          {description}\n        </p>\n      </div>\n    </Link>\n  );\n};\n \nexport const HoveredLink = ({ children, ...rest }: any) => {\n  return (\n    <Link\n      {...rest}\n      className=\"text-neutral-700 dark:text-neutral-200 hover:text-black \"\n    >\n      {children}\n    </Link>\n  );\n};\nCopy\nExpand\nProps\nProp name\tType\tDescription\nclassName\tstring\tThe class name of the child component.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Multi Step Loader",
    "url": "https://ui.aceternity.com/components/multi-step-loader",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nMulti Step Loader\n\nA step loader for screens that take a lot of time to load.\n\nLoader\nSpecial\nUtility\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge @tabler/icons-react\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nAdd the following code in tailwind.config.js file\nconst defaultTheme = require(\"tailwindcss/defaultTheme\");\nconst colors = require(\"tailwindcss/colors\");\nconst {\n  default: flattenColorPalette,\n} = require(\"tailwindcss/lib/util/flattenColorPalette\");\n \n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./src/**/*.{ts,tsx}\"],\n  darkMode: \"class\",\n  theme: {\n    // rest of the code\n  },\n  plugins: [\n    // rest of the code\n    addVariablesForColors,\n  ],\n};\n \n// This plugin adds each Tailwind color as a global CSS variable, e.g. var(--gray-200).\nfunction addVariablesForColors({ addBase, theme }: any) {\n  let allColors = flattenColorPalette(theme(\"colors\"));\n  let newVars = Object.fromEntries(\n    Object.entries(allColors).map(([key, val]) => [`--${key}`, val])\n  );\n \n  addBase({\n    \":root\": newVars,\n  });\n}\nCopy\nCopy the source code\n\ncomponents/ui/multi-step-loader.tsx\n\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { useState, useEffect } from \"react\";\n \nconst CheckIcon = ({ className }: { className?: string }) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      strokeWidth={1.5}\n      stroke=\"currentColor\"\n      className={cn(\"w-6 h-6 \", className)}\n    >\n      <path d=\"M9 12.75 11.25 15 15 9.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\" />\n    </svg>\n  );\n};\n \nconst CheckFilled = ({ className }: { className?: string }) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      className={cn(\"w-6 h-6 \", className)}\n    >\n      <path\n        fillRule=\"evenodd\"\n        d=\"M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12Zm13.36-1.814a.75.75 0 1 0-1.22-.872l-3.236 4.53L9.53 12.22a.75.75 0 0 0-1.06 1.06l2.25 2.25a.75.75 0 0 0 1.14-.094l3.75-5.25Z\"\n        clipRule=\"evenodd\"\n      />\n    </svg>\n  );\n};\n \ntype LoadingState = {\n  text: string;\n};\n \nconst LoaderCore = ({\n  loadingStates,\n  value = 0,\n}: {\n  loadingStates: LoadingState[];\n  value?: number;\n}) => {\n  return (\n    <div className=\"flex relative justify-start max-w-xl mx-auto flex-col mt-40\">\n      {loadingStates.map((loadingState, index) => {\n        const distance = Math.abs(index - value);\n        const opacity = Math.max(1 - distance * 0.2, 0); // Minimum opacity is 0, keep it 0.2 if you're sane.\n \n        return (\n          <motion.div\n            key={index}\n            className={cn(\"text-left flex gap-2 mb-4\")}\n            initial={{ opacity: 0, y: -(value * 40) }}\n            animate={{ opacity: opacity, y: -(value * 40) }}\n            transition={{ duration: 0.5 }}\n          >\n            <div>\n              {index > value && (\n                <CheckIcon className=\"text-black dark:text-white\" />\n              )}\n              {index <= value && (\n                <CheckFilled\n                  className={cn(\n                    \"text-black dark:text-white\",\n                    value === index &&\n                      \"text-black dark:text-lime-500 opacity-100\"\n                  )}\n                />\n              )}\n            </div>\n            <span\n              className={cn(\n                \"text-black dark:text-white\",\n                value === index && \"text-black dark:text-lime-500 opacity-100\"\n              )}\n            >\n              {loadingState.text}\n            </span>\n          </motion.div>\n        );\n      })}\n    </div>\n  );\n};\n \nexport const MultiStepLoader = ({\n  loadingStates,\n  loading,\n  duration = 2000,\n  loop = true,\n}: {\n  loadingStates: LoadingState[];\n  loading?: boolean;\n  duration?: number;\n  loop?: boolean;\n}) => {\n  const [currentState, setCurrentState] = useState(0);\n \n  useEffect(() => {\n    if (!loading) {\n      setCurrentState(0);\n      return;\n    }\n    const timeout = setTimeout(() => {\n      setCurrentState((prevState) =>\n        loop\n          ? prevState === loadingStates.length - 1\n            ? 0\n            : prevState + 1\n          : Math.min(prevState + 1, loadingStates.length - 1)\n      );\n    }, duration);\n \n    return () => clearTimeout(timeout);\n  }, [currentState, loading, loop, loadingStates.length, duration]);\n  return (\n    <AnimatePresence mode=\"wait\">\n      {loading && (\n        <motion.div\n          initial={{\n            opacity: 0,\n          }}\n          animate={{\n            opacity: 1,\n          }}\n          exit={{\n            opacity: 0,\n          }}\n          className=\"w-full h-full fixed inset-0 z-[100] flex items-center justify-center backdrop-blur-2xl\"\n        >\n          <div className=\"h-96  relative\">\n            <LoaderCore value={currentState} loadingStates={loadingStates} />\n          </div>\n \n          <div className=\"bg-gradient-to-t inset-x-0 z-20 bottom-0 bg-white dark:bg-black h-full absolute [mask-image:radial-gradient(900px_at_center,transparent_30%,white)]\" />\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n};\nCopy\nExpand\nProps\nProp Name\tType\tDefault Value\tDescription\nloadingStates\tLoadingState[]\tN/A\tAn array of objects, each with a text property to display the current loading state message.\nloading\tboolean\tundefined\tA boolean to control whether the loader is active or not.\nduration\tnumber\t2000\tThe duration (in milliseconds) before transitioning to the next loading state.\nloop\tboolean\ttrue\tA boolean to control whether the loading states should loop back to the start.\nvalue\tnumber (optional)\t0\t(Only in LoaderCore) The current index of the loading state to be displayed.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Moving Border",
    "url": "https://ui.aceternity.com/components/moving-border",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nMoving Border\n\nA border that moves around the container. Perfect for making your buttons stand out.\n\nButton\nSpecial\nCard\nUtility\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nAdd the following code in tailwind.config.js file\nconst defaultTheme = require(\"tailwindcss/defaultTheme\");\nconst colors = require(\"tailwindcss/colors\");\nconst {\n  default: flattenColorPalette,\n} = require(\"tailwindcss/lib/util/flattenColorPalette\");\n \n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./src/**/*.{ts,tsx}\"],\n  darkMode: \"class\",\n  theme: {\n    // rest of the code\n  },\n  plugins: [\n    // rest of the code\n    addVariablesForColors,\n  ],\n};\n \n// This plugin adds each Tailwind color as a global CSS variable, e.g. var(--gray-200).\nfunction addVariablesForColors({ addBase, theme }: any) {\n  let allColors = flattenColorPalette(theme(\"colors\"));\n  let newVars = Object.fromEntries(\n    Object.entries(allColors).map(([key, val]) => [`--${key}`, val])\n  );\n \n  addBase({\n    \":root\": newVars,\n  });\n}\nCopy\nCopy the source code\n\ncomponents/ui/moving-border.tsx\n\n\"use client\";\nimport React from \"react\";\nimport {\n  motion,\n  useAnimationFrame,\n  useMotionTemplate,\n  useMotionValue,\n  useTransform,\n} from \"framer-motion\";\nimport { useRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\n \nexport function Button({\n  borderRadius = \"1.75rem\",\n  children,\n  as: Component = \"button\",\n  containerClassName,\n  borderClassName,\n  duration,\n  className,\n  ...otherProps\n}: {\n  borderRadius?: string;\n  children: React.ReactNode;\n  as?: any;\n  containerClassName?: string;\n  borderClassName?: string;\n  duration?: number;\n  className?: string;\n  [key: string]: any;\n}) {\n  return (\n    <Component\n      className={cn(\n        \"bg-transparent relative text-xl  h-16 w-40 p-[1px] overflow-hidden \",\n        containerClassName\n      )}\n      style={{\n        borderRadius: borderRadius,\n      }}\n      {...otherProps}\n    >\n      <div\n        className=\"absolute inset-0\"\n        style={{ borderRadius: `calc(${borderRadius} * 0.96)` }}\n      >\n        <MovingBorder duration={duration} rx=\"30%\" ry=\"30%\">\n          <div\n            className={cn(\n              \"h-20 w-20 opacity-[0.8] bg-[radial-gradient(var(--sky-500)_40%,transparent_60%)]\",\n              borderClassName\n            )}\n          />\n        </MovingBorder>\n      </div>\n \n      <div\n        className={cn(\n          \"relative bg-slate-900/[0.8] border border-slate-800 backdrop-blur-xl text-white flex items-center justify-center w-full h-full text-sm antialiased\",\n          className\n        )}\n        style={{\n          borderRadius: `calc(${borderRadius} * 0.96)`,\n        }}\n      >\n        {children}\n      </div>\n    </Component>\n  );\n}\n \nexport const MovingBorder = ({\n  children,\n  duration = 2000,\n  rx,\n  ry,\n  ...otherProps\n}: {\n  children: React.ReactNode;\n  duration?: number;\n  rx?: string;\n  ry?: string;\n  [key: string]: any;\n}) => {\n  const pathRef = useRef<any>();\n  const progress = useMotionValue<number>(0);\n \n  useAnimationFrame((time) => {\n    const length = pathRef.current?.getTotalLength();\n    if (length) {\n      const pxPerMillisecond = length / duration;\n      progress.set((time * pxPerMillisecond) % length);\n    }\n  });\n \n  const x = useTransform(\n    progress,\n    (val) => pathRef.current?.getPointAtLength(val).x\n  );\n  const y = useTransform(\n    progress,\n    (val) => pathRef.current?.getPointAtLength(val).y\n  );\n \n  const transform = useMotionTemplate`translateX(${x}px) translateY(${y}px) translateX(-50%) translateY(-50%)`;\n \n  return (\n    <>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        preserveAspectRatio=\"none\"\n        className=\"absolute h-full w-full\"\n        width=\"100%\"\n        height=\"100%\"\n        {...otherProps}\n      >\n        <rect\n          fill=\"none\"\n          width=\"100%\"\n          height=\"100%\"\n          rx={rx}\n          ry={ry}\n          ref={pathRef}\n        />\n      </svg>\n      <motion.div\n        style={{\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          display: \"inline-block\",\n          transform,\n        }}\n      >\n        {children}\n      </motion.div>\n    </>\n  );\n};\nCopy\nExpand\nProps\nProp\tType\tDescription\nborderRadius\tstring\tOptional. Defines the border radius of the button. Default value is \"1.75rem\".\nchildren\tReact.ReactNode\tRequired. The content to be displayed inside the button.\nas\tany\tOptional. Defines the HTML element or React component that will be used for the button. Default is \"button\".\ncontainerClassName\tstring\tOptional. Additional CSS classes to be applied to the button container.\nborderClassName\tstring\tOptional. Additional CSS classes to be applied to the button border.\nduration\tnumber\tOptional. Duration for the moving border animation in milliseconds. Default is 2000.\nclassName\tstring\tOptional. Additional CSS classes to be applied to the button.\n[key: string]\tany\tOptional. Any other props that should be passed to the button.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Macbook Scroll",
    "url": "https://ui.aceternity.com/components/macbook-scroll",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nMacbook Scroll\n\nScroll through the page and see the image come out of the screen.\n\nHero\nFooter\nSection\nSpecial\nParallax\nPreview\nCode\nThis Macbook is built with Tailwindcss.\nNo kidding.\nesc\nF1\nF2\nF3\nF4\nF5\nF6\nF7\nF8\nF8\nF10\nF11\nF12\n~\n`\n!\n1\n@\n2\n#\n3\n$\n4\n%\n5\n^\n6\n&\n7\n*\n8\n(\n9\n)\n0\n—\n_\n+\n=\ndelete\ntab\nQ\nW\nE\nR\nT\nY\nU\nI\nO\nP\n{\n[\n}\n]\n|\n\\\ncaps lock\nA\nS\nD\nF\nG\nH\nJ\nK\nL\n:\n;\n\"\n'\nreturn\nshift\nZ\nX\nC\nV\nB\nN\nM\n<\n,\n>\n.\n?\n/\nshift\nfn\ncontrol\noption\ncommand\ncommand\noption\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge @tabler/icons-react\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nAdd the following code in tailwind.config.js file\nconst defaultTheme = require(\"tailwindcss/defaultTheme\");\nconst colors = require(\"tailwindcss/colors\");\nconst {\n  default: flattenColorPalette,\n} = require(\"tailwindcss/lib/util/flattenColorPalette\");\n \n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./src/**/*.{ts,tsx}\"],\n  darkMode: \"class\",\n  theme: {\n    // rest of the code\n  },\n  plugins: [\n    // rest of the code\n    addVariablesForColors,\n  ],\n};\n \n// This plugin adds each Tailwind color as a global CSS variable, e.g. var(--gray-200).\nfunction addVariablesForColors({ addBase, theme }: any) {\n  let allColors = flattenColorPalette(theme(\"colors\"));\n  let newVars = Object.fromEntries(\n    Object.entries(allColors).map(([key, val]) => [`--${key}`, val])\n  );\n \n  addBase({\n    \":root\": newVars,\n  });\n}\nCopy\nCopy the source code\n\ncomponents/ui/macbook-scroll.tsx\n\n\"use client\";\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport { MotionValue, motion, useScroll, useTransform } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  IconBrightnessDown,\n  IconBrightnessUp,\n  IconCaretRightFilled,\n  IconCaretUpFilled,\n  IconChevronUp,\n  IconMicrophone,\n  IconMoon,\n  IconPlayerSkipForward,\n  IconPlayerTrackNext,\n  IconPlayerTrackPrev,\n  IconTable,\n  IconVolume,\n  IconVolume2,\n  IconVolume3,\n} from \"@tabler/icons-react\";\nimport { IconSearch } from \"@tabler/icons-react\";\nimport { IconWorld } from \"@tabler/icons-react\";\nimport { IconCommand } from \"@tabler/icons-react\";\nimport { IconCaretLeftFilled } from \"@tabler/icons-react\";\nimport { IconCaretDownFilled } from \"@tabler/icons-react\";\nimport Image from \"next/image\";\n \nexport const MacbookScroll = ({\n  src,\n  showGradient,\n  title,\n  badge,\n}: {\n  src?: string;\n  showGradient?: boolean;\n  title?: string | React.ReactNode;\n  badge?: React.ReactNode;\n}) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const { scrollYProgress } = useScroll({\n    target: ref,\n    offset: [\"start start\", \"end start\"],\n  });\n \n  const [isMobile, setIsMobile] = useState(false);\n \n  useEffect(() => {\n    if (window && window.innerWidth < 768) {\n      setIsMobile(true);\n    }\n  }, []);\n \n  const scaleX = useTransform(\n    scrollYProgress,\n    [0, 0.3],\n    [1.2, isMobile ? 1 : 1.5]\n  );\n  const scaleY = useTransform(\n    scrollYProgress,\n    [0, 0.3],\n    [0.6, isMobile ? 1 : 1.5]\n  );\n  const translate = useTransform(scrollYProgress, [0, 1], [0, 1500]);\n  const rotate = useTransform(scrollYProgress, [0.1, 0.12, 0.3], [-28, -28, 0]);\n  const textTransform = useTransform(scrollYProgress, [0, 0.3], [0, 100]);\n  const textOpacity = useTransform(scrollYProgress, [0, 0.2], [1, 0]);\n \n  return (\n    <div\n      ref={ref}\n      className=\"min-h-[200vh]  flex flex-col items-center py-0 md:py-80 justify-start flex-shrink-0 [perspective:800px] transform md:scale-100  scale-[0.35] sm:scale-50\"\n    >\n      <motion.h2\n        style={{\n          translateY: textTransform,\n          opacity: textOpacity,\n        }}\n        className=\"dark:text-white text-neutral-800 text-3xl font-bold mb-20 text-center\"\n      >\n        {title || (\n          <span>\n            This Macbook is built with Tailwindcss. <br /> No kidding.\n          </span>\n        )}\n      </motion.h2>\n      {/* Lid */}\n      <Lid\n        src={src}\n        scaleX={scaleX}\n        scaleY={scaleY}\n        rotate={rotate}\n        translate={translate}\n      />\n      {/* Base area */}\n      <div className=\"h-[22rem] w-[32rem] bg-gray-200 dark:bg-[#272729] rounded-2xl overflow-hidden relative -z-10\">\n        {/* above keyboard bar */}\n        <div className=\"h-10 w-full relative\">\n          <div className=\"absolute inset-x-0 mx-auto w-[80%] h-4 bg-[#050505]\" />\n        </div>\n        <div className=\"flex relative\">\n          <div className=\"mx-auto w-[10%] overflow-hidden  h-full\">\n            <SpeakerGrid />\n          </div>\n          <div className=\"mx-auto w-[80%] h-full\">\n            <Keypad />\n          </div>\n          <div className=\"mx-auto w-[10%] overflow-hidden  h-full\">\n            <SpeakerGrid />\n          </div>\n        </div>\n        <Trackpad />\n        <div className=\"h-2 w-20 mx-auto inset-x-0 absolute bottom-0 bg-gradient-to-t from-[#272729] to-[#050505] rounded-tr-3xl rounded-tl-3xl\" />\n        {showGradient && (\n          <div className=\"h-40 w-full absolute bottom-0 inset-x-0 bg-gradient-to-t dark:from-black from-white via-white dark:via-black to-transparent z-50\"></div>\n        )}\n        {badge && <div className=\"absolute bottom-4 left-4\">{badge}</div>}\n      </div>\n    </div>\n  );\n};\n \nexport const Lid = ({\n  scaleX,\n  scaleY,\n  rotate,\n  translate,\n  src,\n}: {\n  scaleX: MotionValue<number>;\n  scaleY: MotionValue<number>;\n  rotate: MotionValue<number>;\n  translate: MotionValue<number>;\n  src?: string;\n}) => {\n  return (\n    <div className=\"relative [perspective:800px]\">\n      <div\n        style={{\n          transform: \"perspective(800px) rotateX(-25deg) translateZ(0px)\",\n          transformOrigin: \"bottom\",\n          transformStyle: \"preserve-3d\",\n        }}\n        className=\"h-[12rem] w-[32rem] bg-[#010101] rounded-2xl p-2 relative\"\n      >\n        <div\n          style={{\n            boxShadow: \"0px 2px 0px 2px var(--neutral-900) inset\",\n          }}\n          className=\"absolute inset-0 bg-[#010101] rounded-lg flex items-center justify-center\"\n        >\n          <span className=\"text-white\">\n            <AceternityLogo />\n          </span>\n        </div>\n      </div>\n      <motion.div\n        style={{\n          scaleX: scaleX,\n          scaleY: scaleY,\n          rotateX: rotate,\n          translateY: translate,\n          transformStyle: \"preserve-3d\",\n          transformOrigin: \"top\",\n        }}\n        className=\"h-96 w-[32rem] absolute inset-0 bg-[#010101] rounded-2xl p-2\"\n      >\n        <div className=\"absolute inset-0 bg-[#272729] rounded-lg\" />\n        <Image\n          src={src as string}\n          alt=\"aceternity logo\"\n          fill\n          className=\"object-cover object-left-top absolute rounded-lg inset-0 h-full w-full\"\n        />\n      </motion.div>\n    </div>\n  );\n};\n \nexport const Trackpad = () => {\n  return (\n    <div\n      className=\"w-[40%] mx-auto h-32  rounded-xl my-1\"\n      style={{\n        boxShadow: \"0px 0px 1px 1px #00000020 inset\",\n      }}\n    ></div>\n  );\n};\n \nexport const Keypad = () => {\n  return (\n    <div className=\"h-full rounded-md bg-[#050505] mx-1 p-1\">\n      {/* First Row */}\n      <Row>\n        <KBtn\n          className=\"w-10 items-end justify-start pl-[4px] pb-[2px]\"\n          childrenClassName=\"items-start\"\n        >\n          esc\n        </KBtn>\n        <KBtn>\n          <IconBrightnessDown className=\"h-[6px] w-[6px]\" />\n          <span className=\"inline-block mt-1\">F1</span>\n        </KBtn>\n \n        <KBtn>\n          <IconBrightnessUp className=\"h-[6px] w-[6px]\" />\n          <span className=\"inline-block mt-1\">F2</span>\n        </KBtn>\n        <KBtn>\n          <IconTable className=\"h-[6px] w-[6px]\" />\n          <span className=\"inline-block mt-1\">F3</span>\n        </KBtn>\n        <KBtn>\n          <IconSearch className=\"h-[6px] w-[6px]\" />\n          <span className=\"inline-block mt-1\">F4</span>\n        </KBtn>\n        <KBtn>\n          <IconMicrophone className=\"h-[6px] w-[6px]\" />\n          <span className=\"inline-block mt-1\">F5</span>\n        </KBtn>\n        <KBtn>\n          <IconMoon className=\"h-[6px] w-[6px]\" />\n          <span className=\"inline-block mt-1\">F6</span>\n        </KBtn>\n        <KBtn>\n          <IconPlayerTrackPrev className=\"h-[6px] w-[6px]\" />\n          <span className=\"inline-block mt-1\">F7</span>\n        </KBtn>\n        <KBtn>\n          <IconPlayerSkipForward className=\"h-[6px] w-[6px]\" />\n          <span className=\"inline-block mt-1\">F8</span>\n        </KBtn>\n        <KBtn>\n          <IconPlayerTrackNext className=\"h-[6px] w-[6px]\" />\n          <span className=\"inline-block mt-1\">F8</span>\n        </KBtn>\n        <KBtn>\n          <IconVolume3 className=\"h-[6px] w-[6px]\" />\n          <span className=\"inline-block mt-1\">F10</span>\n        </KBtn>\n        <KBtn>\n          <IconVolume2 className=\"h-[6px] w-[6px]\" />\n          <span className=\"inline-block mt-1\">F11</span>\n        </KBtn>\n        <KBtn>\n          <IconVolume className=\"h-[6px] w-[6px]\" />\n          <span className=\"inline-block mt-1\">F12</span>\n        </KBtn>\n        <KBtn>\n          <div className=\"h-4 w-4 rounded-full  bg-gradient-to-b from-20% from-neutral-900 via-black via-50% to-neutral-900 to-95% p-px\">\n            <div className=\"bg-black h-full w-full rounded-full\" />\n          </div>\n        </KBtn>\n      </Row>\n \n      {/* Second row */}\n      <Row>\n        <KBtn>\n          <span className=\"block\">~</span>\n          <span className=\"block mt-1\">`</span>\n        </KBtn>\n \n        <KBtn>\n          <span className=\"block \">!</span>\n          <span className=\"block\">1</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">@</span>\n          <span className=\"block\">2</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">#</span>\n          <span className=\"block\">3</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">$</span>\n          <span className=\"block\">4</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">%</span>\n          <span className=\"block\">5</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">^</span>\n          <span className=\"block\">6</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">&</span>\n          <span className=\"block\">7</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">*</span>\n          <span className=\"block\">8</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">(</span>\n          <span className=\"block\">9</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">)</span>\n          <span className=\"block\">0</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">&mdash;</span>\n          <span className=\"block\">_</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">+</span>\n          <span className=\"block\"> = </span>\n        </KBtn>\n        <KBtn\n          className=\"w-10 items-end justify-end pr-[4px] pb-[2px]\"\n          childrenClassName=\"items-end\"\n        >\n          delete\n        </KBtn>\n      </Row>\n \n      {/* Third row */}\n      <Row>\n        <KBtn\n          className=\"w-10 items-end justify-start pl-[4px] pb-[2px]\"\n          childrenClassName=\"items-start\"\n        >\n          tab\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">Q</span>\n        </KBtn>\n \n        <KBtn>\n          <span className=\"block\">W</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">E</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">R</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">T</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">Y</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">U</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">I</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">O</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">P</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">{`{`}</span>\n          <span className=\"block\">{`[`}</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">{`}`}</span>\n          <span className=\"block\">{`]`}</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">{`|`}</span>\n          <span className=\"block\">{`\\\\`}</span>\n        </KBtn>\n      </Row>\n \n      {/* Fourth Row */}\n      <Row>\n        <KBtn\n          className=\"w-[2.8rem] items-end justify-start pl-[4px] pb-[2px]\"\n          childrenClassName=\"items-start\"\n        >\n          caps lock\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">A</span>\n        </KBtn>\n \n        <KBtn>\n          <span className=\"block\">S</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">D</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">F</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">G</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">H</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">J</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">K</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">L</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">{`:`}</span>\n          <span className=\"block\">{`;`}</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">{`\"`}</span>\n          <span className=\"block\">{`'`}</span>\n        </KBtn>\n        <KBtn\n          className=\"w-[2.85rem] items-end justify-end pr-[4px] pb-[2px]\"\n          childrenClassName=\"items-end\"\n        >\n          return\n        </KBtn>\n      </Row>\n \n      {/* Fifth Row */}\n      <Row>\n        <KBtn\n          className=\"w-[3.65rem] items-end justify-start pl-[4px] pb-[2px]\"\n          childrenClassName=\"items-start\"\n        >\n          shift\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">Z</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">X</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">C</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">V</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">B</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">N</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">M</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">{`<`}</span>\n          <span className=\"block\">{`,`}</span>\n        </KBtn>\n        <KBtn>\n          <span className=\"block\">{`>`}</span>\n          <span className=\"block\">{`.`}</span>\n        </KBtn>{\" \"}\n        <KBtn>\n          <span className=\"block\">{`?`}</span>\n          <span className=\"block\">{`/`}</span>\n        </KBtn>\n        <KBtn\n          className=\"w-[3.65rem] items-end justify-end pr-[4px] pb-[2px]\"\n          childrenClassName=\"items-end\"\n        >\n          shift\n        </KBtn>\n      </Row>\n \n      {/* sixth Row */}\n      <Row>\n        <KBtn className=\"\" childrenClassName=\"h-full justify-between py-[4px]\">\n          <div className=\"flex justify-end w-full pr-1\">\n            <span className=\"block\">fn</span>\n          </div>\n          <div className=\"flex justify-start w-full pl-1\">\n            <IconWorld className=\"h-[6px] w-[6px]\" />\n          </div>\n        </KBtn>\n        <KBtn className=\"\" childrenClassName=\"h-full justify-between py-[4px]\">\n          <div className=\"flex justify-end w-full pr-1\">\n            <IconChevronUp className=\"h-[6px] w-[6px]\" />\n          </div>\n          <div className=\"flex justify-start w-full pl-1\">\n            <span className=\"block\">control</span>\n          </div>\n        </KBtn>\n        <KBtn className=\"\" childrenClassName=\"h-full justify-between py-[4px]\">\n          <div className=\"flex justify-end w-full pr-1\">\n            <OptionKey className=\"h-[6px] w-[6px]\" />\n          </div>\n          <div className=\"flex justify-start w-full pl-1\">\n            <span className=\"block\">option</span>\n          </div>\n        </KBtn>\n        <KBtn\n          className=\"w-8\"\n          childrenClassName=\"h-full justify-between py-[4px]\"\n        >\n          <div className=\"flex justify-end w-full pr-1\">\n            <IconCommand className=\"h-[6px] w-[6px]\" />\n          </div>\n          <div className=\"flex justify-start w-full pl-1\">\n            <span className=\"block\">command</span>\n          </div>\n        </KBtn>\n        <KBtn className=\"w-[8.2rem]\"></KBtn>\n        <KBtn\n          className=\"w-8\"\n          childrenClassName=\"h-full justify-between py-[4px]\"\n        >\n          <div className=\"flex justify-start w-full pl-1\">\n            <IconCommand className=\"h-[6px] w-[6px]\" />\n          </div>\n          <div className=\"flex justify-start w-full pl-1\">\n            <span className=\"block\">command</span>\n          </div>\n        </KBtn>\n        <KBtn className=\"\" childrenClassName=\"h-full justify-between py-[4px]\">\n          <div className=\"flex justify-start w-full pl-1\">\n            <OptionKey className=\"h-[6px] w-[6px]\" />\n          </div>\n          <div className=\"flex justify-start w-full pl-1\">\n            <span className=\"block\">option</span>\n          </div>\n        </KBtn>\n        <div className=\"w-[4.9rem] mt-[2px] h-6 p-[0.5px] rounded-[4px] flex flex-col justify-end items-center\">\n          <KBtn className=\"w-6 h-3\">\n            <IconCaretUpFilled className=\"h-[6px] w-[6px]\" />\n          </KBtn>\n          <div className=\"flex\">\n            <KBtn className=\"w-6 h-3\">\n              <IconCaretLeftFilled className=\"h-[6px] w-[6px]\" />\n            </KBtn>\n            <KBtn className=\"w-6 h-3\">\n              <IconCaretDownFilled className=\"h-[6px] w-[6px]\" />\n            </KBtn>\n            <KBtn className=\"w-6 h-3\">\n              <IconCaretRightFilled className=\"h-[6px] w-[6px]\" />\n            </KBtn>\n          </div>\n        </div>\n      </Row>\n    </div>\n  );\n};\nexport const KBtn = ({\n  className,\n  children,\n  childrenClassName,\n  backlit = true,\n}: {\n  className?: string;\n  children?: React.ReactNode;\n  childrenClassName?: string;\n  backlit?: boolean;\n}) => {\n  return (\n    <div\n      className={cn(\n        \"p-[0.5px] rounded-[4px]\",\n        backlit && \"bg-white/[0.2] shadow-xl shadow-white\"\n      )}\n    >\n      <div\n        className={cn(\n          \"h-6 w-6 bg-[#0A090D] rounded-[3.5px] flex items-center justify-center\",\n          className\n        )}\n        style={{\n          boxShadow:\n            \"0px -0.5px 2px 0 #0D0D0F inset, -0.5px 0px 2px 0 #0D0D0F inset\",\n        }}\n      >\n        <div\n          className={cn(\n            \"text-neutral-200 text-[5px] w-full flex justify-center items-center flex-col\",\n            childrenClassName,\n            backlit && \"text-white\"\n          )}\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\n \nexport const Row = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <div className=\"flex gap-[2px] mb-[2px] w-full flex-shrink-0\">\n      {children}\n    </div>\n  );\n};\n \nexport const SpeakerGrid = () => {\n  return (\n    <div\n      className=\"flex px-[0.5px] gap-[2px] mt-2 h-40\"\n      style={{\n        backgroundImage:\n          \"radial-gradient(circle, #08080A 0.5px, transparent 0.5px)\",\n        backgroundSize: \"3px 3px\",\n      }}\n    ></div>\n  );\n};\n \nexport const OptionKey = ({ className }: { className: string }) => {\n  return (\n    <svg\n      fill=\"none\"\n      version=\"1.1\"\n      id=\"icon\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 32 32\"\n      className={className}\n    >\n      <rect\n        stroke=\"currentColor\"\n        strokeWidth={2}\n        x=\"18\"\n        y=\"5\"\n        width=\"10\"\n        height=\"2\"\n      />\n      <polygon\n        stroke=\"currentColor\"\n        strokeWidth={2}\n        points=\"10.6,5 4,5 4,7 9.4,7 18.4,27 28,27 28,25 19.6,25 \"\n      />\n      <rect\n        id=\"_Transparent_Rectangle_\"\n        className=\"st0\"\n        width=\"32\"\n        height=\"32\"\n        stroke=\"none\"\n      />\n    </svg>\n  );\n};\n \nconst AceternityLogo = () => {\n  return (\n    <svg\n      width=\"66\"\n      height=\"65\"\n      viewBox=\"0 0 66 65\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"h-3 w-3 text-white\"\n    >\n      <path\n        d=\"M8 8.05571C8 8.05571 54.9009 18.1782 57.8687 30.062C60.8365 41.9458 9.05432 57.4696 9.05432 57.4696\"\n        stroke=\"currentColor\"\n        strokeWidth=\"15\"\n        strokeMiterlimit=\"3.86874\"\n        strokeLinecap=\"round\"\n      />\n    </svg>\n  );\n};\nCopy\nExpand\nProps\nProp\tType\tDescription\tDefault Value\nsrc\tstring\tSource URL for the MacBook screen image.\tundefined\nshowGradient\tboolean\tFlag to show/hide the gradient overlay.\tundefined\ntitle\tstring | ReactNode\tTitle text or React node displayed above the MacBook.\tundefined\nbadge\tReactNode\tSticker displayed at the bottom left of the Macbook\tundefined\n\nThe design is inspired from Fey's landing page hero section.\n\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Layout Grid",
    "url": "https://ui.aceternity.com/components/layout-grid",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nLayout Grid\n\nA layout effect that animates the grid item on click, powered by framer motion layout\n\nSection\nFeatures\nSpecial\nProduct\nPreview\nCode\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/layout-grid.tsx\n\n\"use client\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport Image from \"next/image\";\n \ntype Card = {\n  id: number;\n  content: JSX.Element | React.ReactNode | string;\n  className: string;\n  thumbnail: string;\n};\n \nexport const LayoutGrid = ({ cards }: { cards: Card[] }) => {\n  const [selected, setSelected] = useState<Card | null>(null);\n  const [lastSelected, setLastSelected] = useState<Card | null>(null);\n \n  const handleClick = (card: Card) => {\n    setLastSelected(selected);\n    setSelected(card);\n  };\n \n  const handleOutsideClick = () => {\n    setLastSelected(selected);\n    setSelected(null);\n  };\n \n  return (\n    <div className=\"w-full h-full p-10 grid grid-cols-1 md:grid-cols-3  max-w-7xl mx-auto gap-4 relative\">\n      {cards.map((card, i) => (\n        <div key={i} className={cn(card.className, \"\")}>\n          <motion.div\n            onClick={() => handleClick(card)}\n            className={cn(\n              card.className,\n              \"relative overflow-hidden\",\n              selected?.id === card.id\n                ? \"rounded-lg cursor-pointer absolute inset-0 h-1/2 w-full md:w-1/2 m-auto z-50 flex justify-center items-center flex-wrap flex-col\"\n                : lastSelected?.id === card.id\n                ? \"z-40 bg-white rounded-xl h-full w-full\"\n                : \"bg-white rounded-xl h-full w-full\"\n            )}\n            layoutId={`card-${card.id}`}\n          >\n            {selected?.id === card.id && <SelectedCard selected={selected} />}\n            <ImageComponent card={card} />\n          </motion.div>\n        </div>\n      ))}\n      <motion.div\n        onClick={handleOutsideClick}\n        className={cn(\n          \"absolute h-full w-full left-0 top-0 bg-black opacity-0 z-10\",\n          selected?.id ? \"pointer-events-auto\" : \"pointer-events-none\"\n        )}\n        animate={{ opacity: selected?.id ? 0.3 : 0 }}\n      />\n    </div>\n  );\n};\n \nconst ImageComponent = ({ card }: { card: Card }) => {\n  return (\n    <motion.img\n      layoutId={`image-${card.id}-image`}\n      src={card.thumbnail}\n      height=\"500\"\n      width=\"500\"\n      className={cn(\n        \"object-cover object-top absolute inset-0 h-full w-full transition duration-200\"\n      )}\n      alt=\"thumbnail\"\n    />\n  );\n};\n \nconst SelectedCard = ({ selected }: { selected: Card | null }) => {\n  return (\n    <div className=\"bg-transparent h-full w-full flex flex-col justify-end rounded-lg shadow-2xl relative z-[60]\">\n      <motion.div\n        initial={{\n          opacity: 0,\n        }}\n        animate={{\n          opacity: 0.6,\n        }}\n        className=\"absolute inset-0 h-full w-full bg-black opacity-60 z-10\"\n      />\n      <motion.div\n        layoutId={`content-${selected?.id}`}\n        initial={{\n          opacity: 0,\n          y: 100,\n        }}\n        animate={{\n          opacity: 1,\n          y: 0,\n        }}\n        exit={{\n          opacity: 0,\n          y: 100,\n        }}\n        transition={{\n          duration: 0.3,\n          ease: \"easeInOut\",\n        }}\n        className=\"relative px-8 pb-4 z-[70]\"\n      >\n        {selected?.content}\n      </motion.div>\n    </div>\n  );\n};\nCopy\nExpand\nProps\nProp\tType\tDescription\ncards\tCard[]\tAn array of Card objects. Each Card object should have the following properties: id (a unique identifier), content (the JSX.Element to be displayed), className (the CSS class name for the card), and thumbnail (the URL of the thumbnail image).\n\nThe Card type is defined as follows:\n\nProperty\tType\tDescription\nid\tnumber\tA unique identifier for the card.\ncontent\tJSX.Element | React.ReactNode | string\tThe content to be displayed in the card.\nclassName\tstring\tThe CSS class name for the card.\nthumbnail\tstring\tThe URL of the thumbnail image for the card.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Meteor Effect",
    "url": "https://ui.aceternity.com/components/meteors",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nMeteor Effect\n\nA group of beams in the background of a container, sort of like meteors.\n\nCard\nTestimonial\nSpecial\nPreview\nCode\nMeteors because they're cool\n\nI don't know what to write so I'll just paste something cool here. One more sentence because lorem ipsum is just unacceptable. Won't ChatGPT the shit out of this.\n\nExplore\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nAdd this into your tailwind.config.ts file\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./src/**/*.{ts,tsx}\"],\n  darkMode: \"class\",\n  theme: {\n    // your existing config\n    extend: {\n      animation: {\n        \"meteor-effect\": \"meteor 5s linear infinite\",\n      },\n      keyframes: {\n        meteor: {\n          \"0%\": { transform: \"rotate(215deg) translateX(0)\", opacity: \"1\" },\n          \"70%\": { opacity: \"1\" },\n          \"100%\": {\n            transform: \"rotate(215deg) translateX(-500px)\",\n            opacity: \"0\",\n          },\n        },\n      },\n    },\n  },\n  plugins: [],\n};\n \nCopy\nCopy the source code\n\ncomponents/ui/meteors.tsx\n\nimport { cn } from \"@/lib/utils\";\nimport React from \"react\";\n \nexport const Meteors = ({\n  number,\n  className,\n}: {\n  number?: number;\n  className?: string;\n}) => {\n  const meteors = new Array(number || 20).fill(true);\n  return (\n    <>\n      {meteors.map((el, idx) => (\n        <span\n          key={\"meteor\" + idx}\n          className={cn(\n            \"animate-meteor-effect absolute top-1/2 left-1/2 h-0.5 w-0.5 rounded-[9999px] bg-slate-500 shadow-[0_0_0_1px_#ffffff10] rotate-[215deg]\",\n            \"before:content-[''] before:absolute before:top-1/2 before:transform before:-translate-y-[50%] before:w-[50px] before:h-[1px] before:bg-gradient-to-r before:from-[#64748b] before:to-transparent\",\n            className\n          )}\n          style={{\n            top: 0,\n            left: Math.floor(Math.random() * (400 - -400) + -400) + \"px\",\n            animationDelay: Math.random() * (0.8 - 0.2) + 0.2 + \"s\",\n            animationDuration: Math.floor(Math.random() * (10 - 2) + 2) + \"s\",\n          }}\n        ></span>\n      ))}\n    </>\n  );\n};\nCopy\nExpand\nProps\nProp name\tType\tDescription\nclassName\tstring\tThe class name of the child component.\nnumber\tnumber\tThe number of meteors you want in the card\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Link Preview",
    "url": "https://ui.aceternity.com/components/link-preview",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nLink Preview\n\nDynamic link previews for your anchor tags\n\nText\nSpecial\nUtilities\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall util dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nInstall component dependencies\nnpm i @radix-ui/react-hover-card qss\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nAdd microlink in next.config file\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  images: {\n    domains: [\n      \"api.microlink.io\", // Microlink Image Preview\n    ],\n  },\n};\n \nmodule.exports = nextConfig;\nCopy\nCopy the source code\n\ncomponents/ui/link-preview.tsx\n\n\"use client\";\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\";\nimport Image from \"next/image\";\nimport { encode } from \"qss\";\nimport React from \"react\";\nimport {\n  AnimatePresence,\n  motion,\n  useMotionValue,\n  useSpring,\n} from \"framer-motion\";\nimport Link from \"next/link\";\nimport { cn } from \"@/lib/utils\";\n \ntype LinkPreviewProps = {\n  children: React.ReactNode;\n  url: string;\n  className?: string;\n  width?: number;\n  height?: number;\n  quality?: number;\n  layout?: string;\n} & (\n  | { isStatic: true; imageSrc: string }\n  | { isStatic?: false; imageSrc?: never }\n);\n \nexport const LinkPreview = ({\n  children,\n  url,\n  className,\n  width = 200,\n  height = 125,\n  quality = 50,\n  layout = \"fixed\",\n  isStatic = false,\n  imageSrc = \"\",\n}: LinkPreviewProps) => {\n  let src;\n  if (!isStatic) {\n    const params = encode({\n      url,\n      screenshot: true,\n      meta: false,\n      embed: \"screenshot.url\",\n      colorScheme: \"dark\",\n      \"viewport.isMobile\": true,\n      \"viewport.deviceScaleFactor\": 1,\n      \"viewport.width\": width * 3,\n      \"viewport.height\": height * 3,\n    });\n    src = `https://api.microlink.io/?${params}`;\n  } else {\n    src = imageSrc;\n  }\n \n  const [isOpen, setOpen] = React.useState(false);\n \n  const [isMounted, setIsMounted] = React.useState(false);\n \n  React.useEffect(() => {\n    setIsMounted(true);\n  }, []);\n \n  const springConfig = { stiffness: 100, damping: 15 };\n  const x = useMotionValue(0);\n \n  const translateX = useSpring(x, springConfig);\n \n  const handleMouseMove = (event: any) => {\n    const targetRect = event.target.getBoundingClientRect();\n    const eventOffsetX = event.clientX - targetRect.left;\n    const offsetFromCenter = (eventOffsetX - targetRect.width / 2) / 2; // Reduce the effect to make it subtle\n    x.set(offsetFromCenter);\n  };\n \n  return (\n    <>\n      {isMounted ? (\n        <div className=\"hidden\">\n          <Image\n            src={src}\n            width={width}\n            height={height}\n            quality={quality}\n            layout={layout}\n            priority={true}\n            alt=\"hidden image\"\n          />\n        </div>\n      ) : null}\n \n      <HoverCardPrimitive.Root\n        openDelay={50}\n        closeDelay={100}\n        onOpenChange={(open) => {\n          setOpen(open);\n        }}\n      >\n        <HoverCardPrimitive.Trigger\n          onMouseMove={handleMouseMove}\n          className={cn(\"text-black dark:text-white\", className)}\n          href={url}\n        >\n          {children}\n        </HoverCardPrimitive.Trigger>\n \n        <HoverCardPrimitive.Content\n          className=\"[transform-origin:var(--radix-hover-card-content-transform-origin)]\"\n          side=\"top\"\n          align=\"center\"\n          sideOffset={10}\n        >\n          <AnimatePresence>\n            {isOpen && (\n              <motion.div\n                initial={{ opacity: 0, y: 20, scale: 0.6 }}\n                animate={{\n                  opacity: 1,\n                  y: 0,\n                  scale: 1,\n                  transition: {\n                    type: \"spring\",\n                    stiffness: 260,\n                    damping: 20,\n                  },\n                }}\n                exit={{ opacity: 0, y: 20, scale: 0.6 }}\n                className=\"shadow-xl rounded-xl\"\n                style={{\n                  x: translateX,\n                }}\n              >\n                <Link\n                  href={url}\n                  className=\"block p-1 bg-white border-2 border-transparent shadow rounded-xl hover:border-neutral-200 dark:hover:border-neutral-800\"\n                  style={{ fontSize: 0 }}\n                >\n                  <Image\n                    src={isStatic ? imageSrc : src}\n                    width={width}\n                    height={height}\n                    quality={quality}\n                    layout={layout}\n                    priority={true}\n                    className=\"rounded-lg\"\n                    alt=\"preview image\"\n                  />\n                </Link>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </HoverCardPrimitive.Content>\n      </HoverCardPrimitive.Root>\n    </>\n  );\n};\nCopy\nExpand\nStatic Image Preview Example\nPreview\nCode\nLoading...\n\nThis example shows images being generated from a url AND images being fetched from local folder with a different url for link.\n\nProps\nProp Name\tType\tDefault Value\tDescription\nchildren\tReact.ReactNode\tNone\tThe content to be displayed inside the link component.\nurl\tstring\tNone\tThe URL for the link and for generating the preview image if isStatic is false.\nclassName\tstring\tNone\tAdditional CSS classes to apply to the link component.\nwidth\tnumber\t200\tWidth of the preview image.\nheight\tnumber\t125\tHeight of the preview image.\nquality\tnumber\t50\tQuality of the preview image.\nlayout\tstring\t\"fixed\"\tLayout type of the image, affects how the image resizes.\nisStatic\tboolean\tfalse\tDetermines if the image source is static or dynamically generated from the URL.\nimageSrc\tstring\t\"\"\tSource of the image when isStatic is true. If isStatic is false, this prop should not be used.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Lamp Section Header",
    "url": "https://ui.aceternity.com/components/lamp-effect",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nLamp Section Header\n\nA lamp effect as seen on linear, great for section headers.\n\nSection\nHeader\nSpecial\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/lamp.tsx\n\n\"use client\";\nimport React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n \nexport function LampDemo() {\n  return (\n    <LampContainer>\n      <motion.h1\n        initial={{ opacity: 0.5, y: 100 }}\n        whileInView={{ opacity: 1, y: 0 }}\n        transition={{\n          delay: 0.3,\n          duration: 0.8,\n          ease: \"easeInOut\",\n        }}\n        className=\"mt-8 bg-gradient-to-br from-slate-300 to-slate-500 py-4 bg-clip-text text-center text-4xl font-medium tracking-tight text-transparent md:text-7xl\"\n      >\n        Build lamps <br /> the right way\n      </motion.h1>\n    </LampContainer>\n  );\n}\n \nexport const LampContainer = ({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  return (\n    <div\n      className={cn(\n        \"relative flex min-h-screen flex-col items-center justify-center overflow-hidden bg-slate-950 w-full rounded-md z-0\",\n        className\n      )}\n    >\n      <div className=\"relative flex w-full flex-1 scale-y-125 items-center justify-center isolate z-0 \">\n        <motion.div\n          initial={{ opacity: 0.5, width: \"15rem\" }}\n          whileInView={{ opacity: 1, width: \"30rem\" }}\n          transition={{\n            delay: 0.3,\n            duration: 0.8,\n            ease: \"easeInOut\",\n          }}\n          style={{\n            backgroundImage: `conic-gradient(var(--conic-position), var(--tw-gradient-stops))`,\n          }}\n          className=\"absolute inset-auto right-1/2 h-56 overflow-visible w-[30rem] bg-gradient-conic from-cyan-500 via-transparent to-transparent text-white [--conic-position:from_70deg_at_center_top]\"\n        >\n          <div className=\"absolute  w-[100%] left-0 bg-slate-950 h-40 bottom-0 z-20 [mask-image:linear-gradient(to_top,white,transparent)]\" />\n          <div className=\"absolute  w-40 h-[100%] left-0 bg-slate-950  bottom-0 z-20 [mask-image:linear-gradient(to_right,white,transparent)]\" />\n        </motion.div>\n        <motion.div\n          initial={{ opacity: 0.5, width: \"15rem\" }}\n          whileInView={{ opacity: 1, width: \"30rem\" }}\n          transition={{\n            delay: 0.3,\n            duration: 0.8,\n            ease: \"easeInOut\",\n          }}\n          style={{\n            backgroundImage: `conic-gradient(var(--conic-position), var(--tw-gradient-stops))`,\n          }}\n          className=\"absolute inset-auto left-1/2 h-56 w-[30rem] bg-gradient-conic from-transparent via-transparent to-cyan-500 text-white [--conic-position:from_290deg_at_center_top]\"\n        >\n          <div className=\"absolute  w-40 h-[100%] right-0 bg-slate-950  bottom-0 z-20 [mask-image:linear-gradient(to_left,white,transparent)]\" />\n          <div className=\"absolute  w-[100%] right-0 bg-slate-950 h-40 bottom-0 z-20 [mask-image:linear-gradient(to_top,white,transparent)]\" />\n        </motion.div>\n        <div className=\"absolute top-1/2 h-48 w-full translate-y-12 scale-x-150 bg-slate-950 blur-2xl\"></div>\n        <div className=\"absolute top-1/2 z-50 h-48 w-full bg-transparent opacity-10 backdrop-blur-md\"></div>\n        <div className=\"absolute inset-auto z-50 h-36 w-[28rem] -translate-y-1/2 rounded-full bg-cyan-500 opacity-50 blur-3xl\"></div>\n        <motion.div\n          initial={{ width: \"8rem\" }}\n          whileInView={{ width: \"16rem\" }}\n          transition={{\n            delay: 0.3,\n            duration: 0.8,\n            ease: \"easeInOut\",\n          }}\n          className=\"absolute inset-auto z-30 h-36 w-64 -translate-y-[6rem] rounded-full bg-cyan-400 blur-2xl\"\n        ></motion.div>\n        <motion.div\n          initial={{ width: \"15rem\" }}\n          whileInView={{ width: \"30rem\" }}\n          transition={{\n            delay: 0.3,\n            duration: 0.8,\n            ease: \"easeInOut\",\n          }}\n          className=\"absolute inset-auto z-50 h-0.5 w-[30rem] -translate-y-[7rem] bg-cyan-400 \"\n        ></motion.div>\n \n        <div className=\"absolute inset-auto z-40 h-44 w-full -translate-y-[12.5rem] bg-slate-950 \"></div>\n      </div>\n \n      <div className=\"relative z-50 flex -translate-y-80 flex-col items-center px-5\">\n        {children}\n      </div>\n    </div>\n  );\n};\nCopy\nExpand\nProps\nProp\tType\tDescription\nchildren\tReact Node\tChildren that can be passed to the component\nclassName\tstring\tClassname for the container\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Infinite Moving Cards",
    "url": "https://ui.aceternity.com/components/infinite-moving-cards",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nInfinite Moving Cards\n\nA customizable group of cards that move infinitely in a loop. Made with Framer Motion and Tailwind CSS.\n\nTestimonials\nUtility\nMarquee\nPreview\nCode\nIt was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair.\nCharles Dickens\nA Tale of Two Cities\nTo be, or not to be, that is the question: Whether 'tis nobler in the mind to suffer The slings and arrows of outrageous fortune, Or to take Arms against a Sea of troubles, And by opposing end them: to die, to sleep.\nWilliam Shakespeare\nHamlet\nAll that we see or seem is but a dream within a dream.\nEdgar Allan Poe\nA Dream Within a Dream\nIt is a truth universally acknowledged, that a single man in possession of a good fortune, must be in want of a wife.\nJane Austen\nPride and Prejudice\nCall me Ishmael. Some years ago—never mind how long precisely—having little or no money in my purse, and nothing particular to interest me on shore, I thought I would sail about a little and see the watery part of the world.\nHerman Melville\nMoby-Dick\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nAdd Tailwind CSS plugin for variable classes\ntailwind.config.ts\nconst defaultTheme = require(\"tailwindcss/defaultTheme\");\n \nconst colors = require(\"tailwindcss/colors\");\nconst {\n  default: flattenColorPalette,\n} = require(\"tailwindcss/lib/util/flattenColorPalette\");\n \n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./src/**/*.{ts,tsx}\"],\n  darkMode: \"class\",\n  theme: {\n    // rest of the code\n    extend: {\n      animation: {\n        scroll:\n          \"scroll var(--animation-duration, 40s) var(--animation-direction, forwards) linear infinite\",\n      },\n      keyframes: {\n        scroll: {\n          to: {\n            transform: \"translate(calc(-50% - 0.5rem))\",\n          },\n        },\n      },\n    },\n  },\n  plugins: [addVariablesForColors],\n};\n \nfunction addVariablesForColors({ addBase, theme }: any) {\n  let allColors = flattenColorPalette(theme(\"colors\"));\n  let newVars = Object.fromEntries(\n    Object.entries(allColors).map(([key, val]) => [`--${key}`, val])\n  );\n \n  addBase({\n    \":root\": newVars,\n  });\n}\nCopy\nCopy the source code\n\ncomponents/ui/infinite-moving-cards.tsx\n\n\"use client\";\n \nimport { cn } from \"@/lib/utils\";\nimport React, { useEffect, useState } from \"react\";\n \nexport const InfiniteMovingCards = ({\n  items,\n  direction = \"left\",\n  speed = \"fast\",\n  pauseOnHover = true,\n  className,\n}: {\n  items: {\n    quote: string;\n    name: string;\n    title: string;\n  }[];\n  direction?: \"left\" | \"right\";\n  speed?: \"fast\" | \"normal\" | \"slow\";\n  pauseOnHover?: boolean;\n  className?: string;\n}) => {\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const scrollerRef = React.useRef<HTMLUListElement>(null);\n \n  useEffect(() => {\n    addAnimation();\n  }, []);\n  const [start, setStart] = useState(false);\n  function addAnimation() {\n    if (containerRef.current && scrollerRef.current) {\n      const scrollerContent = Array.from(scrollerRef.current.children);\n \n      scrollerContent.forEach((item) => {\n        const duplicatedItem = item.cloneNode(true);\n        if (scrollerRef.current) {\n          scrollerRef.current.appendChild(duplicatedItem);\n        }\n      });\n \n      getDirection();\n      getSpeed();\n      setStart(true);\n    }\n  }\n  const getDirection = () => {\n    if (containerRef.current) {\n      if (direction === \"left\") {\n        containerRef.current.style.setProperty(\n          \"--animation-direction\",\n          \"forwards\"\n        );\n      } else {\n        containerRef.current.style.setProperty(\n          \"--animation-direction\",\n          \"reverse\"\n        );\n      }\n    }\n  };\n  const getSpeed = () => {\n    if (containerRef.current) {\n      if (speed === \"fast\") {\n        containerRef.current.style.setProperty(\"--animation-duration\", \"20s\");\n      } else if (speed === \"normal\") {\n        containerRef.current.style.setProperty(\"--animation-duration\", \"40s\");\n      } else {\n        containerRef.current.style.setProperty(\"--animation-duration\", \"80s\");\n      }\n    }\n  };\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\n        \"scroller relative z-20  max-w-7xl overflow-hidden  [mask-image:linear-gradient(to_right,transparent,white_20%,white_80%,transparent)]\",\n        className\n      )}\n    >\n      <ul\n        ref={scrollerRef}\n        className={cn(\n          \" flex min-w-full shrink-0 gap-4 py-4 w-max flex-nowrap\",\n          start && \"animate-scroll \",\n          pauseOnHover && \"hover:[animation-play-state:paused]\"\n        )}\n      >\n        {items.map((item, idx) => (\n          <li\n            className=\"w-[350px] max-w-full relative rounded-2xl border border-b-0 flex-shrink-0 border-slate-700 px-8 py-6 md:w-[450px]\"\n            style={{\n              background:\n                \"linear-gradient(180deg, var(--slate-800), var(--slate-900)\",\n            }}\n            key={item.name}\n          >\n            <blockquote>\n              <div\n                aria-hidden=\"true\"\n                className=\"user-select-none -z-1 pointer-events-none absolute -left-0.5 -top-0.5 h-[calc(100%_+_4px)] w-[calc(100%_+_4px)]\"\n              ></div>\n              <span className=\" relative z-20 text-sm leading-[1.6] text-gray-100 font-normal\">\n                {item.quote}\n              </span>\n              <div className=\"relative z-20 mt-6 flex flex-row items-center\">\n                <span className=\"flex flex-col gap-1\">\n                  <span className=\" text-sm leading-[1.6] text-gray-400 font-normal\">\n                    {item.name}\n                  </span>\n                  <span className=\" text-sm leading-[1.6] text-gray-400 font-normal\">\n                    {item.title}\n                  </span>\n                </span>\n              </div>\n            </blockquote>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\nCopy\nExpand\nProps\nProp\tType\tDescription\nitems\t{ quote: string; name: string; title: string; }[]\tAn array of objects, each containing a quote, name, and title.\ndirection\t\"left\" | \"right\"\tThe direction of the animation. Default is \"left\".\nspeed\t\"fast\" | \"normal\" | \"slow\"\tThe speed of the animation. Default is \"fast\".\npauseOnHover\tboolean\tIf true, the animation will pause when the mouse hovers over it. Default is true.\nclassName\tstring\tOptional additional CSS classes to apply to the component.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Images Slider",
    "url": "https://ui.aceternity.com/components/images-slider",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nImages Slider\n\nA full page slider with images that can be navigated with the keyboard.\n\nFeatures\nProduct\nSpecial\nPreview\nCode\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/images-slider.tsx\n\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport React, { useEffect, useState } from \"react\";\n \nexport const ImagesSlider = ({\n  images,\n  children,\n  overlay = true,\n  overlayClassName,\n  className,\n  autoplay = true,\n  direction = \"up\",\n}: {\n  images: string[];\n  children: React.ReactNode;\n  overlay?: React.ReactNode;\n  overlayClassName?: string;\n  className?: string;\n  autoplay?: boolean;\n  direction?: \"up\" | \"down\";\n}) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [loadedImages, setLoadedImages] = useState<string[]>([]);\n \n  const handleNext = () => {\n    setCurrentIndex((prevIndex) =>\n      prevIndex + 1 === images.length ? 0 : prevIndex + 1\n    );\n  };\n \n  const handlePrevious = () => {\n    setCurrentIndex((prevIndex) =>\n      prevIndex - 1 < 0 ? images.length - 1 : prevIndex - 1\n    );\n  };\n \n  useEffect(() => {\n    loadImages();\n  }, []);\n \n  const loadImages = () => {\n    setLoading(true);\n    const loadPromises = images.map((image) => {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.src = image;\n        img.onload = () => resolve(image);\n        img.onerror = reject;\n      });\n    });\n \n    Promise.all(loadPromises)\n      .then((loadedImages) => {\n        setLoadedImages(loadedImages as string[]);\n        setLoading(false);\n      })\n      .catch((error) => console.error(\"Failed to load images\", error));\n  };\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === \"ArrowRight\") {\n        handleNext();\n      } else if (event.key === \"ArrowLeft\") {\n        handlePrevious();\n      }\n    };\n \n    window.addEventListener(\"keydown\", handleKeyDown);\n \n    // autoplay\n    let interval: any;\n    if (autoplay) {\n      interval = setInterval(() => {\n        handleNext();\n      }, 5000);\n    }\n \n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n      clearInterval(interval);\n    };\n  }, []);\n \n  const slideVariants = {\n    initial: {\n      scale: 0,\n      opacity: 0,\n      rotateX: 45,\n    },\n    visible: {\n      scale: 1,\n      rotateX: 0,\n      opacity: 1,\n      transition: {\n        duration: 0.5,\n        ease: [0.645, 0.045, 0.355, 1.0],\n      },\n    },\n    upExit: {\n      opacity: 1,\n      y: \"-150%\",\n      transition: {\n        duration: 1,\n      },\n    },\n    downExit: {\n      opacity: 1,\n      y: \"150%\",\n      transition: {\n        duration: 1,\n      },\n    },\n  };\n \n  const areImagesLoaded = loadedImages.length > 0;\n \n  return (\n    <div\n      className={cn(\n        \"overflow-hidden h-full w-full relative flex items-center justify-center\",\n        className\n      )}\n      style={{\n        perspective: \"1000px\",\n      }}\n    >\n      {areImagesLoaded && children}\n      {areImagesLoaded && overlay && (\n        <div\n          className={cn(\"absolute inset-0 bg-black/60 z-40\", overlayClassName)}\n        />\n      )}\n \n      {areImagesLoaded && (\n        <AnimatePresence>\n          <motion.img\n            key={currentIndex}\n            src={loadedImages[currentIndex]}\n            initial=\"initial\"\n            animate=\"visible\"\n            exit={direction === \"up\" ? \"upExit\" : \"downExit\"}\n            variants={slideVariants}\n            className=\"image h-full w-full absolute inset-0 object-cover object-center\"\n          />\n        </AnimatePresence>\n      )}\n    </div>\n  );\n};\nCopy\nExpand\nProps\nProp\tType\tDefault\tDescription\nimages\tstring[]\t-\tAn array of image URLs to be displayed in the slider.\nchildren\tReact.ReactNode\t-\tAny React nodes that will be rendered inside the slider.\noverlay\tReact.ReactNode\ttrue\tIf true, an overlay will be displayed on the images.\noverlayClassName\tstring\t-\tThe CSS class name to be applied to the overlay.\nclassName\tstring\t-\tThe CSS class name to be applied to the slider.\nautoplay\tboolean\ttrue\tIf true, the slider will automatically move to the next image every 5 seconds.\ndirection\t\"up\" | \"down\"\t\"up\"\tThe direction of the transition when changing images.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Hover Border Gradient",
    "url": "https://ui.aceternity.com/components/hover-border-gradient",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nHover Border Gradient\n\nA hover effect that expands to the entire container with a gradient border.\n\nHover\nCard\nUtility\nButton\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/hover-border-gradient.tsx\n\n\"use client\";\nimport React, { useState, useEffect, useRef } from \"react\";\n \nimport { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n \ntype Direction = \"TOP\" | \"LEFT\" | \"BOTTOM\" | \"RIGHT\";\n \nexport function HoverBorderGradient({\n  children,\n  containerClassName,\n  className,\n  as: Tag = \"button\",\n  duration = 1,\n  clockwise = true,\n  ...props\n}: React.PropsWithChildren<\n  {\n    as?: React.ElementType;\n    containerClassName?: string;\n    className?: string;\n    duration?: number;\n    clockwise?: boolean;\n  } & React.HTMLAttributes<HTMLElement>\n>) {\n  const [hovered, setHovered] = useState<boolean>(false);\n  const [direction, setDirection] = useState<Direction>(\"TOP\");\n \n  const rotateDirection = (currentDirection: Direction): Direction => {\n    const directions: Direction[] = [\"TOP\", \"LEFT\", \"BOTTOM\", \"RIGHT\"];\n    const currentIndex = directions.indexOf(currentDirection);\n    const nextIndex = clockwise\n      ? (currentIndex - 1 + directions.length) % directions.length\n      : (currentIndex + 1) % directions.length;\n    return directions[nextIndex];\n  };\n \n  const movingMap: Record<Direction, string> = {\n    TOP: \"radial-gradient(20.7% 50% at 50% 0%, hsl(0, 0%, 100%) 0%, rgba(255, 255, 255, 0) 100%)\",\n    LEFT: \"radial-gradient(16.6% 43.1% at 0% 50%, hsl(0, 0%, 100%) 0%, rgba(255, 255, 255, 0) 100%)\",\n    BOTTOM:\n      \"radial-gradient(20.7% 50% at 50% 100%, hsl(0, 0%, 100%) 0%, rgba(255, 255, 255, 0) 100%)\",\n    RIGHT:\n      \"radial-gradient(16.2% 41.199999999999996% at 100% 50%, hsl(0, 0%, 100%) 0%, rgba(255, 255, 255, 0) 100%)\",\n  };\n \n  const highlight =\n    \"radial-gradient(75% 181.15942028985506% at 50% 50%, #3275F8 0%, rgba(255, 255, 255, 0) 100%)\";\n \n  useEffect(() => {\n    if (!hovered) {\n      const interval = setInterval(() => {\n        setDirection((prevState) => rotateDirection(prevState));\n      }, duration * 1000);\n      return () => clearInterval(interval);\n    }\n  }, [hovered]);\n  return (\n    <Tag\n      onMouseEnter={(event: React.MouseEvent<HTMLDivElement>) => {\n        setHovered(true);\n      }}\n      onMouseLeave={() => setHovered(false)}\n      className={cn(\n        \"relative flex rounded-full border  content-center bg-black/20 hover:bg-black/10 transition duration-500 dark:bg-white/20 items-center flex-col flex-nowrap gap-10 h-min justify-center overflow-visible p-px decoration-clone w-fit\",\n        containerClassName\n      )}\n      {...props}\n    >\n      <div\n        className={cn(\n          \"w-auto text-white z-10 bg-black px-4 py-2 rounded-[inherit]\",\n          className\n        )}\n      >\n        {children}\n      </div>\n      <motion.div\n        className={cn(\n          \"flex-none inset-0 overflow-hidden absolute z-0 rounded-[inherit]\"\n        )}\n        style={{\n          filter: \"blur(2px)\",\n          position: \"absolute\",\n          width: \"100%\",\n          height: \"100%\",\n        }}\n        initial={{ background: movingMap[direction] }}\n        animate={{\n          background: hovered\n            ? [movingMap[direction], highlight]\n            : movingMap[direction],\n        }}\n        transition={{ ease: \"linear\", duration: duration ?? 1 }}\n      />\n      <div className=\"bg-black absolute z-1 flex-none inset-[2px] rounded-[100px]\" />\n    </Tag>\n  );\n}\nCopy\nExpand\nProps\nProp\tType\tDefault\tDescription\nchildren\tReact.ReactNode\tN/A\tThe content to be displayed inside the hover gradient component.\ncontainerClassName\tstring?\tundefined\tAdditional CSS class for the container.\nclassName\tstring?\tundefined\tAdditional CSS class for the inner content.\nas\tReact.ElementType?\t\"button\"\tThe component type that will be used as the container.\nduration\tnumber?\t1\tDuration of the animation cycle in seconds.\nclockwise\tboolean?\ttrue\tDetermines the direction of the gradient rotation.\n...buttonProps\tReact.HTMLAttributes<HTMLElement>\tN/A\tAdditional props to be spread over the container element.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Hero Parallax",
    "url": "https://ui.aceternity.com/components/hero-parallax",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nHero Parallax\n\nA scroll effect with rotation, translation and opacity animations.\n\nHero\nSection\nSpecial\nParallax\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/hero-parallax.tsx\n\n\"use client\";\nimport React from \"react\";\nimport {\n  motion,\n  useScroll,\n  useTransform,\n  useSpring,\n  MotionValue,\n} from \"framer-motion\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\n \nexport const HeroParallax = ({\n  products,\n}: {\n  products: {\n    title: string;\n    link: string;\n    thumbnail: string;\n  }[];\n}) => {\n  const firstRow = products.slice(0, 5);\n  const secondRow = products.slice(5, 10);\n  const thirdRow = products.slice(10, 15);\n  const ref = React.useRef(null);\n  const { scrollYProgress } = useScroll({\n    target: ref,\n    offset: [\"start start\", \"end start\"],\n  });\n \n  const springConfig = { stiffness: 300, damping: 30, bounce: 100 };\n \n  const translateX = useSpring(\n    useTransform(scrollYProgress, [0, 1], [0, 1000]),\n    springConfig\n  );\n  const translateXReverse = useSpring(\n    useTransform(scrollYProgress, [0, 1], [0, -1000]),\n    springConfig\n  );\n  const rotateX = useSpring(\n    useTransform(scrollYProgress, [0, 0.2], [15, 0]),\n    springConfig\n  );\n  const opacity = useSpring(\n    useTransform(scrollYProgress, [0, 0.2], [0.2, 1]),\n    springConfig\n  );\n  const rotateZ = useSpring(\n    useTransform(scrollYProgress, [0, 0.2], [20, 0]),\n    springConfig\n  );\n  const translateY = useSpring(\n    useTransform(scrollYProgress, [0, 0.2], [-700, 500]),\n    springConfig\n  );\n  return (\n    <div\n      ref={ref}\n      className=\"h-[300vh] py-40 overflow-hidden  antialiased relative flex flex-col self-auto [perspective:1000px] [transform-style:preserve-3d]\"\n    >\n      <Header />\n      <motion.div\n        style={{\n          rotateX,\n          rotateZ,\n          translateY,\n          opacity,\n        }}\n        className=\"\"\n      >\n        <motion.div className=\"flex flex-row-reverse space-x-reverse space-x-20 mb-20\">\n          {firstRow.map((product) => (\n            <ProductCard\n              product={product}\n              translate={translateX}\n              key={product.title}\n            />\n          ))}\n        </motion.div>\n        <motion.div className=\"flex flex-row  mb-20 space-x-20 \">\n          {secondRow.map((product) => (\n            <ProductCard\n              product={product}\n              translate={translateXReverse}\n              key={product.title}\n            />\n          ))}\n        </motion.div>\n        <motion.div className=\"flex flex-row-reverse space-x-reverse space-x-20\">\n          {thirdRow.map((product) => (\n            <ProductCard\n              product={product}\n              translate={translateX}\n              key={product.title}\n            />\n          ))}\n        </motion.div>\n      </motion.div>\n    </div>\n  );\n};\n \nexport const Header = () => {\n  return (\n    <div className=\"max-w-7xl relative mx-auto py-20 md:py-40 px-4 w-full  left-0 top-0\">\n      <h1 className=\"text-2xl md:text-7xl font-bold dark:text-white\">\n        The Ultimate <br /> development studio\n      </h1>\n      <p className=\"max-w-2xl text-base md:text-xl mt-8 dark:text-neutral-200\">\n        We build beautiful products with the latest technologies and frameworks.\n        We are a team of passionate developers and designers that love to build\n        amazing products.\n      </p>\n    </div>\n  );\n};\n \nexport const ProductCard = ({\n  product,\n  translate,\n}: {\n  product: {\n    title: string;\n    link: string;\n    thumbnail: string;\n  };\n  translate: MotionValue<number>;\n}) => {\n  return (\n    <motion.div\n      style={{\n        x: translate,\n      }}\n      whileHover={{\n        y: -20,\n      }}\n      key={product.title}\n      className=\"group/product h-96 w-[30rem] relative flex-shrink-0\"\n    >\n      <Link\n        href={product.link}\n        className=\"block group-hover/product:shadow-2xl \"\n      >\n        <Image\n          src={product.thumbnail}\n          height=\"600\"\n          width=\"600\"\n          className=\"object-cover object-left-top absolute h-full w-full inset-0\"\n          alt={product.title}\n        />\n      </Link>\n      <div className=\"absolute inset-0 h-full w-full opacity-0 group-hover/product:opacity-80 bg-black pointer-events-none\"></div>\n      <h2 className=\"absolute bottom-4 left-4 opacity-0 group-hover/product:opacity-100 text-white\">\n        {product.title}\n      </h2>\n    </motion.div>\n  );\n};\nCopy\nExpand\nProps\nHeroParallax\nProp\tType\tDescription\nproducts\tArray\tAn array of product objects. Each object should have a title (string), link (string), and thumbnail (string).\nProductCard\nProp\tType\tDescription\nproduct\tObject\tAn object representing a product. It should have a title (string), link (string), and thumbnail (string).\ntranslate\tMotionValue<number>\tA Framer Motion value representing the translation of the product card on the x-axis.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Hero Highlight",
    "url": "https://ui.aceternity.com/components/hero-highlight",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nHero Highlight\n\nA background effect with a text highlight component, perfect for hero sections.\n\nHero\nSection\nSpecial\nText\nBackground\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge mini-svg-data-uri\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nModify the Tailwind config file\ntailwind.config.ts\nconst svgToDataUri = require(\"mini-svg-data-uri\");\nconst {\n  default: flattenColorPalette,\n} = require(\"tailwindcss/lib/util/flattenColorPalette\");\n \n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./src/**/*.{ts,tsx}\"],\n  darkMode: \"class\",\n  theme: {\n    extend: {\n      // your config here\n    },\n  },\n  plugins: [\n    addVariablesForColors,\n    function ({ matchUtilities, theme }: any) {\n      matchUtilities(\n        {\n          \"bg-dot-thick\": (value: any) => ({\n            backgroundImage: `url(\"${svgToDataUri(\n              `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" width=\"16\" height=\"16\" fill=\"none\"><circle fill=\"${value}\" id=\"pattern-circle\" cx=\"10\" cy=\"10\" r=\"2.5\"></circle></svg>`\n            )}\")`,\n          }),\n        },\n        { values: flattenColorPalette(theme(\"backgroundColor\")), type: \"color\" }\n      );\n    },\n  ],\n};\n \n// This plugin adds each Tailwind color as a global CSS variable, e.g. var(--gray-200).\nfunction addVariablesForColors({ addBase, theme }: any) {\n  let allColors = flattenColorPalette(theme(\"colors\"));\n  let newVars = Object.fromEntries(\n    Object.entries(allColors).map(([key, val]) => [`--${key}`, val])\n  );\n \n  addBase({\n    \":root\": newVars,\n  });\n}\nCopy\nCopy the source code\n\ncomponents/ui/hero-highlight.tsx\n\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { useMotionValue, motion, useMotionTemplate } from \"framer-motion\";\nimport React from \"react\";\n \nexport const HeroHighlight = ({\n  children,\n  className,\n  containerClassName,\n}: {\n  children: React.ReactNode;\n  className?: string;\n  containerClassName?: string;\n}) => {\n  let mouseX = useMotionValue(0);\n  let mouseY = useMotionValue(0);\n \n  function handleMouseMove({\n    currentTarget,\n    clientX,\n    clientY,\n  }: React.MouseEvent<HTMLDivElement>) {\n    if (!currentTarget) return;\n    let { left, top } = currentTarget.getBoundingClientRect();\n \n    mouseX.set(clientX - left);\n    mouseY.set(clientY - top);\n  }\n  return (\n    <div\n      className={cn(\n        \"relative h-[40rem] flex items-center bg-white dark:bg-black justify-center w-full group\",\n        containerClassName\n      )}\n      onMouseMove={handleMouseMove}\n    >\n      <div className=\"absolute inset-0 bg-dot-thick-neutral-300 dark:bg-dot-thick-neutral-800  pointer-events-none\" />\n      <motion.div\n        className=\"pointer-events-none bg-dot-thick-indigo-500 dark:bg-dot-thick-indigo-500   absolute inset-0 opacity-0 transition duration-300 group-hover:opacity-100\"\n        style={{\n          WebkitMaskImage: useMotionTemplate`\n            radial-gradient(\n              200px circle at ${mouseX}px ${mouseY}px,\n              black 0%,\n              transparent 100%\n            )\n          `,\n          maskImage: useMotionTemplate`\n            radial-gradient(\n              200px circle at ${mouseX}px ${mouseY}px,\n              black 0%,\n              transparent 100%\n            )\n          `,\n        }}\n      />\n \n      <div className={cn(\"relative z-20\", className)}>{children}</div>\n    </div>\n  );\n};\n \nexport const Highlight = ({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  return (\n    <motion.span\n      initial={{\n        backgroundSize: \"0% 100%\",\n      }}\n      animate={{\n        backgroundSize: \"100% 100%\",\n      }}\n      transition={{\n        duration: 2,\n        ease: \"linear\",\n        delay: 0.5,\n      }}\n      style={{\n        backgroundRepeat: \"no-repeat\",\n        backgroundPosition: \"left center\",\n        display: \"inline\",\n      }}\n      className={cn(\n        `relative inline-block pb-1   px-1 rounded-lg bg-gradient-to-r from-indigo-300 to-purple-300 dark:from-indigo-500 dark:to-purple-500`,\n        className\n      )}\n    >\n      {children}\n    </motion.span>\n  );\n};\nCopy\nExpand\nProps\nHeroHighlight Props\nProp\tType\tDefault\tDescription\nchildren\tReact.ReactNode\tN/A\tThe content to be displayed inside the HeroHighlight component.\nclassName\tstring (optional)\tN/A\tAdditional CSS classes to apply to the child component for styling.\ncontainerClassName\tstring (optional)\tN/A\tAdditional CSS classes to apply to the container component for styling.\nHighlight Props\nProp\tType\tDefault\tDescription\nchildren\tReact.ReactNode\tN/A\tThe content to be highlighted.\nclassName\tstring (optional)\tN/A\tAdditional CSS classes to apply to the Highlight component for styling.\n\nInspiration for this component is taken from Designboost's Homepage\n\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Grid and Dot Backgrounds",
    "url": "https://ui.aceternity.com/components/grid-and-dot-backgrounds",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nGrid and Dot Backgrounds\n\nA simple grid and dots background to make your sections stand out.\n\nBackground\nCard\nUtility\nPreview\nCode\n\nBackgrounds\n\nInstallation\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge mini-svg-data-uri\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nAdd Tailwind CSS plugin for backgrounds\ntailwind.config.ts\nconst defaultTheme = require(\"tailwindcss/defaultTheme\");\n \nconst svgToDataUri = require(\"mini-svg-data-uri\");\n \nconst colors = require(\"tailwindcss/colors\");\nconst {\n  default: flattenColorPalette,\n} = require(\"tailwindcss/lib/util/flattenColorPalette\");\n \n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./src/**/*.{ts,tsx}\"],\n  darkMode: \"class\",\n  theme: {\n    // rest of the code\n  },\n  plugins: [\n    addVariablesForColors,\n    function ({ matchUtilities, theme }: any) {\n      matchUtilities(\n        {\n          \"bg-grid\": (value: any) => ({\n            backgroundImage: `url(\"${svgToDataUri(\n              `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" fill=\"none\" stroke=\"${value}\"><path d=\"M0 .5H31.5V32\"/></svg>`\n            )}\")`,\n          }),\n          \"bg-grid-small\": (value: any) => ({\n            backgroundImage: `url(\"${svgToDataUri(\n              `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" width=\"8\" height=\"8\" fill=\"none\" stroke=\"${value}\"><path d=\"M0 .5H31.5V32\"/></svg>`\n            )}\")`,\n          }),\n          \"bg-dot\": (value: any) => ({\n            backgroundImage: `url(\"${svgToDataUri(\n              `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" width=\"16\" height=\"16\" fill=\"none\"><circle fill=\"${value}\" id=\"pattern-circle\" cx=\"10\" cy=\"10\" r=\"1.6257413380501518\"></circle></svg>`\n            )}\")`,\n          }),\n        },\n        { values: flattenColorPalette(theme(\"backgroundColor\")), type: \"color\" }\n      );\n    },\n  ],\n};\n \nfunction addVariablesForColors({ addBase, theme }: any) {\n  let allColors = flattenColorPalette(theme(\"colors\"));\n  let newVars = Object.fromEntries(\n    Object.entries(allColors).map(([key, val]) => [`--${key}`, val])\n  );\n \n  addBase({\n    \":root\": newVars,\n  });\n}\nCopy\nExamples\nGrid Background\nPreview\nCode\n\nBackgrounds\n\nGrid Small Background\nPreview\nCode\n\nBackgrounds\n\nDot Background\nPreview\nCode\nLoading...\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Background Gradient Animation",
    "url": "https://ui.aceternity.com/components/background-gradient-animation",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nBackground Gradient Animation\n\nA smooth and elegant background gradient animation that changes the gradient position over time.\n\nCard\nBackground\nGradient\nSpecial\nCall To Action\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\n\nAdd these animations and keyframes to your tailwind.config.ts file\n\ntailwind.config.ts\nmodule.exports = {\n  content: [\"./src/**/*.{ts,tsx}\"],\n  darkMode: \"class\",\n  theme: {\n    extend: {\n      animation: {\n        first: \"moveVertical 30s ease infinite\",\n        second: \"moveInCircle 20s reverse infinite\",\n        third: \"moveInCircle 40s linear infinite\",\n        fourth: \"moveHorizontal 40s ease infinite\",\n        fifth: \"moveInCircle 20s ease infinite\",\n      },\n      keyframes: {\n        moveHorizontal: {\n          \"0%\": {\n            transform: \"translateX(-50%) translateY(-10%)\",\n          },\n          \"50%\": {\n            transform: \"translateX(50%) translateY(10%)\",\n          },\n          \"100%\": {\n            transform: \"translateX(-50%) translateY(-10%)\",\n          },\n        },\n        moveInCircle: {\n          \"0%\": {\n            transform: \"rotate(0deg)\",\n          },\n          \"50%\": {\n            transform: \"rotate(180deg)\",\n          },\n          \"100%\": {\n            transform: \"rotate(360deg)\",\n          },\n        },\n        moveVertical: {\n          \"0%\": {\n            transform: \"translateY(-50%)\",\n          },\n          \"50%\": {\n            transform: \"translateY(50%)\",\n          },\n          \"100%\": {\n            transform: \"translateY(-50%)\",\n          },\n        },\n      },\n    },\n  },\n  plugins: [],\n};\nCopy\nCopy the source code\n\ncomponents/ui/background-gradient-animation.tsx\n\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { useEffect, useRef, useState } from \"react\";\n \nexport const BackgroundGradientAnimation = ({\n  gradientBackgroundStart = \"rgb(108, 0, 162)\",\n  gradientBackgroundEnd = \"rgb(0, 17, 82)\",\n  firstColor = \"18, 113, 255\",\n  secondColor = \"221, 74, 255\",\n  thirdColor = \"100, 220, 255\",\n  fourthColor = \"200, 50, 50\",\n  fifthColor = \"180, 180, 50\",\n  pointerColor = \"140, 100, 255\",\n  size = \"80%\",\n  blendingValue = \"hard-light\",\n  children,\n  className,\n  interactive = true,\n  containerClassName,\n}: {\n  gradientBackgroundStart?: string;\n  gradientBackgroundEnd?: string;\n  firstColor?: string;\n  secondColor?: string;\n  thirdColor?: string;\n  fourthColor?: string;\n  fifthColor?: string;\n  pointerColor?: string;\n  size?: string;\n  blendingValue?: string;\n  children?: React.ReactNode;\n  className?: string;\n  interactive?: boolean;\n  containerClassName?: string;\n}) => {\n  const interactiveRef = useRef<HTMLDivElement>(null);\n \n  const [curX, setCurX] = useState(0);\n  const [curY, setCurY] = useState(0);\n  const [tgX, setTgX] = useState(0);\n  const [tgY, setTgY] = useState(0);\n  useEffect(() => {\n    document.body.style.setProperty(\n      \"--gradient-background-start\",\n      gradientBackgroundStart\n    );\n    document.body.style.setProperty(\n      \"--gradient-background-end\",\n      gradientBackgroundEnd\n    );\n    document.body.style.setProperty(\"--first-color\", firstColor);\n    document.body.style.setProperty(\"--second-color\", secondColor);\n    document.body.style.setProperty(\"--third-color\", thirdColor);\n    document.body.style.setProperty(\"--fourth-color\", fourthColor);\n    document.body.style.setProperty(\"--fifth-color\", fifthColor);\n    document.body.style.setProperty(\"--pointer-color\", pointerColor);\n    document.body.style.setProperty(\"--size\", size);\n    document.body.style.setProperty(\"--blending-value\", blendingValue);\n  }, []);\n \n  useEffect(() => {\n    function move() {\n      if (!interactiveRef.current) {\n        return;\n      }\n      setCurX(curX + (tgX - curX) / 20);\n      setCurY(curY + (tgY - curY) / 20);\n      interactiveRef.current.style.transform = `translate(${Math.round(\n        curX\n      )}px, ${Math.round(curY)}px)`;\n    }\n \n    move();\n  }, [tgX, tgY]);\n \n  const handleMouseMove = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (interactiveRef.current) {\n      const rect = interactiveRef.current.getBoundingClientRect();\n      setTgX(event.clientX - rect.left);\n      setTgY(event.clientY - rect.top);\n    }\n  };\n \n  const [isSafari, setIsSafari] = useState(false);\n  useEffect(() => {\n    setIsSafari(/^((?!chrome|android).)*safari/i.test(navigator.userAgent));\n  }, []);\n \n  return (\n    <div\n      className={cn(\n        \"h-screen w-screen relative overflow-hidden top-0 left-0 bg-[linear-gradient(40deg,var(--gradient-background-start),var(--gradient-background-end))]\",\n        containerClassName\n      )}\n    >\n      <svg className=\"hidden\">\n        <defs>\n          <filter id=\"blurMe\">\n            <feGaussianBlur\n              in=\"SourceGraphic\"\n              stdDeviation=\"10\"\n              result=\"blur\"\n            />\n            <feColorMatrix\n              in=\"blur\"\n              mode=\"matrix\"\n              values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -8\"\n              result=\"goo\"\n            />\n            <feBlend in=\"SourceGraphic\" in2=\"goo\" />\n          </filter>\n        </defs>\n      </svg>\n      <div className={cn(\"\", className)}>{children}</div>\n      <div\n        className={cn(\n          \"gradients-container h-full w-full blur-lg\",\n          isSafari ? \"blur-2xl\" : \"[filter:url(#blurMe)_blur(40px)]\"\n        )}\n      >\n        <div\n          className={cn(\n            `absolute [background:radial-gradient(circle_at_center,_var(--first-color)_0,_var(--first-color)_50%)_no-repeat]`,\n            `[mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[calc(50%-var(--size)/2)] left-[calc(50%-var(--size)/2)]`,\n            `[transform-origin:center_center]`,\n            `animate-first`,\n            `opacity-100`\n          )}\n        ></div>\n        <div\n          className={cn(\n            `absolute [background:radial-gradient(circle_at_center,_rgba(var(--second-color),_0.8)_0,_rgba(var(--second-color),_0)_50%)_no-repeat]`,\n            `[mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[calc(50%-var(--size)/2)] left-[calc(50%-var(--size)/2)]`,\n            `[transform-origin:calc(50%-400px)]`,\n            `animate-second`,\n            `opacity-100`\n          )}\n        ></div>\n        <div\n          className={cn(\n            `absolute [background:radial-gradient(circle_at_center,_rgba(var(--third-color),_0.8)_0,_rgba(var(--third-color),_0)_50%)_no-repeat]`,\n            `[mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[calc(50%-var(--size)/2)] left-[calc(50%-var(--size)/2)]`,\n            `[transform-origin:calc(50%+400px)]`,\n            `animate-third`,\n            `opacity-100`\n          )}\n        ></div>\n        <div\n          className={cn(\n            `absolute [background:radial-gradient(circle_at_center,_rgba(var(--fourth-color),_0.8)_0,_rgba(var(--fourth-color),_0)_50%)_no-repeat]`,\n            `[mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[calc(50%-var(--size)/2)] left-[calc(50%-var(--size)/2)]`,\n            `[transform-origin:calc(50%-200px)]`,\n            `animate-fourth`,\n            `opacity-70`\n          )}\n        ></div>\n        <div\n          className={cn(\n            `absolute [background:radial-gradient(circle_at_center,_rgba(var(--fifth-color),_0.8)_0,_rgba(var(--fifth-color),_0)_50%)_no-repeat]`,\n            `[mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[calc(50%-var(--size)/2)] left-[calc(50%-var(--size)/2)]`,\n            `[transform-origin:calc(50%-800px)_calc(50%+800px)]`,\n            `animate-fifth`,\n            `opacity-100`\n          )}\n        ></div>\n \n        {interactive && (\n          <div\n            ref={interactiveRef}\n            onMouseMove={handleMouseMove}\n            className={cn(\n              `absolute [background:radial-gradient(circle_at_center,_rgba(var(--pointer-color),_0.8)_0,_rgba(var(--pointer-color),_0)_50%)_no-repeat]`,\n              `[mix-blend-mode:var(--blending-value)] w-full h-full -top-1/2 -left-1/2`,\n              `opacity-70`\n            )}\n          ></div>\n        )}\n      </div>\n    </div>\n  );\n};\nCopy\nExpand\nProps\nProp Name\tType\tDefault Value\tDescription\ngradientBackgroundStart\tstring\t\"rgb(108, 0, 162)\"\tThe starting color of the background gradient, specified as an RGB value.\ngradientBackgroundEnd\tstring\t\"rgb(0, 17, 82)\"\tThe ending color of the background gradient, specified as an RGB value.\nfirstColor\tstring\t\"18, 113, 255\"\tThe first color used in the animation, specified as an RGB value without the rgb tag.\nsecondColor\tstring\t\"221, 74, 255\"\tThe second color used in the animation, specified as an RGB value without the rgb tag.\nthirdColor\tstring\t\"100, 220, 255\"\tThe third color used in the animation, specified as an RGB value without the rgb tag.\nfourthColor\tstring\t\"200, 50, 50\"\tThe fourth color used in the animation, specified as an RGB value without the rgb tag.\nfifthColor\tstring\t\"180, 180, 50\"\tThe fifth color used in the animation, specified as an RGB value without the rgb tag.\npointerColor\tstring\t\"140, 100, 255\"\tThe color of the pointer, specified as an RGB value without the rgb tag.\nsize\tstring\t\"80%\"\tThe size of the animated elements.\nblendingValue\tstring\t\"hard-light\"\tThe blending mode used for the animated elements.\nchildren\tReact.ReactNode\tundefined\tChildren components to be rendered inside the component.\nclassName\tstring\tundefined\tAdditional CSS class for styling.\ninteractive\tboolean\ttrue\tDetermines if the animation is interactive or not.\ncontainerClassName\tstring\tundefined\tAdditional CSS class for the container.\n\nSpecial thanks to this video that inspired this component.\n\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Google Gemini Effect",
    "url": "https://ui.aceternity.com/components/google-gemini-effect",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nGoogle Gemini Effect\n\nAn effect of SVGs as seen on the Google Gemini Website\n\nFooter\nSection\nSpecial\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/google-gemini-effect.tsx\n\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, MotionValue } from \"framer-motion\";\nimport React from \"react\";\n \nconst transition = {\n  duration: 0,\n  ease: \"linear\",\n};\n \nexport const GoogleGeminiEffect = ({\n  pathLengths,\n  title,\n  description,\n  className,\n}: {\n  pathLengths: MotionValue[];\n  title?: string;\n  description?: string;\n  className?: string;\n}) => {\n  return (\n    <div className={cn(\"sticky top-80\", className)}>\n      <p className=\"text-lg md:text-7xl font-normal pb-4 text-center bg-clip-text text-transparent bg-gradient-to-b from-neutral-100 to-neutral-300\">\n        {title || `Build with Aceternity UI`}\n      </p>\n      <p className=\"text-xs md:text-xl font-normal text-center text-neutral-400 mt-4 max-w-lg mx-auto\">\n        {description ||\n          `Scroll this component and see the bottom SVG come to life wow this\n        works!`}\n      </p>\n      <div className=\"w-full h-[890px] -top-60 md:-top-40  flex items-center justify-center bg-red-transparent absolute \">\n        <button className=\"font-bold bg-white rounded-full md:px-4 md:py-2 px-2 py-1 md:mt-24 mt-8 z-30 md:text-base text-black text-xs  w-fit mx-auto \">\n          ui.aceternity.com\n        </button>\n      </div>\n      <svg\n        width=\"1440\"\n        height=\"890\"\n        viewBox=\"0 0 1440 890\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\" absolute -top-60  md:-top-40 w-full\"\n      >\n        <motion.path\n          d=\"M0 663C145.5 663 191 666.265 269 647C326.5 630 339.5 621 397.5 566C439 531.5 455 529.5 490 523C509.664 519.348 521 503.736 538 504.236C553.591 504.236 562.429 514.739 584.66 522.749C592.042 525.408 600.2 526.237 607.356 523.019C624.755 515.195 641.446 496.324 657 496.735C673.408 496.735 693.545 519.572 712.903 526.769C718.727 528.934 725.184 528.395 730.902 525.965C751.726 517.115 764.085 497.106 782 496.735C794.831 496.47 804.103 508.859 822.469 518.515C835.13 525.171 850.214 526.815 862.827 520.069C875.952 513.049 889.748 502.706 903.5 503.736C922.677 505.171 935.293 510.562 945.817 515.673C954.234 519.76 963.095 522.792 972.199 524.954C996.012 530.611 1007.42 534.118 1034 549C1077.5 573.359 1082.5 594.5 1140 629C1206 670 1328.5 662.5 1440 662.5\"\n          stroke=\"#FFB7C5\"\n          strokeWidth=\"2\"\n          fill=\"none\"\n          initial={{\n            pathLength: 0,\n          }}\n          style={{\n            pathLength: pathLengths[0],\n          }}\n          transition={transition}\n        />\n        <motion.path\n          d=\"M0 587.5C147 587.5 277 587.5 310 573.5C348 563 392.5 543.5 408 535C434 523.5 426 526.235 479 515.235C494 512.729 523 510.435 534.5 512.735C554.5 516.735 555.5 523.235 576 523.735C592 523.735 616 496.735 633 497.235C648.671 497.235 661.31 515.052 684.774 524.942C692.004 527.989 700.2 528.738 707.349 525.505C724.886 517.575 741.932 498.33 757.5 498.742C773.864 498.742 791.711 520.623 810.403 527.654C816.218 529.841 822.661 529.246 828.451 526.991C849.246 518.893 861.599 502.112 879.5 501.742C886.47 501.597 896.865 506.047 907.429 510.911C930.879 521.707 957.139 519.639 982.951 520.063C1020.91 520.686 1037.5 530.797 1056.5 537C1102.24 556.627 1116.5 570.704 1180.5 579.235C1257.5 589.5 1279 587 1440 588\"\n          stroke=\"#FFDDB7\"\n          strokeWidth=\"2\"\n          fill=\"none\"\n          initial={{\n            pathLength: 0,\n          }}\n          style={{\n            pathLength: pathLengths[1],\n          }}\n          transition={transition}\n        />\n        <motion.path\n          d=\"M0 514C147.5 514.333 294.5 513.735 380.5 513.735C405.976 514.94 422.849 515.228 436.37 515.123C477.503 514.803 518.631 506.605 559.508 511.197C564.04 511.706 569.162 512.524 575 513.735C588 516.433 616 521.702 627.5 519.402C647.5 515.402 659 499.235 680.5 499.235C700.5 499.235 725 529.235 742 528.735C757.654 528.735 768.77 510.583 791.793 500.59C798.991 497.465 807.16 496.777 814.423 499.745C832.335 507.064 850.418 524.648 866 524.235C882.791 524.235 902.316 509.786 921.814 505.392C926.856 504.255 932.097 504.674 937.176 505.631C966.993 511.248 970.679 514.346 989.5 514.735C1006.3 515.083 1036.5 513.235 1055.5 513.235C1114.5 513.235 1090.5 513.235 1124 513.235C1177.5 513.235 1178.99 514.402 1241 514.402C1317.5 514.402 1274.5 512.568 1440 513.235\"\n          stroke=\"#B1C5FF\"\n          strokeWidth=\"2\"\n          fill=\"none\"\n          initial={{\n            pathLength: 0,\n          }}\n          style={{\n            pathLength: pathLengths[2],\n          }}\n          transition={transition}\n        />\n        <motion.path\n          d=\"M0 438.5C150.5 438.5 261 438.318 323.5 456.5C351 464.5 387.517 484.001 423.5 494.5C447.371 501.465 472 503.735 487 507.735C503.786 512.212 504.5 516.808 523 518.735C547 521.235 564.814 501.235 584.5 501.235C604.5 501.235 626 529.069 643 528.569C658.676 528.569 672.076 511.63 695.751 501.972C703.017 499.008 711.231 498.208 718.298 501.617C735.448 509.889 751.454 529.98 767 529.569C783.364 529.569 801.211 507.687 819.903 500.657C825.718 498.469 832.141 499.104 837.992 501.194C859.178 508.764 873.089 523.365 891 523.735C907.8 524.083 923 504.235 963 506.735C1034.5 506.735 1047.5 492.68 1071 481.5C1122.5 457 1142.23 452.871 1185 446.5C1255.5 436 1294 439 1439.5 439\"\n          stroke=\"#4FABFF\"\n          strokeWidth=\"2\"\n          fill=\"none\"\n          initial={{\n            pathLength: 0,\n          }}\n          style={{\n            pathLength: pathLengths[3],\n          }}\n          transition={transition}\n        />\n        <motion.path\n          d=\"M0.5 364C145.288 362.349 195 361.5 265.5 378C322 391.223 399.182 457.5 411 467.5C424.176 478.649 456.916 491.677 496.259 502.699C498.746 503.396 501.16 504.304 503.511 505.374C517.104 511.558 541.149 520.911 551.5 521.236C571.5 521.236 590 498.736 611.5 498.736C631.5 498.736 652.5 529.236 669.5 528.736C685.171 528.736 697.81 510.924 721.274 501.036C728.505 497.988 736.716 497.231 743.812 500.579C761.362 508.857 778.421 529.148 794 528.736C810.375 528.736 829.35 508.68 848.364 502.179C854.243 500.169 860.624 500.802 866.535 502.718C886.961 509.338 898.141 519.866 916 520.236C932.8 520.583 934.5 510.236 967.5 501.736C1011.5 491 1007.5 493.5 1029.5 480C1069.5 453.5 1072 440.442 1128.5 403.5C1180.5 369.5 1275 360.374 1439 364\"\n          stroke=\"#076EFF\"\n          strokeWidth=\"2\"\n          fill=\"none\"\n          initial={{\n            pathLength: 0,\n          }}\n          style={{\n            pathLength: pathLengths[4],\n          }}\n          transition={transition}\n        />\n \n        {/* Gaussian blur for the background paths */}\n \n        <path\n          d=\"M0 663C145.5 663 191 666.265 269 647C326.5 630 339.5 621 397.5 566C439 531.5 455 529.5 490 523C509.664 519.348 521 503.736 538 504.236C553.591 504.236 562.429 514.739 584.66 522.749C592.042 525.408 600.2 526.237 607.356 523.019C624.755 515.195 641.446 496.324 657 496.735C673.408 496.735 693.545 519.572 712.903 526.769C718.727 528.934 725.184 528.395 730.902 525.965C751.726 517.115 764.085 497.106 782 496.735C794.831 496.47 804.103 508.859 822.469 518.515C835.13 525.171 850.214 526.815 862.827 520.069C875.952 513.049 889.748 502.706 903.5 503.736C922.677 505.171 935.293 510.562 945.817 515.673C954.234 519.76 963.095 522.792 972.199 524.954C996.012 530.611 1007.42 534.118 1034 549C1077.5 573.359 1082.5 594.5 1140 629C1206 670 1328.5 662.5 1440 662.5\"\n          stroke=\"#FFB7C5\"\n          strokeWidth=\"2\"\n          fill=\"none\"\n          pathLength={1}\n          filter=\"url(#blurMe)\"\n        />\n        <path\n          d=\"M0 587.5C147 587.5 277 587.5 310 573.5C348 563 392.5 543.5 408 535C434 523.5 426 526.235 479 515.235C494 512.729 523 510.435 534.5 512.735C554.5 516.735 555.5 523.235 576 523.735C592 523.735 616 496.735 633 497.235C648.671 497.235 661.31 515.052 684.774 524.942C692.004 527.989 700.2 528.738 707.349 525.505C724.886 517.575 741.932 498.33 757.5 498.742C773.864 498.742 791.711 520.623 810.403 527.654C816.218 529.841 822.661 529.246 828.451 526.991C849.246 518.893 861.599 502.112 879.5 501.742C886.47 501.597 896.865 506.047 907.429 510.911C930.879 521.707 957.139 519.639 982.951 520.063C1020.91 520.686 1037.5 530.797 1056.5 537C1102.24 556.627 1116.5 570.704 1180.5 579.235C1257.5 589.5 1279 587 1440 588\"\n          stroke=\"#FFDDB7\"\n          strokeWidth=\"2\"\n          fill=\"none\"\n          pathLength={1}\n          filter=\"url(#blurMe)\"\n        />\n        <path\n          d=\"M0 514C147.5 514.333 294.5 513.735 380.5 513.735C405.976 514.94 422.849 515.228 436.37 515.123C477.503 514.803 518.631 506.605 559.508 511.197C564.04 511.706 569.162 512.524 575 513.735C588 516.433 616 521.702 627.5 519.402C647.5 515.402 659 499.235 680.5 499.235C700.5 499.235 725 529.235 742 528.735C757.654 528.735 768.77 510.583 791.793 500.59C798.991 497.465 807.16 496.777 814.423 499.745C832.335 507.064 850.418 524.648 866 524.235C882.791 524.235 902.316 509.786 921.814 505.392C926.856 504.255 932.097 504.674 937.176 505.631C966.993 511.248 970.679 514.346 989.5 514.735C1006.3 515.083 1036.5 513.235 1055.5 513.235C1114.5 513.235 1090.5 513.235 1124 513.235C1177.5 513.235 1178.99 514.402 1241 514.402C1317.5 514.402 1274.5 512.568 1440 513.235\"\n          stroke=\"#B1C5FF\"\n          strokeWidth=\"2\"\n          fill=\"none\"\n          pathLength={1}\n          filter=\"url(#blurMe)\"\n        />\n        <path\n          d=\"M0 438.5C150.5 438.5 261 438.318 323.5 456.5C351 464.5 387.517 484.001 423.5 494.5C447.371 501.465 472 503.735 487 507.735C503.786 512.212 504.5 516.808 523 518.735C547 521.235 564.814 501.235 584.5 501.235C604.5 501.235 626 529.069 643 528.569C658.676 528.569 672.076 511.63 695.751 501.972C703.017 499.008 711.231 498.208 718.298 501.617C735.448 509.889 751.454 529.98 767 529.569C783.364 529.569 801.211 507.687 819.903 500.657C825.718 498.469 832.141 499.104 837.992 501.194C859.178 508.764 873.089 523.365 891 523.735C907.8 524.083 923 504.235 963 506.735C1034.5 506.735 1047.5 492.68 1071 481.5C1122.5 457 1142.23 452.871 1185 446.5C1255.5 436 1294 439 1439.5 439\"\n          stroke=\"#4FABFF\"\n          strokeWidth=\"2\"\n          fill=\"none\"\n          pathLength={1}\n          filter=\"url(#blurMe)\"\n        />\n        <path\n          d=\"M0.5 364C145.288 362.349 195 361.5 265.5 378C322 391.223 399.182 457.5 411 467.5C424.176 478.649 456.916 491.677 496.259 502.699C498.746 503.396 501.16 504.304 503.511 505.374C517.104 511.558 541.149 520.911 551.5 521.236C571.5 521.236 590 498.736 611.5 498.736C631.5 498.736 652.5 529.236 669.5 528.736C685.171 528.736 697.81 510.924 721.274 501.036C728.505 497.988 736.716 497.231 743.812 500.579C761.362 508.857 778.421 529.148 794 528.736C810.375 528.736 829.35 508.68 848.364 502.179C854.243 500.169 860.624 500.802 866.535 502.718C886.961 509.338 898.141 519.866 916 520.236C932.8 520.583 934.5 510.236 967.5 501.736C1011.5 491 1007.5 493.5 1029.5 480C1069.5 453.5 1072 440.442 1128.5 403.5C1180.5 369.5 1275 360.374 1439 364\"\n          stroke=\"#076EFF\"\n          strokeWidth=\"2\"\n          fill=\"none\"\n          pathLength={1}\n          filter=\"url(#blurMe)\"\n        />\n \n        <defs>\n          <filter id=\"blurMe\">\n            <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"5\" />\n          </filter>\n        </defs>\n      </svg>\n    </div>\n  );\n};\nCopy\nExpand\nProps\nProp\tType\tDescription\npathLengths\tMotionValue[]\tAn array of MotionValue objects used to animate the SVG paths.\ntitle\tstring (optional)\tThe title to be displayed. If not provided, defaults to Build with Aceternity UI.\ndescription\tstring (optional)\tThe description to be displayed. If not provided, defaults to a predefined string.\nclassName\tstring (optional)\tAdditional CSS classes that can be applied to the component.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Glowing Background Stars Card",
    "url": "https://ui.aceternity.com/components/glowing-stars-effect",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nGlowing Background Stars Card\n\nCard background stars that animate on hover and animate anyway\n\nHero\nCard\nSection\nSpecial\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/glowing-stars.tsx\n\n\"use client\";\n \nimport React, { useEffect, useRef, useState } from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n \nexport const GlowingStarsBackgroundCard = ({\n  className,\n  children,\n}: {\n  className?: string;\n  children?: React.ReactNode;\n}) => {\n  const [mouseEnter, setMouseEnter] = useState(false);\n \n  return (\n    <div\n      onMouseEnter={() => {\n        setMouseEnter(true);\n      }}\n      onMouseLeave={() => {\n        setMouseEnter(false);\n      }}\n      className={cn(\n        \"bg-[linear-gradient(110deg,#333_0.6%,#222)] p-4 max-w-md max-h-[20rem] h-full w-full rounded-xl border border-[#eaeaea] dark:border-neutral-600\",\n        className\n      )}\n    >\n      <div className=\"flex justify-center items-center\">\n        <Illustration mouseEnter={mouseEnter} />\n      </div>\n      <div className=\"px-2 pb-6\">{children}</div>\n    </div>\n  );\n};\n \nexport const GlowingStarsDescription = ({\n  className,\n  children,\n}: {\n  className?: string;\n  children?: React.ReactNode;\n}) => {\n  return (\n    <p className={cn(\"text-base text-white max-w-[16rem]\", className)}>\n      {children}\n    </p>\n  );\n};\n \nexport const GlowingStarsTitle = ({\n  className,\n  children,\n}: {\n  className?: string;\n  children?: React.ReactNode;\n}) => {\n  return (\n    <h2 className={cn(\"font-bold text-2xl text-[#eaeaea]\", className)}>\n      {children}\n    </h2>\n  );\n};\n \nexport const Illustration = ({ mouseEnter }: { mouseEnter: boolean }) => {\n  const stars = 108;\n  const columns = 18;\n \n  const [glowingStars, setGlowingStars] = useState<number[]>([]);\n \n  const highlightedStars = useRef<number[]>([]);\n \n  useEffect(() => {\n    const interval = setInterval(() => {\n      highlightedStars.current = Array.from({ length: 5 }, () =>\n        Math.floor(Math.random() * stars)\n      );\n      setGlowingStars([...highlightedStars.current]);\n    }, 3000);\n \n    return () => clearInterval(interval);\n  }, []);\n \n  return (\n    <div\n      className=\"h-48 p-1 w-full\"\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${columns}, 1fr)`,\n        gap: `1px`,\n      }}\n    >\n      {[...Array(stars)].map((_, starIdx) => {\n        const isGlowing = glowingStars.includes(starIdx);\n        const delay = (starIdx % 10) * 0.1;\n        const staticDelay = starIdx * 0.01;\n        return (\n          <div\n            key={`matrix-col-${starIdx}}`}\n            className=\"relative flex items-center justify-center\"\n          >\n            <Star\n              isGlowing={mouseEnter ? true : isGlowing}\n              delay={mouseEnter ? staticDelay : delay}\n            />\n            {mouseEnter && <Glow delay={staticDelay} />}\n            <AnimatePresence mode=\"wait\">\n              {isGlowing && <Glow delay={delay} />}\n            </AnimatePresence>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n \nconst Star = ({ isGlowing, delay }: { isGlowing: boolean; delay: number }) => {\n  return (\n    <motion.div\n      key={delay}\n      initial={{\n        scale: 1,\n      }}\n      animate={{\n        scale: isGlowing ? [1, 1.2, 2.5, 2.2, 1.5] : 1,\n        background: isGlowing ? \"#fff\" : \"#666\",\n      }}\n      transition={{\n        duration: 2,\n        ease: \"easeInOut\",\n        delay: delay,\n      }}\n      className={cn(\"bg-[#666] h-[1px] w-[1px] rounded-full relative z-20\")}\n    ></motion.div>\n  );\n};\n \nconst Glow = ({ delay }: { delay: number }) => {\n  return (\n    <motion.div\n      initial={{\n        opacity: 0,\n      }}\n      animate={{\n        opacity: 1,\n      }}\n      transition={{\n        duration: 2,\n        ease: \"easeInOut\",\n        delay: delay,\n      }}\n      exit={{\n        opacity: 0,\n      }}\n      className=\"absolute  left-1/2 -translate-x-1/2 z-10 h-[4px] w-[4px] rounded-full bg-blue-500 blur-[1px] shadow-2xl shadow-blue-400\"\n    />\n  );\n};\nCopy\nExpand\nProps\nProp name\tType\tDescription\nclassName\tstring\tThe class name of the GlowingStars component.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Glare Card",
    "url": "https://ui.aceternity.com/components/glare-card",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nGlare Card\n\nA glare effect that happens on hover, as seen on Linear's website\n\nSpecial\nUtilities\nCard\nPreview\nCode\n\nAceternity\n\nInstallation\nCLI\nManual\nInstall util dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/glare-card.tsx\n\nimport { cn } from \"@/lib/utils\";\nimport { useRef } from \"react\";\n \nexport const GlareCard = ({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  const isPointerInside = useRef(false);\n  const refElement = useRef<HTMLDivElement>(null);\n  const state = useRef({\n    glare: {\n      x: 50,\n      y: 50,\n    },\n    background: {\n      x: 50,\n      y: 50,\n    },\n    rotate: {\n      x: 0,\n      y: 0,\n    },\n  });\n  const containerStyle = {\n    \"--m-x\": \"50%\",\n    \"--m-y\": \"50%\",\n    \"--r-x\": \"0deg\",\n    \"--r-y\": \"0deg\",\n    \"--bg-x\": \"50%\",\n    \"--bg-y\": \"50%\",\n    \"--duration\": \"300ms\",\n    \"--foil-size\": \"100%\",\n    \"--opacity\": \"0\",\n    \"--radius\": \"48px\",\n    \"--easing\": \"ease\",\n    \"--transition\": \"var(--duration) var(--easing)\",\n  } as any;\n \n  const backgroundStyle = {\n    \"--step\": \"5%\",\n    \"--foil-svg\": `url(\"data:image/svg+xml,%3Csvg width='26' height='26' viewBox='0 0 26 26' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M2.99994 3.419C2.99994 3.419 21.6142 7.43646 22.7921 12.153C23.97 16.8695 3.41838 23.0306 3.41838 23.0306' stroke='white' stroke-width='5' stroke-miterlimit='3.86874' stroke-linecap='round' style='mix-blend-mode:darken'/%3E%3C/svg%3E\")`,\n    \"--pattern\": \"var(--foil-svg) center/100% no-repeat\",\n    \"--rainbow\":\n      \"repeating-linear-gradient( 0deg,rgb(255,119,115) calc(var(--step) * 1),rgba(255,237,95,1) calc(var(--step) * 2),rgba(168,255,95,1) calc(var(--step) * 3),rgba(131,255,247,1) calc(var(--step) * 4),rgba(120,148,255,1) calc(var(--step) * 5),rgb(216,117,255) calc(var(--step) * 6),rgb(255,119,115) calc(var(--step) * 7) ) 0% var(--bg-y)/200% 700% no-repeat\",\n    \"--diagonal\":\n      \"repeating-linear-gradient( 128deg,#0e152e 0%,hsl(180,10%,60%) 3.8%,hsl(180,10%,60%) 4.5%,hsl(180,10%,60%) 5.2%,#0e152e 10%,#0e152e 12% ) var(--bg-x) var(--bg-y)/300% no-repeat\",\n    \"--shade\":\n      \"radial-gradient( farthest-corner circle at var(--m-x) var(--m-y),rgba(255,255,255,0.1) 12%,rgba(255,255,255,0.15) 20%,rgba(255,255,255,0.25) 120% ) var(--bg-x) var(--bg-y)/300% no-repeat\",\n    backgroundBlendMode: \"hue, hue, hue, overlay\",\n  };\n \n  const updateStyles = () => {\n    if (refElement.current) {\n      console.log(state.current);\n      const { background, rotate, glare } = state.current;\n      refElement.current?.style.setProperty(\"--m-x\", `${glare.x}%`);\n      refElement.current?.style.setProperty(\"--m-y\", `${glare.y}%`);\n      refElement.current?.style.setProperty(\"--r-x\", `${rotate.x}deg`);\n      refElement.current?.style.setProperty(\"--r-y\", `${rotate.y}deg`);\n      refElement.current?.style.setProperty(\"--bg-x\", `${background.x}%`);\n      refElement.current?.style.setProperty(\"--bg-y\", `${background.y}%`);\n    }\n  };\n  return (\n    <div\n      style={containerStyle}\n      className=\"relative isolate [contain:layout_style] [perspective:600px] transition-transform duration-[var(--duration)] ease-[var(--easing)] delay-[var(--delay)] will-change-transform w-[320px] [aspect-ratio:17/21]\"\n      ref={refElement}\n      onPointerMove={(event) => {\n        const rotateFactor = 0.4;\n        const rect = event.currentTarget.getBoundingClientRect();\n        const position = {\n          x: event.clientX - rect.left,\n          y: event.clientY - rect.top,\n        };\n        const percentage = {\n          x: (100 / rect.width) * position.x,\n          y: (100 / rect.height) * position.y,\n        };\n        const delta = {\n          x: percentage.x - 50,\n          y: percentage.y - 50,\n        };\n \n        const { background, rotate, glare } = state.current;\n        background.x = 50 + percentage.x / 4 - 12.5;\n        background.y = 50 + percentage.y / 3 - 16.67;\n        rotate.x = -(delta.x / 3.5);\n        rotate.y = delta.y / 2;\n        rotate.x *= rotateFactor;\n        rotate.y *= rotateFactor;\n        glare.x = percentage.x;\n        glare.y = percentage.y;\n \n        updateStyles();\n      }}\n      onPointerEnter={() => {\n        isPointerInside.current = true;\n        if (refElement.current) {\n          setTimeout(() => {\n            if (isPointerInside.current) {\n              refElement.current?.style.setProperty(\"--duration\", \"0s\");\n            }\n          }, 300);\n        }\n      }}\n      onPointerLeave={() => {\n        isPointerInside.current = false;\n        if (refElement.current) {\n          refElement.current.style.removeProperty(\"--duration\");\n          refElement.current?.style.setProperty(\"--r-x\", `0deg`);\n          refElement.current?.style.setProperty(\"--r-y\", `0deg`);\n        }\n      }}\n    >\n      <div className=\"h-full grid will-change-transform origin-center transition-transform duration-[var(--duration)] ease-[var(--easing)] delay-[var(--delay)] [transform:rotateY(var(--r-x))_rotateX(var(--r-y))] rounded-[var(--radius)] border border-slate-800 hover:[--opacity:0.6] hover:[--duration:200ms] hover:[--easing:linear] hover:filter-none overflow-hidden\">\n        <div className=\"w-full h-full grid [grid-area:1/1] mix-blend-soft-light [clip-path:inset(0_0_0_0_round_var(--radius))]\">\n          <div className={cn(\"h-full w-full bg-slate-950\", className)}>\n            {children}\n          </div>\n        </div>\n        <div className=\"w-full h-full grid [grid-area:1/1] mix-blend-soft-light [clip-path:inset(0_0_1px_0_round_var(--radius))] opacity-[var(--opacity)] transition-opacity transition-background duration-[var(--duration)] ease-[var(--easing)] delay-[var(--delay)] will-change-background [background:radial-gradient(farthest-corner_circle_at_var(--m-x)_var(--m-y),_rgba(255,255,255,0.8)_10%,_rgba(255,255,255,0.65)_20%,_rgba(255,255,255,0)_90%)]\" />\n        <div\n          className=\"w-full h-full grid [grid-area:1/1] mix-blend-color-dodge opacity-[var(--opacity)] will-change-background transition-opacity [clip-path:inset(0_0_1px_0_round_var(--radius))] [background-blend-mode:hue_hue_hue_overlay] [background:var(--pattern),_var(--rainbow),_var(--diagonal),_var(--shade)] relative after:content-[''] after:grid-area-[inherit] after:bg-repeat-[inherit] after:bg-attachment-[inherit] after:bg-origin-[inherit] after:bg-clip-[inherit] after:bg-[inherit] after:mix-blend-exclusion after:[background-size:var(--foil-size),_200%_400%,_800%,_200%] after:[background-position:center,_0%_var(--bg-y),_calc(var(--bg-x)*_-1)_calc(var(--bg-y)*_-1),_var(--bg-x)_var(--bg-y)] after:[background-blend-mode:soft-light,_hue,_hard-light]\"\n          style={{ ...backgroundStyle }}\n        />\n      </div>\n    </div>\n  );\n};\nCopy\nExpand\nExamples\nPreview\nCode\n\nThe greatest trick\n\nThe greatest trick the devil ever pulled was to convince the world that he didn't exist.\n\nProps\nProp Name\tType\tDescription\tRequired\nchildren\tReact.ReactNode\tThe content to be displayed inside the card.\tYes\nclassName\tstring\tAdditional CSS class names to apply to the card.\tNo\n\nThis component is inspired by Linear's customers page\n\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "GitHub Globe",
    "url": "https://ui.aceternity.com/components/github-globe",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nGitHub Globe\n\nA globe animation as seen on GitHub's homepage. Interactive and customizable.\n\nHero\nCard\nSection\nProduct\nSpecial\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall util dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nInstall Globe dependencies\nnpm i three three-globe @react-three/fiber @react-three/drei\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the globe json\n\nDownload the globe.json file from this URL and paste it in data/globe.json.\n\nCopy the source code\n\ncomponents/ui/globe.tsx\n\n\"use client\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { Color, Scene, Fog, PerspectiveCamera, Vector3 } from \"three\";\nimport ThreeGlobe from \"three-globe\";\nimport { useThree, Object3DNode, Canvas, extend } from \"@react-three/fiber\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport countries from \"@/data/globe.json\";\ndeclare module \"@react-three/fiber\" {\n  interface ThreeElements {\n    threeGlobe: Object3DNode<ThreeGlobe, typeof ThreeGlobe>;\n  }\n}\n \nextend({ ThreeGlobe });\n \nconst RING_PROPAGATION_SPEED = 3;\nconst aspect = 1.2;\nconst cameraZ = 300;\n \ntype Position = {\n  order: number;\n  startLat: number;\n  startLng: number;\n  endLat: number;\n  endLng: number;\n  arcAlt: number;\n  color: string;\n};\n \nexport type GlobeConfig = {\n  pointSize?: number;\n  globeColor?: string;\n  showAtmosphere?: boolean;\n  atmosphereColor?: string;\n  atmosphereAltitude?: number;\n  emissive?: string;\n  emissiveIntensity?: number;\n  shininess?: number;\n  polygonColor?: string;\n  ambientLight?: string;\n  directionalLeftLight?: string;\n  directionalTopLight?: string;\n  pointLight?: string;\n  arcTime?: number;\n  arcLength?: number;\n  rings?: number;\n  maxRings?: number;\n  initialPosition?: {\n    lat: number;\n    lng: number;\n  };\n  autoRotate?: boolean;\n  autoRotateSpeed?: number;\n};\n \ninterface WorldProps {\n  globeConfig: GlobeConfig;\n  data: Position[];\n}\n \nlet numbersOfRings = [0];\n \nexport function Globe({ globeConfig, data }: WorldProps) {\n  const [globeData, setGlobeData] = useState<\n    | {\n        size: number;\n        order: number;\n        color: (t: number) => string;\n        lat: number;\n        lng: number;\n      }[]\n    | null\n  >(null);\n \n  const globeRef = useRef<ThreeGlobe | null>(null);\n \n  const defaultProps = {\n    pointSize: 1,\n    atmosphereColor: \"#ffffff\",\n    showAtmosphere: true,\n    atmosphereAltitude: 0.1,\n    polygonColor: \"rgba(255,255,255,0.7)\",\n    globeColor: \"#1d072e\",\n    emissive: \"#000000\",\n    emissiveIntensity: 0.1,\n    shininess: 0.9,\n    arcTime: 2000,\n    arcLength: 0.9,\n    rings: 1,\n    maxRings: 3,\n    ...globeConfig,\n  };\n \n  useEffect(() => {\n    if (globeRef.current) {\n      _buildData();\n      _buildMaterial();\n    }\n  }, [globeRef.current]);\n \n  const _buildMaterial = () => {\n    if (!globeRef.current) return;\n \n    const globeMaterial = globeRef.current.globeMaterial() as unknown as {\n      color: Color;\n      emissive: Color;\n      emissiveIntensity: number;\n      shininess: number;\n    };\n    globeMaterial.color = new Color(globeConfig.globeColor);\n    globeMaterial.emissive = new Color(globeConfig.emissive);\n    globeMaterial.emissiveIntensity = globeConfig.emissiveIntensity || 0.1;\n    globeMaterial.shininess = globeConfig.shininess || 0.9;\n  };\n \n  const _buildData = () => {\n    const arcs = data;\n    let points = [];\n    for (let i = 0; i < arcs.length; i++) {\n      const arc = arcs[i];\n      const rgb = hexToRgb(arc.color) as { r: number; g: number; b: number };\n      points.push({\n        size: defaultProps.pointSize,\n        order: arc.order,\n        color: (t: number) => `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${1 - t})`,\n        lat: arc.startLat,\n        lng: arc.startLng,\n      });\n      points.push({\n        size: defaultProps.pointSize,\n        order: arc.order,\n        color: (t: number) => `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${1 - t})`,\n        lat: arc.endLat,\n        lng: arc.endLng,\n      });\n    }\n \n    // remove duplicates for same lat and lng\n    const filteredPoints = points.filter(\n      (v, i, a) =>\n        a.findIndex((v2) =>\n          [\"lat\", \"lng\"].every(\n            (k) => v2[k as \"lat\" | \"lng\"] === v[k as \"lat\" | \"lng\"]\n          )\n        ) === i\n    );\n \n    setGlobeData(filteredPoints);\n  };\n \n  useEffect(() => {\n    if (globeRef.current && globeData) {\n      globeRef.current\n        .hexPolygonsData(countries.features)\n        .hexPolygonResolution(3)\n        .hexPolygonMargin(0.7)\n        .showAtmosphere(defaultProps.showAtmosphere)\n        .atmosphereColor(defaultProps.atmosphereColor)\n        .atmosphereAltitude(defaultProps.atmosphereAltitude)\n        .hexPolygonColor((e) => {\n          return defaultProps.polygonColor;\n        });\n      startAnimation();\n    }\n  }, [globeData]);\n \n  const startAnimation = () => {\n    if (!globeRef.current || !globeData) return;\n \n    globeRef.current\n      .arcsData(data)\n      .arcStartLat((d) => (d as { startLat: number }).startLat * 1)\n      .arcStartLng((d) => (d as { startLng: number }).startLng * 1)\n      .arcEndLat((d) => (d as { endLat: number }).endLat * 1)\n      .arcEndLng((d) => (d as { endLng: number }).endLng * 1)\n      .arcColor((e: any) => (e as { color: string }).color)\n      .arcAltitude((e) => {\n        return (e as { arcAlt: number }).arcAlt * 1;\n      })\n      .arcStroke((e) => {\n        return [0.32, 0.28, 0.3][Math.round(Math.random() * 2)];\n      })\n      .arcDashLength(defaultProps.arcLength)\n      .arcDashInitialGap((e) => (e as { order: number }).order * 1)\n      .arcDashGap(15)\n      .arcDashAnimateTime((e) => defaultProps.arcTime);\n \n    globeRef.current\n      .pointsData(data)\n      .pointColor((e) => (e as { color: string }).color)\n      .pointsMerge(true)\n      .pointAltitude(0.0)\n      .pointRadius(2);\n \n    globeRef.current\n      .ringsData([])\n      .ringColor((e: any) => (t: any) => e.color(t))\n      .ringMaxRadius(defaultProps.maxRings)\n      .ringPropagationSpeed(RING_PROPAGATION_SPEED)\n      .ringRepeatPeriod(\n        (defaultProps.arcTime * defaultProps.arcLength) / defaultProps.rings\n      );\n  };\n \n  useEffect(() => {\n    if (!globeRef.current || !globeData) return;\n \n    const interval = setInterval(() => {\n      if (!globeRef.current || !globeData) return;\n      numbersOfRings = genRandomNumbers(\n        0,\n        data.length,\n        Math.floor((data.length * 4) / 5)\n      );\n \n      globeRef.current.ringsData(\n        globeData.filter((d, i) => numbersOfRings.includes(i))\n      );\n    }, 2000);\n \n    return () => {\n      clearInterval(interval);\n    };\n  }, [globeRef.current, globeData]);\n \n  return (\n    <>\n      <threeGlobe ref={globeRef} />\n    </>\n  );\n}\n \nexport function WebGLRendererConfig() {\n  const { gl, size } = useThree();\n \n  useEffect(() => {\n    gl.setPixelRatio(window.devicePixelRatio);\n    gl.setSize(size.width, size.height);\n    gl.setClearColor(0xffaaff, 0);\n  }, []);\n \n  return null;\n}\n \nexport function World(props: WorldProps) {\n  const { globeConfig } = props;\n  const scene = new Scene();\n  scene.fog = new Fog(0xffffff, 400, 2000);\n  return (\n    <Canvas scene={scene} camera={new PerspectiveCamera(50, aspect, 180, 1800)}>\n      <WebGLRendererConfig />\n      <ambientLight color={globeConfig.ambientLight} intensity={0.6} />\n      <directionalLight\n        color={globeConfig.directionalLeftLight}\n        position={new Vector3(-400, 100, 400)}\n      />\n      <directionalLight\n        color={globeConfig.directionalTopLight}\n        position={new Vector3(-200, 500, 200)}\n      />\n      <pointLight\n        color={globeConfig.pointLight}\n        position={new Vector3(-200, 500, 200)}\n        intensity={0.8}\n      />\n      <Globe {...props} />\n      <OrbitControls\n        enablePan={false}\n        enableZoom={false}\n        minDistance={cameraZ}\n        maxDistance={cameraZ}\n        autoRotateSpeed={1}\n        autoRotate={true}\n        minPolarAngle={Math.PI / 3.5}\n        maxPolarAngle={Math.PI - Math.PI / 3}\n      />\n    </Canvas>\n  );\n}\n \nexport function hexToRgb(hex: string) {\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n \n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result\n    ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n      }\n    : null;\n}\n \nexport function genRandomNumbers(min: number, max: number, count: number) {\n  const arr = [];\n  while (arr.length < count) {\n    const r = Math.floor(Math.random() * (max - min)) + min;\n    if (arr.indexOf(r) === -1) arr.push(r);\n  }\n \n  return arr;\n}\nCopy\nExpand\nProps\nGlobeConfig Props\nProp\tType\tDescription\npointSize\tnumber\tOptional. Size of the points on the globe.\nglobeColor\tstring\tOptional. Color of the globe.\nshowAtmosphere\tboolean\tOptional. Whether to show the atmosphere layer.\natmosphereColor\tstring\tOptional. Color of the atmosphere.\natmosphereAltitude\tnumber\tOptional. Altitude of the atmosphere layer.\nemissive\tstring\tOptional. Emissive color of the globe material.\nemissiveIntensity\tnumber\tOptional. Intensity of the emissive color.\nshininess\tnumber\tOptional. Shininess of the globe material.\npolygonColor\tstring\tOptional. Color of the polygons on the globe.\nambientLight\tstring\tOptional. Color of the ambient light in the scene.\ndirectionalLeftLight\tstring\tOptional. Color of the directional light from the left.\ndirectionalTopLight\tstring\tOptional. Color of the directional light from the top.\npointLight\tstring\tOptional. Color of the point light in the scene.\narcTime\tnumber\tOptional. Animation time for the arcs.\narcLength\tnumber\tOptional. Length of the dash in the arc animations.\nrings\tnumber\tOptional. Number of rings to display initially.\nmaxRings\tnumber\tOptional. Maximum number of rings that can be displayed.\ninitialPosition\tObject\tOptional. Initial position of the globe. Contains lat and lng fields.\nautoRotate\tboolean\tOptional. Whether the globe should auto-rotate.\nautoRotateSpeed\tnumber\tOptional. Speed of the auto-rotation.\nWorldProps Props\nProp\tType\tDescription\nglobeConfig\tGlobeConfig\tConfiguration options for the globe.\ndata\tPosition[]\tArray of positions to display arcs between.\nPosition Type\nProp\tType\tDescription\norder\tnumber\tOrder of the arc.\nstartLat\tnumber\tStarting latitude of the arc.\nstartLng\tnumber\tStarting longitude of the arc.\nendLat\tnumber\tEnding latitude of the arc.\nendLng\tnumber\tEnding longitude of the arc.\narcAlt\tnumber\tAltitude of the arc.\ncolor\tstring\tColor of the arc.\n\nInspiration for this globe is taken from GitHub's Homepage and this video\n\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Focus Cards",
    "url": "https://ui.aceternity.com/components/focus-cards",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nFocus Cards\n\nHover over the card to focus on it, blurring the rest of the cards.\n\nCards\nUi\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge @tabler/icons-react\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/focus-cards.tsx\n\n\"use client\";\nimport Image from \"next/image\";\nimport React, { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\n \nexport const Card = React.memo(\n  ({\n    card,\n    index,\n    hovered,\n    setHovered,\n  }: {\n    card: any;\n    index: number;\n    hovered: number | null;\n    setHovered: React.Dispatch<React.SetStateAction<number | null>>;\n  }) => (\n    <div\n      onMouseEnter={() => setHovered(index)}\n      onMouseLeave={() => setHovered(null)}\n      className={cn(\n        \"rounded-lg relative bg-gray-100 dark:bg-neutral-900 overflow-hidden h-60 md:h-96 w-full transition-all duration-300 ease-out\",\n        hovered !== null && hovered !== index && \"blur-sm scale-[0.98]\"\n      )}\n    >\n      <Image\n        src={card.src}\n        alt={card.title}\n        fill\n        className=\"object-cover absolute inset-0\"\n      />\n      <div\n        className={cn(\n          \"absolute inset-0 bg-black/50 flex items-end py-8 px-4 transition-opacity duration-300\",\n          hovered === index ? \"opacity-100\" : \"opacity-0\"\n        )}\n      >\n        <div className=\"text-xl md:text-2xl font-medium bg-clip-text text-transparent bg-gradient-to-b from-neutral-50 to-neutral-200\">\n          {card.title}\n        </div>\n      </div>\n    </div>\n  )\n);\n \nCard.displayName = \"Card\";\n \ntype Card = {\n  title: string;\n  src: string;\n};\n \nexport function FocusCards({ cards }: { cards: Card[] }) {\n  const [hovered, setHovered] = useState<number | null>(null);\n \n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-10 max-w-5xl mx-auto md:px-8 w-full\">\n      {cards.map((card, index) => (\n        <Card\n          key={card.title}\n          card={card}\n          index={index}\n          hovered={hovered}\n          setHovered={setHovered}\n        />\n      ))}\n    </div>\n  );\n}\nCopy\nExpand\nProps\nComponent\tProp\tType\tDescription\nCard\tcard\tCard\tThe card object containing title and src properties\nCard\tindex\tnumber\tThe index of the card in the array\nCard\thovered\tnumber | null\tThe index of the currently hovered card, or null if no card is hovered\nCard\tsetHovered\tReact.Dispatch<React.SetStateAction<number | null>>\tFunction to update the hovered state\nFocusCards\tcards\tCard[]\tAn array of Card objects to be rendered\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Following Pointer",
    "url": "https://ui.aceternity.com/components/following-pointer",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nFollowing Pointer\n\nA custom pointer that follows mouse arrow and animates in pointer and content.\n\nFeature\nUtility\nSpecial\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/following-pointer.tsx\n\n// Core component that receives mouse positions and renders pointer and content\n \nimport React, { useEffect, useState } from \"react\";\n \nimport { motion, AnimatePresence, useMotionValue } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n \nexport const FollowerPointerCard = ({\n  children,\n  className,\n  title,\n}: {\n  children: React.ReactNode;\n  className?: string;\n  title?: string | React.ReactNode;\n}) => {\n  const x = useMotionValue(0);\n  const y = useMotionValue(0);\n  const ref = React.useRef<HTMLDivElement>(null);\n  const [rect, setRect] = useState<DOMRect | null>(null);\n  const [isInside, setIsInside] = useState<boolean>(false); // Add this line\n \n  useEffect(() => {\n    if (ref.current) {\n      setRect(ref.current.getBoundingClientRect());\n    }\n  }, []);\n \n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (rect) {\n      const scrollX = window.scrollX;\n      const scrollY = window.scrollY;\n      x.set(e.clientX - rect.left + scrollX);\n      y.set(e.clientY - rect.top + scrollY);\n    }\n  };\n  const handleMouseLeave = () => {\n    setIsInside(false);\n  };\n \n  const handleMouseEnter = () => {\n    setIsInside(true);\n  };\n  return (\n    <div\n      onMouseLeave={handleMouseLeave}\n      onMouseEnter={handleMouseEnter}\n      onMouseMove={handleMouseMove}\n      style={{\n        cursor: \"none\",\n      }}\n      ref={ref}\n      className={cn(\"relative\", className)}\n    >\n      <AnimatePresence>\n        {isInside && <FollowPointer x={x} y={y} title={title} />}\n      </AnimatePresence>\n      {children}\n    </div>\n  );\n};\n \nexport const FollowPointer = ({\n  x,\n  y,\n  title,\n}: {\n  x: any;\n  y: any;\n  title?: string | React.ReactNode;\n}) => {\n  const colors = [\n    \"var(--sky-500)\",\n    \"var(--neutral-500)\",\n    \"var(--teal-500)\",\n    \"var(--green-500)\",\n    \"var(--blue-500)\",\n    \"var(--red-500)\",\n    \"var(--yellow-500)\",\n  ];\n  return (\n    <motion.div\n      className=\"h-4 w-4 rounded-full absolute z-50\"\n      style={{\n        top: y,\n        left: x,\n        pointerEvents: \"none\",\n      }}\n      initial={{\n        scale: 1,\n        opacity: 1,\n      }}\n      animate={{\n        scale: 1,\n        opacity: 1,\n      }}\n      exit={{\n        scale: 0,\n        opacity: 0,\n      }}\n    >\n      <svg\n        stroke=\"currentColor\"\n        fill=\"currentColor\"\n        strokeWidth=\"1\"\n        viewBox=\"0 0 16 16\"\n        className=\"h-6 w-6 text-sky-500 transform -rotate-[70deg] -translate-x-[12px] -translate-y-[10px] stroke-sky-600\"\n        height=\"1em\"\n        width=\"1em\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M14.082 2.182a.5.5 0 0 1 .103.557L8.528 15.467a.5.5 0 0 1-.917-.007L5.57 10.694.803 8.652a.5.5 0 0 1-.006-.916l12.728-5.657a.5.5 0 0 1 .556.103z\"></path>\n      </svg>\n      <motion.div\n        style={{\n          backgroundColor: colors[Math.floor(Math.random() * colors.length)],\n        }}\n        initial={{\n          scale: 0.5,\n          opacity: 0,\n        }}\n        animate={{\n          scale: 1,\n          opacity: 1,\n        }}\n        exit={{\n          scale: 0.5,\n          opacity: 0,\n        }}\n        className={\n          \"px-2 py-2 bg-neutral-200 text-white whitespace-nowrap min-w-max text-xs rounded-full\"\n        }\n      >\n        {title || `William Shakespeare`}\n      </motion.div>\n    </motion.div>\n  );\n};\nCopy\nExpand\nAdd the following code in tailwind.config.js file\nconst defaultTheme = require(\"tailwindcss/defaultTheme\");\nconst colors = require(\"tailwindcss/colors\");\nconst {\n  default: flattenColorPalette,\n} = require(\"tailwindcss/lib/util/flattenColorPalette\");\n \n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./src/**/*.{ts,tsx}\"],\n  darkMode: \"class\",\n  theme: {\n    // rest of the code\n  },\n  plugins: [\n    // rest of the code\n    addVariablesForColors,\n  ],\n};\n \n// This plugin adds each Tailwind color as a global CSS variable, e.g. var(--gray-200).\nfunction addVariablesForColors({ addBase, theme }: any) {\n  let allColors = flattenColorPalette(theme(\"colors\"));\n  let newVars = Object.fromEntries(\n    Object.entries(allColors).map(([key, val]) => [`--${key}`, val])\n  );\n \n  addBase({\n    \":root\": newVars,\n  });\n}\nCopy\nProps\nFollowerPointerCard Props\nProp name\tType\tDescription\nchildren\tReact.ReactNode\tThe content to be rendered inside the component.\nclassName\tstring (optional)\tThe class name of the FollowerPointerCard component.\ntitle\tstring or ReactNode (optional)\tThe title to be displayed on the pointer.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Floating Navbar",
    "url": "https://ui.aceternity.com/components/floating-navbar",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nFloating Navbar\n\nA sticky Navbar that hides on scroll, reveals when scrolled up.\n\nNavbar\nUtility\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/floating-navbar.tsx\n\n\"use client\";\nimport React, { useState } from \"react\";\nimport {\n  motion,\n  AnimatePresence,\n  useScroll,\n  useMotionValueEvent,\n} from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport Link from \"next/link\";\n \nexport const FloatingNav = ({\n  navItems,\n  className,\n}: {\n  navItems: {\n    name: string;\n    link: string;\n    icon?: JSX.Element;\n  }[];\n  className?: string;\n}) => {\n  const { scrollYProgress } = useScroll();\n \n  const [visible, setVisible] = useState(false);\n \n  useMotionValueEvent(scrollYProgress, \"change\", (current) => {\n    // Check if current is not undefined and is a number\n    if (typeof current === \"number\") {\n      let direction = current! - scrollYProgress.getPrevious()!;\n \n      if (scrollYProgress.get() < 0.05) {\n        setVisible(false);\n      } else {\n        if (direction < 0) {\n          setVisible(true);\n        } else {\n          setVisible(false);\n        }\n      }\n    }\n  });\n \n  return (\n    <AnimatePresence mode=\"wait\">\n      <motion.div\n        initial={{\n          opacity: 1,\n          y: -100,\n        }}\n        animate={{\n          y: visible ? 0 : -100,\n          opacity: visible ? 1 : 0,\n        }}\n        transition={{\n          duration: 0.2,\n        }}\n        className={cn(\n          \"flex max-w-fit  fixed top-10 inset-x-0 mx-auto border border-transparent dark:border-white/[0.2] rounded-full dark:bg-black bg-white shadow-[0px_2px_3px_-1px_rgba(0,0,0,0.1),0px_1px_0px_0px_rgba(25,28,33,0.02),0px_0px_0px_1px_rgba(25,28,33,0.08)] z-[5000] pr-2 pl-8 py-2  items-center justify-center space-x-4\",\n          className\n        )}\n      >\n        {navItems.map((navItem: any, idx: number) => (\n          <Link\n            key={`link=${idx}`}\n            href={navItem.link}\n            className={cn(\n              \"relative dark:text-neutral-50 items-center flex space-x-1 text-neutral-600 dark:hover:text-neutral-300 hover:text-neutral-500\"\n            )}\n          >\n            <span className=\"block sm:hidden\">{navItem.icon}</span>\n            <span className=\"hidden sm:block text-sm\">{navItem.name}</span>\n          </Link>\n        ))}\n        <button className=\"border text-sm font-medium relative border-neutral-200 dark:border-white/[0.2] text-black dark:text-white px-4 py-2 rounded-full\">\n          <span>Login</span>\n          <span className=\"absolute inset-x-0 w-1/2 mx-auto -bottom-px bg-gradient-to-r from-transparent via-blue-500 to-transparent  h-px\" />\n        </button>\n      </motion.div>\n    </AnimatePresence>\n  );\n};\nCopy\nExpand\nProps\nProp name\tType\tDescription\nclassName\tstring\tThe class name of the child component.\nnavItems\t{name: string, link: string, icon: ReactNode}\tThe navigation items you want to render in the navbar\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Floating Dock",
    "url": "https://ui.aceternity.com/components/floating-dock",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nFloating Dock\n\nA floating dock mac os style component, acts as a navigation bar.\n\nForm\nSpecial\nPreview\nCode\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge @tabler/icons-react\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/floating-dock.tsx\n\n/**\n * Note: Use position fixed according to your needs\n * Desktop navbar is better positioned at the bottom\n * Mobile navbar is better positioned at bottom right.\n **/\n \nimport { cn } from \"@/lib/utils\";\nimport { IconLayoutNavbarCollapse } from \"@tabler/icons-react\";\nimport {\n  AnimatePresence,\n  MotionValue,\n  motion,\n  useMotionValue,\n  useSpring,\n  useTransform,\n} from \"framer-motion\";\nimport Link from \"next/link\";\nimport { useRef, useState } from \"react\";\n \nexport const FloatingDock = ({\n  items,\n  desktopClassName,\n  mobileClassName,\n}: {\n  items: { title: string; icon: React.ReactNode; href: string }[];\n  desktopClassName?: string;\n  mobileClassName?: string;\n}) => {\n  return (\n    <>\n      <FloatingDockDesktop items={items} className={desktopClassName} />\n      <FloatingDockMobile items={items} className={mobileClassName} />\n    </>\n  );\n};\n \nconst FloatingDockMobile = ({\n  items,\n  className,\n}: {\n  items: { title: string; icon: React.ReactNode; href: string }[];\n  className?: string;\n}) => {\n  const [open, setOpen] = useState(false);\n  return (\n    <div className={cn(\"relative block md:hidden\", className)}>\n      <AnimatePresence>\n        {open && (\n          <motion.div\n            layoutId=\"nav\"\n            className=\"absolute bottom-full mb-2 inset-x-0 flex flex-col gap-2\"\n          >\n            {items.map((item, idx) => (\n              <motion.div\n                key={item.title}\n                initial={{ opacity: 0, y: 10 }}\n                animate={{\n                  opacity: 1,\n                  y: 0,\n                }}\n                exit={{\n                  opacity: 0,\n                  y: 10,\n                  transition: {\n                    delay: idx * 0.05,\n                  },\n                }}\n                transition={{ delay: (items.length - 1 - idx) * 0.05 }}\n              >\n                <Link\n                  href={item.href}\n                  key={item.title}\n                  className=\"h-10 w-10 rounded-full bg-gray-50 dark:bg-neutral-900 flex items-center justify-center\"\n                >\n                  <div className=\"h-4 w-4\">{item.icon}</div>\n                </Link>\n              </motion.div>\n            ))}\n          </motion.div>\n        )}\n      </AnimatePresence>\n      <button\n        onClick={() => setOpen(!open)}\n        className=\"h-10 w-10 rounded-full bg-gray-50 dark:bg-neutral-800 flex items-center justify-center\"\n      >\n        <IconLayoutNavbarCollapse className=\"h-5 w-5 text-neutral-500 dark:text-neutral-400\" />\n      </button>\n    </div>\n  );\n};\n \nconst FloatingDockDesktop = ({\n  items,\n  className,\n}: {\n  items: { title: string; icon: React.ReactNode; href: string }[];\n  className?: string;\n}) => {\n  let mouseX = useMotionValue(Infinity);\n  return (\n    <motion.div\n      onMouseMove={(e) => mouseX.set(e.pageX)}\n      onMouseLeave={() => mouseX.set(Infinity)}\n      className={cn(\n        \"mx-auto hidden md:flex h-16 gap-4 items-end  rounded-2xl bg-gray-50 dark:bg-neutral-900 px-4 pb-3\",\n        className\n      )}\n    >\n      {items.map((item) => (\n        <IconContainer mouseX={mouseX} key={item.title} {...item} />\n      ))}\n    </motion.div>\n  );\n};\n \nfunction IconContainer({\n  mouseX,\n  title,\n  icon,\n  href,\n}: {\n  mouseX: MotionValue;\n  title: string;\n  icon: React.ReactNode;\n  href: string;\n}) {\n  let ref = useRef<HTMLDivElement>(null);\n \n  let distance = useTransform(mouseX, (val) => {\n    let bounds = ref.current?.getBoundingClientRect() ?? { x: 0, width: 0 };\n \n    return val - bounds.x - bounds.width / 2;\n  });\n \n  let widthTransform = useTransform(distance, [-150, 0, 150], [40, 80, 40]);\n  let heightTransform = useTransform(distance, [-150, 0, 150], [40, 80, 40]);\n \n  let widthTransformIcon = useTransform(distance, [-150, 0, 150], [20, 40, 20]);\n  let heightTransformIcon = useTransform(\n    distance,\n    [-150, 0, 150],\n    [20, 40, 20]\n  );\n \n  let width = useSpring(widthTransform, {\n    mass: 0.1,\n    stiffness: 150,\n    damping: 12,\n  });\n  let height = useSpring(heightTransform, {\n    mass: 0.1,\n    stiffness: 150,\n    damping: 12,\n  });\n \n  let widthIcon = useSpring(widthTransformIcon, {\n    mass: 0.1,\n    stiffness: 150,\n    damping: 12,\n  });\n  let heightIcon = useSpring(heightTransformIcon, {\n    mass: 0.1,\n    stiffness: 150,\n    damping: 12,\n  });\n \n  const [hovered, setHovered] = useState(false);\n \n  return (\n    <Link href={href}>\n      <motion.div\n        ref={ref}\n        style={{ width, height }}\n        onMouseEnter={() => setHovered(true)}\n        onMouseLeave={() => setHovered(false)}\n        className=\"aspect-square rounded-full bg-gray-200 dark:bg-neutral-800 flex items-center justify-center relative\"\n      >\n        <AnimatePresence>\n          {hovered && (\n            <motion.div\n              initial={{ opacity: 0, y: 10, x: \"-50%\" }}\n              animate={{ opacity: 1, y: 0, x: \"-50%\" }}\n              exit={{ opacity: 0, y: 2, x: \"-50%\" }}\n              className=\"px-2 py-0.5 whitespace-pre rounded-md bg-gray-100 border dark:bg-neutral-800 dark:border-neutral-900 dark:text-white border-gray-200 text-neutral-700 absolute left-1/2 -translate-x-1/2 -top-8 w-fit text-xs\"\n            >\n              {title}\n            </motion.div>\n          )}\n        </AnimatePresence>\n        <motion.div\n          style={{ width: widthIcon, height: heightIcon }}\n          className=\"flex items-center justify-center\"\n        >\n          {icon}\n        </motion.div>\n      </motion.div>\n    </Link>\n  );\n}\nCopy\nExpand\nProps\nFloating Dock\nProp Name\tType\tDescription\nitems\t{ title: string; icon: React.ReactNode; href: string }[]\tArray of items to display in the dock.\ndesktopClassName\tstring\tOptional class name for the desktop dock.\nmobileClassName\tstring\tOptional class name for the mobile dock.\nFloating Dock Mobile\nProp Name\tType\tDescription\nitems\t{ title: string; icon: React.ReactNode; href: string }[]\tArray of items to display in the mobile dock.\nclassName\tstring\tOptional class name for the mobile dock.\nFloating Dock Desktop\nProp Name\tType\tDescription\nitems\t{ title: string; icon: React.ReactNode; href: string }[]\tArray of items to display in the desktop dock.\nclassName\tstring\tOptional class name for the desktop dock.\nIconContainer Component\nProp Name\tType\tDescription\nmouseX\tMotionValue\tMotion value for the mouse X position.\ntitle\tstring\tTitle of the item.\nicon\tReact.ReactNode\tIcon to display for the item.\nhref\tstring\tURL to navigate to when the item is clicked.\n\nThis component is inspired by floating dock on menu on Rauno's website and it's implementation on Build UI.\n\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "File Upload",
    "url": "https://ui.aceternity.com/components/file-upload",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nFile Upload\n\nA minimal file upload form with background grid, drag and drop, and micro interactions.\n\nForm\nSpecial\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge @tabler/icons-react react-dropzone\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/file-upload.tsx\n\nimport { cn } from \"@/lib/utils\";\nimport React, { useRef, useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { IconUpload } from \"@tabler/icons-react\";\nimport { useDropzone } from \"react-dropzone\";\n \nconst mainVariant = {\n  initial: {\n    x: 0,\n    y: 0,\n  },\n  animate: {\n    x: 20,\n    y: -20,\n    opacity: 0.9,\n  },\n};\n \nconst secondaryVariant = {\n  initial: {\n    opacity: 0,\n  },\n  animate: {\n    opacity: 1,\n  },\n};\n \nexport const FileUpload = ({\n  onChange,\n}: {\n  onChange?: (files: File[]) => void;\n}) => {\n  const [files, setFiles] = useState<File[]>([]);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n \n  const handleFileChange = (newFiles: File[]) => {\n    setFiles((prevFiles) => [...prevFiles, ...newFiles]);\n    onChange && onChange(newFiles);\n  };\n \n  const handleClick = () => {\n    fileInputRef.current?.click();\n  };\n \n  const { getRootProps, isDragActive } = useDropzone({\n    multiple: false,\n    noClick: true,\n    onDrop: handleFileChange,\n    onDropRejected: (error) => {\n      console.log(error);\n    },\n  });\n \n  return (\n    <div className=\"w-full\" {...getRootProps()}>\n      <motion.div\n        onClick={handleClick}\n        whileHover=\"animate\"\n        className=\"p-10 group/file block rounded-lg cursor-pointer w-full relative overflow-hidden\"\n      >\n        <input\n          ref={fileInputRef}\n          id=\"file-upload-handle\"\n          type=\"file\"\n          onChange={(e) => handleFileChange(Array.from(e.target.files || []))}\n          className=\"hidden\"\n        />\n        <div className=\"absolute inset-0 [mask-image:radial-gradient(ellipse_at_center,white,transparent)]\">\n          <GridPattern />\n        </div>\n        <div className=\"flex flex-col items-center justify-center\">\n          <p className=\"relative z-20 font-sans font-bold text-neutral-700 dark:text-neutral-300 text-base\">\n            Upload file\n          </p>\n          <p className=\"relative z-20 font-sans font-normal text-neutral-400 dark:text-neutral-400 text-base mt-2\">\n            Drag or drop your files here or click to upload\n          </p>\n          <div className=\"relative w-full mt-10 max-w-xl mx-auto\">\n            {files.length > 0 &&\n              files.map((file, idx) => (\n                <motion.div\n                  key={\"file\" + idx}\n                  layoutId={idx === 0 ? \"file-upload\" : \"file-upload-\" + idx}\n                  className={cn(\n                    \"relative overflow-hidden z-40 bg-white dark:bg-neutral-900 flex flex-col items-start justify-start md:h-24 p-4 mt-4 w-full mx-auto rounded-md\",\n                    \"shadow-sm\"\n                  )}\n                >\n                  <div className=\"flex justify-between w-full items-center gap-4\">\n                    <motion.p\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      layout\n                      className=\"text-base text-neutral-700 dark:text-neutral-300 truncate max-w-xs\"\n                    >\n                      {file.name}\n                    </motion.p>\n                    <motion.p\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      layout\n                      className=\"rounded-lg px-2 py-1 w-fit flex-shrink-0 text-sm text-neutral-600 dark:bg-neutral-800 dark:text-white shadow-input\"\n                    >\n                      {(file.size / (1024 * 1024)).toFixed(2)} MB\n                    </motion.p>\n                  </div>\n \n                  <div className=\"flex text-sm md:flex-row flex-col items-start md:items-center w-full mt-2 justify-between text-neutral-600 dark:text-neutral-400\">\n                    <motion.p\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      layout\n                      className=\"px-1 py-0.5 rounded-md bg-gray-100 dark:bg-neutral-800 \"\n                    >\n                      {file.type}\n                    </motion.p>\n \n                    <motion.p\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      layout\n                    >\n                      modified{\" \"}\n                      {new Date(file.lastModified).toLocaleDateString()}\n                    </motion.p>\n                  </div>\n                </motion.div>\n              ))}\n            {!files.length && (\n              <motion.div\n                layoutId=\"file-upload\"\n                variants={mainVariant}\n                transition={{\n                  type: \"spring\",\n                  stiffness: 300,\n                  damping: 20,\n                }}\n                className={cn(\n                  \"relative group-hover/file:shadow-2xl z-40 bg-white dark:bg-neutral-900 flex items-center justify-center h-32 mt-4 w-full max-w-[8rem] mx-auto rounded-md\",\n                  \"shadow-[0px_10px_50px_rgba(0,0,0,0.1)]\"\n                )}\n              >\n                {isDragActive ? (\n                  <motion.p\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    className=\"text-neutral-600 flex flex-col items-center\"\n                  >\n                    Drop it\n                    <IconUpload className=\"h-4 w-4 text-neutral-600 dark:text-neutral-400\" />\n                  </motion.p>\n                ) : (\n                  <IconUpload className=\"h-4 w-4 text-neutral-600 dark:text-neutral-300\" />\n                )}\n              </motion.div>\n            )}\n \n            {!files.length && (\n              <motion.div\n                variants={secondaryVariant}\n                className=\"absolute opacity-0 border border-dashed border-sky-400 inset-0 z-30 bg-transparent flex items-center justify-center h-32 mt-4 w-full max-w-[8rem] mx-auto rounded-md\"\n              ></motion.div>\n            )}\n          </div>\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n \nexport function GridPattern() {\n  const columns = 41;\n  const rows = 11;\n  return (\n    <div className=\"flex bg-gray-100 dark:bg-neutral-900 flex-shrink-0 flex-wrap justify-center items-center gap-x-px gap-y-px  scale-105\">\n      {Array.from({ length: rows }).map((_, row) =>\n        Array.from({ length: columns }).map((_, col) => {\n          const index = row * columns + col;\n          return (\n            <div\n              key={`${col}-${row}`}\n              className={`w-10 h-10 flex flex-shrink-0 rounded-[2px] ${\n                index % 2 === 0\n                  ? \"bg-gray-50 dark:bg-neutral-950\"\n                  : \"bg-gray-50 dark:bg-neutral-950 shadow-[0px_0px_1px_3px_rgba(255,255,255,1)_inset] dark:shadow-[0px_0px_1px_3px_rgba(0,0,0,1)_inset]\"\n              }`}\n            />\n          );\n        })\n      )}\n    </div>\n  );\n}\nCopy\nExpand\nProps\nProp Name\tType\tDefault\tDescription\nonChange\t(files: File[]) => void\tundefined\tCallback function that is called when files are uploaded or dropped.\n\nThe overall theme and initial design of this component is inspied by Natko Hasic\n\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Flip Words",
    "url": "https://ui.aceternity.com/components/flip-words",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nFlip Words\n\nA component that flips through a list of words\n\nText\nHero\nSpecial\nCall To Action\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall util dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/flip-words.tsx\n\n\"use client\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { AnimatePresence, motion, LayoutGroup } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n \nexport const FlipWords = ({\n  words,\n  duration = 3000,\n  className,\n}: {\n  words: string[];\n  duration?: number;\n  className?: string;\n}) => {\n  const [currentWord, setCurrentWord] = useState(words[0]);\n  const [isAnimating, setIsAnimating] = useState<boolean>(false);\n \n  // thanks for the fix Julian - https://github.com/Julian-AT\n  const startAnimation = useCallback(() => {\n    const word = words[words.indexOf(currentWord) + 1] || words[0];\n    setCurrentWord(word);\n    setIsAnimating(true);\n  }, [currentWord, words]);\n \n  useEffect(() => {\n    if (!isAnimating)\n      setTimeout(() => {\n        startAnimation();\n      }, duration);\n  }, [isAnimating, duration, startAnimation]);\n \n  return (\n    <AnimatePresence\n      onExitComplete={() => {\n        setIsAnimating(false);\n      }}\n    >\n      <motion.div\n        initial={{\n          opacity: 0,\n          y: 10,\n        }}\n        animate={{\n          opacity: 1,\n          y: 0,\n        }}\n        transition={{\n          type: \"spring\",\n          stiffness: 100,\n          damping: 10,\n        }}\n        exit={{\n          opacity: 0,\n          y: -40,\n          x: 40,\n          filter: \"blur(8px)\",\n          scale: 2,\n          position: \"absolute\",\n        }}\n        className={cn(\n          \"z-10 inline-block relative text-left text-neutral-900 dark:text-neutral-100 px-2\",\n          className\n        )}\n        key={currentWord}\n      >\n        {/* edit suggested by Sajal: https://x.com/DewanganSajal */}\n        {currentWord.split(\" \").map((word, wordIndex) => (\n          <motion.span\n            key={word + wordIndex}\n            initial={{ opacity: 0, y: 10, filter: \"blur(8px)\" }}\n            animate={{ opacity: 1, y: 0, filter: \"blur(0px)\" }}\n            transition={{\n              delay: wordIndex * 0.3,\n              duration: 0.3,\n            }}\n            className=\"inline-block whitespace-nowrap\"\n          >\n            {word.split(\"\").map((letter, letterIndex) => (\n              <motion.span\n                key={word + letterIndex}\n                initial={{ opacity: 0, y: 10, filter: \"blur(8px)\" }}\n                animate={{ opacity: 1, y: 0, filter: \"blur(0px)\" }}\n                transition={{\n                  delay: wordIndex * 0.3 + letterIndex * 0.05,\n                  duration: 0.2,\n                }}\n                className=\"inline-block\"\n              >\n                {letter}\n              </motion.span>\n            ))}\n            <span className=\"inline-block\">&nbsp;</span>\n          </motion.span>\n        ))}\n      </motion.div>\n    </AnimatePresence>\n  );\n};\nCopy\nExpand\nProps\nProp\tType\tDefault\tDescription\nwords\tstring[]\tN/A\tAn array of words to be displayed and animated.\nduration\tnumber\t3000\tDuration (in milliseconds) for each word to be displayed before flipping to the next word.\nclassName\tstring\tN/A\tAdditional CSS classes to apply to the component.\n\nThis component is inspired by the words animation on Antimetal's website.\n\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Expandable Cards",
    "url": "https://ui.aceternity.com/components/expandable-card",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nExpandable Cards\n\nClick cards to expand them and show additional information\n\nCard\nFeatures\nBento Grid\nPreview\nCode\nSummertime Sadness\n\nLana Del Rey\n\nPlay\nMitran Di Chhatri\n\nBabbu Maan\n\nPlay\nFor Whom The Bell Tolls\n\nMetallica\n\nPlay\nStairway To Heaven\n\nLed Zeppelin\n\nPlay\nToh Phir Aao\n\nMustafa Zahid\n\nPlay\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nAdd useOutsideClick hook\nhooks/use-outside-click.ts\nimport React, { useEffect } from \"react\";\n \nexport const useOutsideClick = (\n  ref: React.RefObject<HTMLDivElement>,\n  callback: Function\n) => {\n  useEffect(() => {\n    const listener = (event: any) => {\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n      callback(event);\n    };\n \n    document.addEventListener(\"mousedown\", listener);\n    document.addEventListener(\"touchstart\", listener);\n \n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n      document.removeEventListener(\"touchstart\", listener);\n    };\n  }, [ref, callback]);\n};\nCopy\nExamples\nStandard\nPreview\nCode\nSummertime Sadness\n\nLana Del Rey\n\nPlay\nMitran Di Chhatri\n\nBabbu Maan\n\nPlay\nFor Whom The Bell Tolls\n\nMetallica\n\nPlay\nStairway To Heaven\n\nLed Zeppelin\n\nPlay\nToh Phir Aao\n\nMustafa Zahid\n\nPlay\nGrid\nPreview\nCode\nSummertime Sadness\n\nLana Del Rey\n\nMitran Di Chhatri\n\nBabbu Maan\n\nFor Whom The Bell Tolls\n\nMetallica\n\nAap Ka Suroor\n\nLord Himesh\n\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Evervault Card",
    "url": "https://ui.aceternity.com/components/evervault-card",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nEvervault Card\n\nA cool card with amazing hover effect, reveals encrypted text and a mixed gradient.\n\nCard\nFeatures\nHover\nProduct\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/evervault-card.tsx\n\n\"use client\";\nimport { useMotionValue } from \"framer-motion\";\nimport React, { useState, useEffect } from \"react\";\nimport { useMotionTemplate, motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n \nexport const EvervaultCard = ({\n  text,\n  className,\n}: {\n  text?: string;\n  className?: string;\n}) => {\n  let mouseX = useMotionValue(0);\n  let mouseY = useMotionValue(0);\n \n  const [randomString, setRandomString] = useState(\"\");\n \n  useEffect(() => {\n    let str = generateRandomString(1500);\n    setRandomString(str);\n  }, []);\n \n  function onMouseMove({ currentTarget, clientX, clientY }: any) {\n    let { left, top } = currentTarget.getBoundingClientRect();\n    mouseX.set(clientX - left);\n    mouseY.set(clientY - top);\n \n    const str = generateRandomString(1500);\n    setRandomString(str);\n  }\n \n  return (\n    <div\n      className={cn(\n        \"p-0.5  bg-transparent aspect-square  flex items-center justify-center w-full h-full relative\",\n        className\n      )}\n    >\n      <div\n        onMouseMove={onMouseMove}\n        className=\"group/card rounded-3xl w-full relative overflow-hidden bg-transparent flex items-center justify-center h-full\"\n      >\n        <CardPattern\n          mouseX={mouseX}\n          mouseY={mouseY}\n          randomString={randomString}\n        />\n        <div className=\"relative z-10 flex items-center justify-center\">\n          <div className=\"relative h-44 w-44  rounded-full flex items-center justify-center text-white font-bold text-4xl\">\n            <div className=\"absolute w-full h-full bg-white/[0.8] dark:bg-black/[0.8] blur-sm rounded-full\" />\n            <span className=\"dark:text-white text-black z-20\">{text}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n \nexport function CardPattern({ mouseX, mouseY, randomString }: any) {\n  let maskImage = useMotionTemplate`radial-gradient(250px at ${mouseX}px ${mouseY}px, white, transparent)`;\n  let style = { maskImage, WebkitMaskImage: maskImage };\n \n  return (\n    <div className=\"pointer-events-none\">\n      <div className=\"absolute inset-0 rounded-2xl  [mask-image:linear-gradient(white,transparent)] group-hover/card:opacity-50\"></div>\n      <motion.div\n        className=\"absolute inset-0 rounded-2xl bg-gradient-to-r from-green-500 to-blue-700 opacity-0  group-hover/card:opacity-100 backdrop-blur-xl transition duration-500\"\n        style={style}\n      />\n      <motion.div\n        className=\"absolute inset-0 rounded-2xl opacity-0 mix-blend-overlay  group-hover/card:opacity-100\"\n        style={style}\n      >\n        <p className=\"absolute inset-x-0 text-xs h-full break-words whitespace-pre-wrap text-white font-mono font-bold transition duration-500\">\n          {randomString}\n        </p>\n      </motion.div>\n    </div>\n  );\n}\n \nconst characters =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\nexport const generateRandomString = (length: number) => {\n  let result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n  return result;\n};\n \nexport const Icon = ({ className, ...rest }: any) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      strokeWidth=\"1.5\"\n      stroke=\"currentColor\"\n      className={className}\n      {...rest}\n    >\n      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 6v12m6-6H6\" />\n    </svg>\n  );\n};\nCopy\nExpand\nProps\nProp name\tType\tDescription\nclassName\tstring\tThe class name of the child component.\ntitle\tstring\tThe text that stays on the card\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Direction Aware Hover",
    "url": "https://ui.aceternity.com/components/direction-aware-hover",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nDirection Aware Hover\n\nA direction aware hover effect using Framer Motion, Tailwindcss and good old javascript.\n\nCard\nFeatures\nHover\nProduct\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/direction-aware-hover.tsx\n\n\"use client\";\n \nimport { useRef, useState } from \"react\";\nimport Image from \"next/image\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n \nexport const DirectionAwareHover = ({\n  imageUrl,\n  children,\n  childrenClassName,\n  imageClassName,\n  className,\n}: {\n  imageUrl: string;\n  children: React.ReactNode | string;\n  childrenClassName?: string;\n  imageClassName?: string;\n  className?: string;\n}) => {\n  const ref = useRef<HTMLDivElement>(null);\n \n  const [direction, setDirection] = useState<\n    \"top\" | \"bottom\" | \"left\" | \"right\" | string\n  >(\"left\");\n \n  const handleMouseEnter = (\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>\n  ) => {\n    if (!ref.current) return;\n \n    const direction = getDirection(event, ref.current);\n    console.log(\"direction\", direction);\n    switch (direction) {\n      case 0:\n        setDirection(\"top\");\n        break;\n      case 1:\n        setDirection(\"right\");\n        break;\n      case 2:\n        setDirection(\"bottom\");\n        break;\n      case 3:\n        setDirection(\"left\");\n        break;\n      default:\n        setDirection(\"left\");\n        break;\n    }\n  };\n \n  const getDirection = (\n    ev: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    obj: HTMLElement\n  ) => {\n    const { width: w, height: h, left, top } = obj.getBoundingClientRect();\n    const x = ev.clientX - left - (w / 2) * (w > h ? h / w : 1);\n    const y = ev.clientY - top - (h / 2) * (h > w ? w / h : 1);\n    const d = Math.round(Math.atan2(y, x) / 1.57079633 + 5) % 4;\n    return d;\n  };\n \n  return (\n    <motion.div\n      onMouseEnter={handleMouseEnter}\n      ref={ref}\n      className={cn(\n        \"md:h-96 w-60 h-60 md:w-96 bg-transparent rounded-lg overflow-hidden group/card relative\",\n        className\n      )}\n    >\n      <AnimatePresence mode=\"wait\">\n        <motion.div\n          className=\"relative h-full w-full\"\n          initial=\"initial\"\n          whileHover={direction}\n          exit=\"exit\"\n        >\n          <motion.div className=\"group-hover/card:block hidden absolute inset-0 w-full h-full bg-black/40 z-10 transition duration-500\" />\n          <motion.div\n            variants={variants}\n            className=\"h-full w-full relative bg-gray-50 dark:bg-black\"\n            transition={{\n              duration: 0.2,\n              ease: \"easeOut\",\n            }}\n          >\n            <Image\n              alt=\"image\"\n              className={cn(\n                \"h-full w-full object-cover scale-[1.15]\",\n                imageClassName\n              )}\n              width=\"1000\"\n              height=\"1000\"\n              src={imageUrl}\n            />\n          </motion.div>\n          <motion.div\n            variants={textVariants}\n            transition={{\n              duration: 0.5,\n              ease: \"easeOut\",\n            }}\n            className={cn(\n              \"text-white absolute bottom-4 left-4 z-40\",\n              childrenClassName\n            )}\n          >\n            {children}\n          </motion.div>\n        </motion.div>\n      </AnimatePresence>\n    </motion.div>\n  );\n};\n \nconst variants = {\n  initial: {\n    x: 0,\n  },\n \n  exit: {\n    x: 0,\n    y: 0,\n  },\n  top: {\n    y: 20,\n  },\n  bottom: {\n    y: -20,\n  },\n  left: {\n    x: 20,\n  },\n  right: {\n    x: -20,\n  },\n};\n \nconst textVariants = {\n  initial: {\n    y: 0,\n    x: 0,\n    opacity: 0,\n  },\n  exit: {\n    y: 0,\n    x: 0,\n    opacity: 0,\n  },\n  top: {\n    y: -20,\n    opacity: 1,\n  },\n  bottom: {\n    y: 2,\n    opacity: 1,\n  },\n  left: {\n    x: -2,\n    opacity: 1,\n  },\n  right: {\n    x: 20,\n    opacity: 1,\n  },\n};\nCopy\nExpand\nProps\nProp\tType\tDescription\nimageUrl\tstring\tThe URL of the image to be displayed.\nchildren\tReact.ReactNode or string\tThe content to be displayed over the image.\nchildrenClassName\tstring (optional)\tThe CSS class to be applied to the children.\nimageClassName\tstring (optional)\tThe CSS class to be applied to the image.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Container Scroll Animation",
    "url": "https://ui.aceternity.com/components/container-scroll-animation",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nContainer Scroll Animation\n\nA scroll animation that rotates in 3d on scroll. Perfect for hero or marketing sections.\n\nHero\nProduct\nFeatures\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/container-scroll-animation.tsx\n\n\"use client\";\nimport React, { useRef } from \"react\";\nimport { useScroll, useTransform, motion, MotionValue } from \"framer-motion\";\n \nexport const ContainerScroll = ({\n  titleComponent,\n  children,\n}: {\n  titleComponent: string | React.ReactNode;\n  children: React.ReactNode;\n}) => {\n  const containerRef = useRef<any>(null);\n  const { scrollYProgress } = useScroll({\n    target: containerRef,\n  });\n  const [isMobile, setIsMobile] = React.useState(false);\n \n  React.useEffect(() => {\n    const checkMobile = () => {\n      setIsMobile(window.innerWidth <= 768);\n    };\n    checkMobile();\n    window.addEventListener(\"resize\", checkMobile);\n    return () => {\n      window.removeEventListener(\"resize\", checkMobile);\n    };\n  }, []);\n \n  const scaleDimensions = () => {\n    return isMobile ? [0.7, 0.9] : [1.05, 1];\n  };\n \n  const rotate = useTransform(scrollYProgress, [0, 1], [20, 0]);\n  const scale = useTransform(scrollYProgress, [0, 1], scaleDimensions());\n  const translate = useTransform(scrollYProgress, [0, 1], [0, -100]);\n \n  return (\n    <div\n      className=\"h-[60rem] md:h-[80rem] flex items-center justify-center relative p-2 md:p-20\"\n      ref={containerRef}\n    >\n      <div\n        className=\"py-10 md:py-40 w-full relative\"\n        style={{\n          perspective: \"1000px\",\n        }}\n      >\n        <Header translate={translate} titleComponent={titleComponent} />\n        <Card rotate={rotate} translate={translate} scale={scale}>\n          {children}\n        </Card>\n      </div>\n    </div>\n  );\n};\n \nexport const Header = ({ translate, titleComponent }: any) => {\n  return (\n    <motion.div\n      style={{\n        translateY: translate,\n      }}\n      className=\"div max-w-5xl mx-auto text-center\"\n    >\n      {titleComponent}\n    </motion.div>\n  );\n};\n \nexport const Card = ({\n  rotate,\n  scale,\n  children,\n}: {\n  rotate: MotionValue<number>;\n  scale: MotionValue<number>;\n  translate: MotionValue<number>;\n  children: React.ReactNode;\n}) => {\n  return (\n    <motion.div\n      style={{\n        rotateX: rotate,\n        scale,\n        boxShadow:\n          \"0 0 #0000004d, 0 9px 20px #0000004a, 0 37px 37px #00000042, 0 84px 50px #00000026, 0 149px 60px #0000000a, 0 233px 65px #00000003\",\n      }}\n      className=\"max-w-5xl -mt-12 mx-auto h-[30rem] md:h-[40rem] w-full border-4 border-[#6C6C6C] p-2 md:p-6 bg-[#222222] rounded-[30px] shadow-2xl\"\n    >\n      <div className=\" h-full w-full  overflow-hidden rounded-2xl bg-gray-100 dark:bg-zinc-900 md:rounded-2xl md:p-4 \">\n        {children}\n      </div>\n    </motion.div>\n  );\n};\nCopy\nExpand\nProps\nComponent\tProp\tType\tDescription\nContainerScroll\ttitleComponent\tstring | React.ReactNode\tThe component or string to be used as the title.\nContainerScroll\tchildren\tReact.ReactNode\tThe children components to be rendered inside the ContainerScroll component.\nHeader\ttranslate\tMotionValue<number>\tThe motion value for translation to be applied to the Header component.\nHeader\ttitleComponent\tstring | React.ReactNode\tThe component or string to be used as the title in the Header component.\nCard\trotate\tMotionValue<number>\tThe motion value for rotation to be applied to the Card component.\nCard\tscale\tMotionValue<number>\tThe motion value for scaling to be applied to the Card component.\nCard\ttranslate\tMotionValue<number>\tThe motion value for translation to be applied to the Card component.\nCard\tchildren\tReact.ReactNode\tThe children components to be rendered inside the Card component.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Cover",
    "url": "https://ui.aceternity.com/components/container-cover",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nCover\n\nA Cover component that wraps any children, providing beams and space effect, hover to reveal speed.\n\nFeatures\nSpecial\nHighlights\nPreview\nCode\nBuild amazing websites\nat warp speed\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nInstall Sparkles Dependencies\nnpm i @tsparticles/react @tsparticles/engine @tsparticles/slim\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/cover.tsx\n\n\"use client\";\nimport React, { useEffect, useId, useState } from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { useRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { SparklesCore } from \"@/components/ui/sparkles\";\n \nexport const Cover = ({\n  children,\n  className,\n}: {\n  children?: React.ReactNode;\n  className?: string;\n}) => {\n  const [hovered, setHovered] = useState(false);\n \n  const ref = useRef<HTMLDivElement>(null);\n \n  const [containerWidth, setContainerWidth] = useState(0);\n  const [beamPositions, setBeamPositions] = useState<number[]>([]);\n \n  useEffect(() => {\n    if (ref.current) {\n      setContainerWidth(ref.current?.clientWidth ?? 0);\n \n      const height = ref.current?.clientHeight ?? 0;\n      const numberOfBeams = Math.floor(height / 10); // Adjust the divisor to control the spacing\n      const positions = Array.from(\n        { length: numberOfBeams },\n        (_, i) => (i + 1) * (height / (numberOfBeams + 1))\n      );\n      setBeamPositions(positions);\n    }\n  }, [ref.current]);\n \n  return (\n    <div\n      onMouseEnter={() => setHovered(true)}\n      onMouseLeave={() => setHovered(false)}\n      ref={ref}\n      className=\"relative hover:bg-neutral-900  group/cover inline-block dark:bg-neutral-900 bg-neutral-100 px-2 py-2  transition duration-200 rounded-sm\"\n    >\n      <AnimatePresence>\n        {hovered && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            transition={{\n              opacity: {\n                duration: 0.2,\n              },\n            }}\n            className=\"h-full w-full overflow-hidden absolute inset-0\"\n          >\n            <motion.div\n              animate={{\n                translateX: [\"-50%\", \"0%\"],\n              }}\n              transition={{\n                translateX: {\n                  duration: 10,\n                  ease: \"linear\",\n                  repeat: Infinity,\n                },\n              }}\n              className=\"w-[200%] h-full flex\"\n            >\n              <SparklesCore\n                background=\"transparent\"\n                minSize={0.4}\n                maxSize={1}\n                particleDensity={500}\n                className=\"w-full h-full\"\n                particleColor=\"#FFFFFF\"\n              />\n              <SparklesCore\n                background=\"transparent\"\n                minSize={0.4}\n                maxSize={1}\n                particleDensity={500}\n                className=\"w-full h-full\"\n                particleColor=\"#FFFFFF\"\n              />\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n      {beamPositions.map((position, index) => (\n        <Beam\n          key={index}\n          hovered={hovered}\n          duration={Math.random() * 2 + 1}\n          delay={Math.random() * 2 + 1}\n          width={containerWidth}\n          style={{\n            top: `${position}px`,\n          }}\n        />\n      ))}\n      <motion.span\n        key={String(hovered)}\n        animate={{\n          scale: hovered ? 0.8 : 1,\n          x: hovered ? [0, -30, 30, -30, 30, 0] : 0,\n          y: hovered ? [0, 30, -30, 30, -30, 0] : 0,\n        }}\n        exit={{\n          filter: \"none\",\n          scale: 1,\n          x: 0,\n          y: 0,\n        }}\n        transition={{\n          duration: 0.2,\n          x: {\n            duration: 0.2,\n            repeat: Infinity,\n            repeatType: \"loop\",\n          },\n          y: {\n            duration: 0.2,\n            repeat: Infinity,\n            repeatType: \"loop\",\n          },\n          scale: {\n            duration: 0.2,\n          },\n          filter: {\n            duration: 0.2,\n          },\n        }}\n        className={cn(\n          \"dark:text-white inline-block text-neutral-900 relative z-20 group-hover/cover:text-white transition duration-200\",\n          className\n        )}\n      >\n        {children}\n      </motion.span>\n      <CircleIcon className=\"absolute -right-[2px] -top-[2px]\" />\n      <CircleIcon className=\"absolute -bottom-[2px] -right-[2px]\" delay={0.4} />\n      <CircleIcon className=\"absolute -left-[2px] -top-[2px]\" delay={0.8} />\n      <CircleIcon className=\"absolute -bottom-[2px] -left-[2px]\" delay={1.6} />\n    </div>\n  );\n};\n \nexport const Beam = ({\n  className,\n  delay,\n  duration,\n  hovered,\n  width = 600,\n  ...svgProps\n}: {\n  className?: string;\n  delay?: number;\n  duration?: number;\n  hovered?: boolean;\n  width?: number;\n} & React.ComponentProps<typeof motion.svg>) => {\n  const id = useId();\n \n  return (\n    <motion.svg\n      width={width ?? \"600\"}\n      height=\"1\"\n      viewBox={`0 0 ${width ?? \"600\"} 1`}\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={cn(\"absolute inset-x-0 w-full\", className)}\n      {...svgProps}\n    >\n      <motion.path\n        d={`M0 0.5H${width ?? \"600\"}`}\n        stroke={`url(#svgGradient-${id})`}\n      />\n \n      <defs>\n        <motion.linearGradient\n          id={`svgGradient-${id}`}\n          key={String(hovered)}\n          gradientUnits=\"userSpaceOnUse\"\n          initial={{\n            x1: \"0%\",\n            x2: hovered ? \"-10%\" : \"-5%\",\n            y1: 0,\n            y2: 0,\n          }}\n          animate={{\n            x1: \"110%\",\n            x2: hovered ? \"100%\" : \"105%\",\n            y1: 0,\n            y2: 0,\n          }}\n          transition={{\n            duration: hovered ? 0.5 : duration ?? 2,\n            ease: \"linear\",\n            repeat: Infinity,\n            delay: hovered ? Math.random() * (1 - 0.2) + 0.2 : 0,\n            repeatDelay: hovered ? Math.random() * (2 - 1) + 1 : delay ?? 1,\n          }}\n        >\n          <stop stopColor=\"#2EB9DF\" stopOpacity=\"0\" />\n          <stop stopColor=\"#3b82f6\" />\n          <stop offset=\"1\" stopColor=\"#3b82f6\" stopOpacity=\"0\" />\n        </motion.linearGradient>\n      </defs>\n    </motion.svg>\n  );\n};\n \nexport const CircleIcon = ({\n  className,\n  delay,\n}: {\n  className?: string;\n  delay?: number;\n}) => {\n  return (\n    <div\n      className={cn(\n        `pointer-events-none animate-pulse group-hover/cover:hidden group-hover/cover:opacity-100 group h-2 w-2 rounded-full bg-neutral-600 dark:bg-white opacity-20 group-hover/cover:bg-white`,\n        className\n      )}\n    ></div>\n  );\n};\nCopy\nExpand\n\ncomponents/ui/sparkles.tsx\n\n\"use client\";\nimport React, { useId, useMemo } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport Particles, { initParticlesEngine } from \"@tsparticles/react\";\nimport type { Container, SingleOrMultiple } from \"@tsparticles/engine\";\nimport { loadSlim } from \"@tsparticles/slim\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, useAnimation } from \"framer-motion\";\n \ntype ParticlesProps = {\n  id?: string;\n  className?: string;\n  background?: string;\n  particleSize?: number;\n  minSize?: number;\n  maxSize?: number;\n  speed?: number;\n  particleColor?: string;\n  particleDensity?: number;\n};\nexport const SparklesCore = (props: ParticlesProps) => {\n  const {\n    id,\n    className,\n    background,\n    minSize,\n    maxSize,\n    speed,\n    particleColor,\n    particleDensity,\n  } = props;\n  const [init, setInit] = useState(false);\n  useEffect(() => {\n    initParticlesEngine(async (engine) => {\n      await loadSlim(engine);\n    }).then(() => {\n      setInit(true);\n    });\n  }, []);\n  const controls = useAnimation();\n \n  const particlesLoaded = async (container?: Container) => {\n    if (container) {\n      console.log(container);\n      controls.start({\n        opacity: 1,\n        transition: {\n          duration: 1,\n        },\n      });\n    }\n  };\n \n  const generatedId = useId();\n  return (\n    <motion.div animate={controls} className={cn(\"opacity-0\", className)}>\n      {init && (\n        <Particles\n          id={id || generatedId}\n          className={cn(\"h-full w-full\")}\n          particlesLoaded={particlesLoaded}\n          options={{\n            background: {\n              color: {\n                value: background || \"#0d47a1\",\n              },\n            },\n            fullScreen: {\n              enable: false,\n              zIndex: 1,\n            },\n \n            fpsLimit: 120,\n            interactivity: {\n              events: {\n                onClick: {\n                  enable: true,\n                  mode: \"push\",\n                },\n                onHover: {\n                  enable: false,\n                  mode: \"repulse\",\n                },\n                resize: true as any,\n              },\n              modes: {\n                push: {\n                  quantity: 4,\n                },\n                repulse: {\n                  distance: 200,\n                  duration: 0.4,\n                },\n              },\n            },\n            particles: {\n              bounce: {\n                horizontal: {\n                  value: 1,\n                },\n                vertical: {\n                  value: 1,\n                },\n              },\n              collisions: {\n                absorb: {\n                  speed: 2,\n                },\n                bounce: {\n                  horizontal: {\n                    value: 1,\n                  },\n                  vertical: {\n                    value: 1,\n                  },\n                },\n                enable: false,\n                maxSpeed: 50,\n                mode: \"bounce\",\n                overlap: {\n                  enable: true,\n                  retries: 0,\n                },\n              },\n              color: {\n                value: particleColor || \"#ffffff\",\n                animation: {\n                  h: {\n                    count: 0,\n                    enable: false,\n                    speed: 1,\n                    decay: 0,\n                    delay: 0,\n                    sync: true,\n                    offset: 0,\n                  },\n                  s: {\n                    count: 0,\n                    enable: false,\n                    speed: 1,\n                    decay: 0,\n                    delay: 0,\n                    sync: true,\n                    offset: 0,\n                  },\n                  l: {\n                    count: 0,\n                    enable: false,\n                    speed: 1,\n                    decay: 0,\n                    delay: 0,\n                    sync: true,\n                    offset: 0,\n                  },\n                },\n              },\n              effect: {\n                close: true,\n                fill: true,\n                options: {},\n                type: {} as SingleOrMultiple<string> | undefined,\n              },\n              groups: {},\n              move: {\n                angle: {\n                  offset: 0,\n                  value: 90,\n                },\n                attract: {\n                  distance: 200,\n                  enable: false,\n                  rotate: {\n                    x: 3000,\n                    y: 3000,\n                  },\n                },\n                center: {\n                  x: 50,\n                  y: 50,\n                  mode: \"percent\",\n                  radius: 0,\n                },\n                decay: 0,\n                distance: {},\n                direction: \"none\",\n                drift: 0,\n                enable: true,\n                gravity: {\n                  acceleration: 9.81,\n                  enable: false,\n                  inverse: false,\n                  maxSpeed: 50,\n                },\n                path: {\n                  clamp: true,\n                  delay: {\n                    value: 0,\n                  },\n                  enable: false,\n                  options: {},\n                },\n                outModes: {\n                  default: \"out\",\n                },\n                random: false,\n                size: false,\n                speed: {\n                  min: 0.1,\n                  max: 1,\n                },\n                spin: {\n                  acceleration: 0,\n                  enable: false,\n                },\n                straight: false,\n                trail: {\n                  enable: false,\n                  length: 10,\n                  fill: {},\n                },\n                vibrate: false,\n                warp: false,\n              },\n              number: {\n                density: {\n                  enable: true,\n                  width: 400,\n                  height: 400,\n                },\n                limit: {\n                  mode: \"delete\",\n                  value: 0,\n                },\n                value: particleDensity || 120,\n              },\n              opacity: {\n                value: {\n                  min: 0.1,\n                  max: 1,\n                },\n                animation: {\n                  count: 0,\n                  enable: true,\n                  speed: speed || 4,\n                  decay: 0,\n                  delay: 0,\n                  sync: false,\n                  mode: \"auto\",\n                  startValue: \"random\",\n                  destroy: \"none\",\n                },\n              },\n              reduceDuplicates: false,\n              shadow: {\n                blur: 0,\n                color: {\n                  value: \"#000\",\n                },\n                enable: false,\n                offset: {\n                  x: 0,\n                  y: 0,\n                },\n              },\n              shape: {\n                close: true,\n                fill: true,\n                options: {},\n                type: \"circle\",\n              },\n              size: {\n                value: {\n                  min: minSize || 1,\n                  max: maxSize || 3,\n                },\n                animation: {\n                  count: 0,\n                  enable: false,\n                  speed: 5,\n                  decay: 0,\n                  delay: 0,\n                  sync: false,\n                  mode: \"auto\",\n                  startValue: \"random\",\n                  destroy: \"none\",\n                },\n              },\n              stroke: {\n                width: 0,\n              },\n              zIndex: {\n                value: 0,\n                opacityRate: 1,\n                sizeRate: 1,\n                velocityRate: 1,\n              },\n              destroy: {\n                bounds: {},\n                mode: \"none\",\n                split: {\n                  count: 1,\n                  factor: {\n                    value: 3,\n                  },\n                  rate: {\n                    value: {\n                      min: 4,\n                      max: 9,\n                    },\n                  },\n                  sizeOffset: true,\n                },\n              },\n              roll: {\n                darken: {\n                  enable: false,\n                  value: 0,\n                },\n                enable: false,\n                enlighten: {\n                  enable: false,\n                  value: 0,\n                },\n                mode: \"vertical\",\n                speed: 25,\n              },\n              tilt: {\n                value: 0,\n                animation: {\n                  enable: false,\n                  speed: 0,\n                  decay: 0,\n                  sync: false,\n                },\n                direction: \"clockwise\",\n                enable: false,\n              },\n              twinkle: {\n                lines: {\n                  enable: false,\n                  frequency: 0.05,\n                  opacity: 1,\n                },\n                particles: {\n                  enable: false,\n                  frequency: 0.05,\n                  opacity: 1,\n                },\n              },\n              wobble: {\n                distance: 5,\n                enable: false,\n                speed: {\n                  angle: 50,\n                  move: 10,\n                },\n              },\n              life: {\n                count: 0,\n                delay: {\n                  value: 0,\n                  sync: false,\n                },\n                duration: {\n                  value: 0,\n                  sync: false,\n                },\n              },\n              rotate: {\n                value: 0,\n                animation: {\n                  enable: false,\n                  speed: 0,\n                  decay: 0,\n                  sync: false,\n                },\n                direction: \"clockwise\",\n                path: false,\n              },\n              orbit: {\n                animation: {\n                  count: 0,\n                  enable: false,\n                  speed: 1,\n                  decay: 0,\n                  delay: 0,\n                  sync: false,\n                },\n                enable: false,\n                opacity: 1,\n                rotation: {\n                  value: 45,\n                },\n                width: 1,\n              },\n              links: {\n                blink: false,\n                color: {\n                  value: \"#fff\",\n                },\n                consent: false,\n                distance: 100,\n                enable: false,\n                frequency: 1,\n                opacity: 1,\n                shadow: {\n                  blur: 5,\n                  color: {\n                    value: \"#000\",\n                  },\n                  enable: false,\n                },\n                triangles: {\n                  enable: false,\n                  frequency: 1,\n                },\n                width: 1,\n                warp: false,\n              },\n              repulse: {\n                value: 0,\n                enabled: false,\n                distance: 1,\n                duration: 1,\n                factor: 1,\n                speed: 1,\n              },\n            },\n            detectRetina: true,\n          }}\n        />\n      )}\n    </motion.div>\n  );\n};\nCopy\nExpand\nProps\nProp\tType\tDefault\tDescription\nchildren\tReact.ReactNode\tundefined\tThe content to be wrapped by the Cover component\nclassName\tstring\tundefined\tAdditional CSS classes to apply to the content wrapper\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Compare",
    "url": "https://ui.aceternity.com/components/compare",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nCompare\n\nA comparison component between two images, slide or drag to compare\n\nCard\nFeatures\nSpecial\nPreview\nCode\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nInstall Sparkles Dependencies\nnpm i @tsparticles/react @tsparticles/engine @tsparticles/slim\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/compare.tsx\n\n\"use client\";\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { SparklesCore } from \"@/components/ui/sparkles\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport { IconDotsVertical } from \"@tabler/icons-react\";\n \ninterface CompareProps {\n  firstImage?: string;\n  secondImage?: string;\n  className?: string;\n  firstImageClassName?: string;\n  secondImageClassname?: string;\n  initialSliderPercentage?: number;\n  slideMode?: \"hover\" | \"drag\";\n  showHandlebar?: boolean;\n  autoplay?: boolean;\n  autoplayDuration?: number;\n}\nexport const Compare = ({\n  firstImage = \"\",\n  secondImage = \"\",\n  className,\n  firstImageClassName,\n  secondImageClassname,\n  initialSliderPercentage = 50,\n  slideMode = \"hover\",\n  showHandlebar = true,\n  autoplay = false,\n  autoplayDuration = 5000,\n}: CompareProps) => {\n  const [sliderXPercent, setSliderXPercent] = useState(initialSliderPercentage);\n  const [isDragging, setIsDragging] = useState(false);\n \n  const sliderRef = useRef<HTMLDivElement>(null);\n \n  const [isMouseOver, setIsMouseOver] = useState(false);\n \n  const autoplayRef = useRef<NodeJS.Timeout | null>(null);\n \n  const startAutoplay = useCallback(() => {\n    if (!autoplay) return;\n \n    const startTime = Date.now();\n    const animate = () => {\n      const elapsedTime = Date.now() - startTime;\n      const progress =\n        (elapsedTime % (autoplayDuration * 2)) / autoplayDuration;\n      const percentage = progress <= 1 ? progress * 100 : (2 - progress) * 100;\n \n      setSliderXPercent(percentage);\n      autoplayRef.current = setTimeout(animate, 16); // ~60fps\n    };\n \n    animate();\n  }, [autoplay, autoplayDuration]);\n \n  const stopAutoplay = useCallback(() => {\n    if (autoplayRef.current) {\n      clearTimeout(autoplayRef.current);\n      autoplayRef.current = null;\n    }\n  }, []);\n \n  useEffect(() => {\n    startAutoplay();\n    return () => stopAutoplay();\n  }, [startAutoplay, stopAutoplay]);\n \n  function mouseEnterHandler() {\n    setIsMouseOver(true);\n    stopAutoplay();\n  }\n \n  function mouseLeaveHandler() {\n    setIsMouseOver(false);\n    if (slideMode === \"hover\") {\n      setSliderXPercent(initialSliderPercentage);\n    }\n    if (slideMode === \"drag\") {\n      setIsDragging(false);\n    }\n    startAutoplay();\n  }\n \n  const handleStart = useCallback(\n    (clientX: number) => {\n      if (slideMode === \"drag\") {\n        setIsDragging(true);\n      }\n    },\n    [slideMode]\n  );\n \n  const handleEnd = useCallback(() => {\n    if (slideMode === \"drag\") {\n      setIsDragging(false);\n    }\n  }, [slideMode]);\n \n  const handleMove = useCallback(\n    (clientX: number) => {\n      if (!sliderRef.current) return;\n      if (slideMode === \"hover\" || (slideMode === \"drag\" && isDragging)) {\n        const rect = sliderRef.current.getBoundingClientRect();\n        const x = clientX - rect.left;\n        const percent = (x / rect.width) * 100;\n        requestAnimationFrame(() => {\n          setSliderXPercent(Math.max(0, Math.min(100, percent)));\n        });\n      }\n    },\n    [slideMode, isDragging]\n  );\n \n  const handleMouseDown = useCallback(\n    (e: React.MouseEvent) => handleStart(e.clientX),\n    [handleStart]\n  );\n  const handleMouseUp = useCallback(() => handleEnd(), [handleEnd]);\n  const handleMouseMove = useCallback(\n    (e: React.MouseEvent) => handleMove(e.clientX),\n    [handleMove]\n  );\n \n  const handleTouchStart = useCallback(\n    (e: React.TouchEvent) => {\n      if (!autoplay) {\n        handleStart(e.touches[0].clientX);\n      }\n    },\n    [handleStart, autoplay]\n  );\n \n  const handleTouchEnd = useCallback(() => {\n    if (!autoplay) {\n      handleEnd();\n    }\n  }, [handleEnd, autoplay]);\n \n  const handleTouchMove = useCallback(\n    (e: React.TouchEvent) => {\n      if (!autoplay) {\n        handleMove(e.touches[0].clientX);\n      }\n    },\n    [handleMove, autoplay]\n  );\n \n  return (\n    <div\n      ref={sliderRef}\n      className={cn(\"w-[400px] h-[400px] overflow-hidden\", className)}\n      style={{\n        position: \"relative\",\n        cursor: slideMode === \"drag\" ? \"grab\" : \"col-resize\",\n      }}\n      onMouseMove={handleMouseMove}\n      onMouseLeave={mouseLeaveHandler}\n      onMouseEnter={mouseEnterHandler}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onTouchStart={handleTouchStart}\n      onTouchEnd={handleTouchEnd}\n      onTouchMove={handleTouchMove}\n    >\n      <AnimatePresence initial={false}>\n        <motion.div\n          className=\"h-full w-px absolute top-0 m-auto z-30 bg-gradient-to-b from-transparent from-[5%] to-[95%] via-indigo-500 to-transparent\"\n          style={{\n            left: `${sliderXPercent}%`,\n            top: \"0\",\n            zIndex: 40,\n          }}\n          transition={{ duration: 0 }}\n        >\n          <div className=\"w-36 h-full [mask-image:radial-gradient(100px_at_left,white,transparent)] absolute top-1/2 -translate-y-1/2 left-0 bg-gradient-to-r from-indigo-400 via-transparent to-transparent z-20 opacity-50\" />\n          <div className=\"w-10 h-1/2 [mask-image:radial-gradient(50px_at_left,white,transparent)] absolute top-1/2 -translate-y-1/2 left-0 bg-gradient-to-r from-cyan-400 via-transparent to-transparent z-10 opacity-100\" />\n          <div className=\"w-10 h-3/4 top-1/2 -translate-y-1/2 absolute -right-10 [mask-image:radial-gradient(100px_at_left,white,transparent)]\">\n            <MemoizedSparklesCore\n              background=\"transparent\"\n              minSize={0.4}\n              maxSize={1}\n              particleDensity={1200}\n              className=\"w-full h-full\"\n              particleColor=\"#FFFFFF\"\n            />\n          </div>\n          {showHandlebar && (\n            <div className=\"h-5 w-5 rounded-md top-1/2 -translate-y-1/2 bg-white z-30 -right-2.5 absolute   flex items-center justify-center shadow-[0px_-1px_0px_0px_#FFFFFF40]\">\n              <IconDotsVertical className=\"h-4 w-4 text-black\" />\n            </div>\n          )}\n        </motion.div>\n      </AnimatePresence>\n      <div className=\"overflow-hidden w-full h-full relative z-20 pointer-events-none\">\n        <AnimatePresence initial={false}>\n          {firstImage ? (\n            <motion.div\n              className={cn(\n                \"absolute inset-0 z-20 rounded-2xl flex-shrink-0 w-full h-full select-none overflow-hidden\",\n                firstImageClassName\n              )}\n              style={{\n                clipPath: `inset(0 ${100 - sliderXPercent}% 0 0)`,\n              }}\n              transition={{ duration: 0 }}\n            >\n              <img\n                alt=\"first image\"\n                src={firstImage}\n                className={cn(\n                  \"absolute inset-0  z-20 rounded-2xl flex-shrink-0 w-full h-full select-none\",\n                  firstImageClassName\n                )}\n                draggable={false}\n              />\n            </motion.div>\n          ) : null}\n        </AnimatePresence>\n      </div>\n \n      <AnimatePresence initial={false}>\n        {secondImage ? (\n          <motion.img\n            className={cn(\n              \"absolute top-0 left-0 z-[19]  rounded-2xl w-full h-full select-none\",\n              secondImageClassname\n            )}\n            alt=\"second image\"\n            src={secondImage}\n            draggable={false}\n          />\n        ) : null}\n      </AnimatePresence>\n    </div>\n  );\n};\n \nconst MemoizedSparklesCore = React.memo(SparklesCore);\nCopy\nExpand\n\ncomponents/ui/sparkles.tsx\n\n\"use client\";\nimport React, { useId, useMemo } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport Particles, { initParticlesEngine } from \"@tsparticles/react\";\nimport type { Container, SingleOrMultiple } from \"@tsparticles/engine\";\nimport { loadSlim } from \"@tsparticles/slim\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, useAnimation } from \"framer-motion\";\n \ntype ParticlesProps = {\n  id?: string;\n  className?: string;\n  background?: string;\n  particleSize?: number;\n  minSize?: number;\n  maxSize?: number;\n  speed?: number;\n  particleColor?: string;\n  particleDensity?: number;\n};\nexport const SparklesCore = (props: ParticlesProps) => {\n  const {\n    id,\n    className,\n    background,\n    minSize,\n    maxSize,\n    speed,\n    particleColor,\n    particleDensity,\n  } = props;\n  const [init, setInit] = useState(false);\n  useEffect(() => {\n    initParticlesEngine(async (engine) => {\n      await loadSlim(engine);\n    }).then(() => {\n      setInit(true);\n    });\n  }, []);\n  const controls = useAnimation();\n \n  const particlesLoaded = async (container?: Container) => {\n    if (container) {\n      console.log(container);\n      controls.start({\n        opacity: 1,\n        transition: {\n          duration: 1,\n        },\n      });\n    }\n  };\n \n  const generatedId = useId();\n  return (\n    <motion.div animate={controls} className={cn(\"opacity-0\", className)}>\n      {init && (\n        <Particles\n          id={id || generatedId}\n          className={cn(\"h-full w-full\")}\n          particlesLoaded={particlesLoaded}\n          options={{\n            background: {\n              color: {\n                value: background || \"#0d47a1\",\n              },\n            },\n            fullScreen: {\n              enable: false,\n              zIndex: 1,\n            },\n \n            fpsLimit: 120,\n            interactivity: {\n              events: {\n                onClick: {\n                  enable: true,\n                  mode: \"push\",\n                },\n                onHover: {\n                  enable: false,\n                  mode: \"repulse\",\n                },\n                resize: true as any,\n              },\n              modes: {\n                push: {\n                  quantity: 4,\n                },\n                repulse: {\n                  distance: 200,\n                  duration: 0.4,\n                },\n              },\n            },\n            particles: {\n              bounce: {\n                horizontal: {\n                  value: 1,\n                },\n                vertical: {\n                  value: 1,\n                },\n              },\n              collisions: {\n                absorb: {\n                  speed: 2,\n                },\n                bounce: {\n                  horizontal: {\n                    value: 1,\n                  },\n                  vertical: {\n                    value: 1,\n                  },\n                },\n                enable: false,\n                maxSpeed: 50,\n                mode: \"bounce\",\n                overlap: {\n                  enable: true,\n                  retries: 0,\n                },\n              },\n              color: {\n                value: particleColor || \"#ffffff\",\n                animation: {\n                  h: {\n                    count: 0,\n                    enable: false,\n                    speed: 1,\n                    decay: 0,\n                    delay: 0,\n                    sync: true,\n                    offset: 0,\n                  },\n                  s: {\n                    count: 0,\n                    enable: false,\n                    speed: 1,\n                    decay: 0,\n                    delay: 0,\n                    sync: true,\n                    offset: 0,\n                  },\n                  l: {\n                    count: 0,\n                    enable: false,\n                    speed: 1,\n                    decay: 0,\n                    delay: 0,\n                    sync: true,\n                    offset: 0,\n                  },\n                },\n              },\n              effect: {\n                close: true,\n                fill: true,\n                options: {},\n                type: {} as SingleOrMultiple<string> | undefined,\n              },\n              groups: {},\n              move: {\n                angle: {\n                  offset: 0,\n                  value: 90,\n                },\n                attract: {\n                  distance: 200,\n                  enable: false,\n                  rotate: {\n                    x: 3000,\n                    y: 3000,\n                  },\n                },\n                center: {\n                  x: 50,\n                  y: 50,\n                  mode: \"percent\",\n                  radius: 0,\n                },\n                decay: 0,\n                distance: {},\n                direction: \"none\",\n                drift: 0,\n                enable: true,\n                gravity: {\n                  acceleration: 9.81,\n                  enable: false,\n                  inverse: false,\n                  maxSpeed: 50,\n                },\n                path: {\n                  clamp: true,\n                  delay: {\n                    value: 0,\n                  },\n                  enable: false,\n                  options: {},\n                },\n                outModes: {\n                  default: \"out\",\n                },\n                random: false,\n                size: false,\n                speed: {\n                  min: 0.1,\n                  max: 1,\n                },\n                spin: {\n                  acceleration: 0,\n                  enable: false,\n                },\n                straight: false,\n                trail: {\n                  enable: false,\n                  length: 10,\n                  fill: {},\n                },\n                vibrate: false,\n                warp: false,\n              },\n              number: {\n                density: {\n                  enable: true,\n                  width: 400,\n                  height: 400,\n                },\n                limit: {\n                  mode: \"delete\",\n                  value: 0,\n                },\n                value: particleDensity || 120,\n              },\n              opacity: {\n                value: {\n                  min: 0.1,\n                  max: 1,\n                },\n                animation: {\n                  count: 0,\n                  enable: true,\n                  speed: speed || 4,\n                  decay: 0,\n                  delay: 0,\n                  sync: false,\n                  mode: \"auto\",\n                  startValue: \"random\",\n                  destroy: \"none\",\n                },\n              },\n              reduceDuplicates: false,\n              shadow: {\n                blur: 0,\n                color: {\n                  value: \"#000\",\n                },\n                enable: false,\n                offset: {\n                  x: 0,\n                  y: 0,\n                },\n              },\n              shape: {\n                close: true,\n                fill: true,\n                options: {},\n                type: \"circle\",\n              },\n              size: {\n                value: {\n                  min: minSize || 1,\n                  max: maxSize || 3,\n                },\n                animation: {\n                  count: 0,\n                  enable: false,\n                  speed: 5,\n                  decay: 0,\n                  delay: 0,\n                  sync: false,\n                  mode: \"auto\",\n                  startValue: \"random\",\n                  destroy: \"none\",\n                },\n              },\n              stroke: {\n                width: 0,\n              },\n              zIndex: {\n                value: 0,\n                opacityRate: 1,\n                sizeRate: 1,\n                velocityRate: 1,\n              },\n              destroy: {\n                bounds: {},\n                mode: \"none\",\n                split: {\n                  count: 1,\n                  factor: {\n                    value: 3,\n                  },\n                  rate: {\n                    value: {\n                      min: 4,\n                      max: 9,\n                    },\n                  },\n                  sizeOffset: true,\n                },\n              },\n              roll: {\n                darken: {\n                  enable: false,\n                  value: 0,\n                },\n                enable: false,\n                enlighten: {\n                  enable: false,\n                  value: 0,\n                },\n                mode: \"vertical\",\n                speed: 25,\n              },\n              tilt: {\n                value: 0,\n                animation: {\n                  enable: false,\n                  speed: 0,\n                  decay: 0,\n                  sync: false,\n                },\n                direction: \"clockwise\",\n                enable: false,\n              },\n              twinkle: {\n                lines: {\n                  enable: false,\n                  frequency: 0.05,\n                  opacity: 1,\n                },\n                particles: {\n                  enable: false,\n                  frequency: 0.05,\n                  opacity: 1,\n                },\n              },\n              wobble: {\n                distance: 5,\n                enable: false,\n                speed: {\n                  angle: 50,\n                  move: 10,\n                },\n              },\n              life: {\n                count: 0,\n                delay: {\n                  value: 0,\n                  sync: false,\n                },\n                duration: {\n                  value: 0,\n                  sync: false,\n                },\n              },\n              rotate: {\n                value: 0,\n                animation: {\n                  enable: false,\n                  speed: 0,\n                  decay: 0,\n                  sync: false,\n                },\n                direction: \"clockwise\",\n                path: false,\n              },\n              orbit: {\n                animation: {\n                  count: 0,\n                  enable: false,\n                  speed: 1,\n                  decay: 0,\n                  delay: 0,\n                  sync: false,\n                },\n                enable: false,\n                opacity: 1,\n                rotation: {\n                  value: 45,\n                },\n                width: 1,\n              },\n              links: {\n                blink: false,\n                color: {\n                  value: \"#fff\",\n                },\n                consent: false,\n                distance: 100,\n                enable: false,\n                frequency: 1,\n                opacity: 1,\n                shadow: {\n                  blur: 5,\n                  color: {\n                    value: \"#000\",\n                  },\n                  enable: false,\n                },\n                triangles: {\n                  enable: false,\n                  frequency: 1,\n                },\n                width: 1,\n                warp: false,\n              },\n              repulse: {\n                value: 0,\n                enabled: false,\n                distance: 1,\n                duration: 1,\n                factor: 1,\n                speed: 1,\n              },\n            },\n            detectRetina: true,\n          }}\n        />\n      )}\n    </motion.div>\n  );\n};\nCopy\nExpand\nExamples\nStandard\nPreview\nCode\nAutoplay\nPreview\nCode\nStandard\nProps\nProp\tType\tDefault\tDescription\nfirstImage\tstring\t\"\"\tURL of the first image\nsecondImage\tstring\t\"\"\tURL of the second image\nclassName\tstring\tundefined\tAdditional CSS classes for the container\nfirstImageClassName\tstring\tundefined\tAdditional CSS classes for the first image\nsecondImageClassname\tstring\tundefined\tAdditional CSS classes for the second image\ninitialSliderPercentage\tnumber\t50\tInitial position of the slider (0-100)\nslideMode\t\"hover\" | \"drag\"\t\"hover\"\tMode of interaction for the slider\nshowHandlebar\tboolean\ttrue\tWhether to show the slider handle\nautoplay\tboolean\tfalse\tEnable automatic sliding\nautoplayDuration\tnumber\t5000\tDuration of one autoplay cycle in milliseconds\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Card Stack",
    "url": "https://ui.aceternity.com/components/card-stack",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nCard Stack\n\nCards stack on top of each other after some interval. Perfect for showing testimonials.\n\nCard\nTestimonials\nGradient\nFeatures\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/card-stack.tsx\n\n\"use client\";\nimport { useEffect, useState } from \"react\";\nimport { motion } from \"framer-motion\";\n \nlet interval: any;\n \ntype Card = {\n  id: number;\n  name: string;\n  designation: string;\n  content: React.ReactNode;\n};\n \nexport const CardStack = ({\n  items,\n  offset,\n  scaleFactor,\n}: {\n  items: Card[];\n  offset?: number;\n  scaleFactor?: number;\n}) => {\n  const CARD_OFFSET = offset || 10;\n  const SCALE_FACTOR = scaleFactor || 0.06;\n  const [cards, setCards] = useState<Card[]>(items);\n \n  useEffect(() => {\n    startFlipping();\n \n    return () => clearInterval(interval);\n  }, []);\n  const startFlipping = () => {\n    interval = setInterval(() => {\n      setCards((prevCards: Card[]) => {\n        const newArray = [...prevCards]; // create a copy of the array\n        newArray.unshift(newArray.pop()!); // move the last element to the front\n        return newArray;\n      });\n    }, 5000);\n  };\n \n  return (\n    <div className=\"relative  h-60 w-60 md:h-60 md:w-96\">\n      {cards.map((card, index) => {\n        return (\n          <motion.div\n            key={card.id}\n            className=\"absolute dark:bg-black bg-white h-60 w-60 md:h-60 md:w-96 rounded-3xl p-4 shadow-xl border border-neutral-200 dark:border-white/[0.1]  shadow-black/[0.1] dark:shadow-white/[0.05] flex flex-col justify-between\"\n            style={{\n              transformOrigin: \"top center\",\n            }}\n            animate={{\n              top: index * -CARD_OFFSET,\n              scale: 1 - index * SCALE_FACTOR, // decrease scale for cards that are behind\n              zIndex: cards.length - index, //  decrease z-index for the cards that are behind\n            }}\n          >\n            <div className=\"font-normal text-neutral-700 dark:text-neutral-200\">\n              {card.content}\n            </div>\n            <div>\n              <p className=\"text-neutral-500 font-medium dark:text-white\">\n                {card.name}\n              </p>\n              <p className=\"text-neutral-400 font-normal dark:text-neutral-200\">\n                {card.designation}\n              </p>\n            </div>\n          </motion.div>\n        );\n      })}\n    </div>\n  );\n};\nCopy\nExpand\nProps\nProp name\tType\tDescription\nclassName\tstring\tThe class name of the child component.\ncards\tArray<{id: number; name: string; designation: string; content: React.ReactNode;}>\tThe cards that you want to render in the stack effect\noffset\tnumber\tThe offset by which you want the cards to stack\nscaleFactor\tnumber\tThe scale by which you want the cards to stack\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Card Spotlight",
    "url": "https://ui.aceternity.com/components/card-spotlight",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nCard Spotlight\n\nA card component with a spotlight effect revealing a radial gradient background\n\nCard\nFeatures\nSpecial\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge three @react-three/fiber @types/three\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/card-spotlight.tsx\n\n\"use client\";\n \nimport { useMotionValue, motion, useMotionTemplate } from \"framer-motion\";\nimport React, { MouseEvent as ReactMouseEvent, useState } from \"react\";\nimport { CanvasRevealEffect } from \"@/components/ui/canvas-reveal-effect\";\nimport { cn } from \"@/lib/utils\";\n \nexport const CardSpotlight = ({\n  children,\n  radius = 350,\n  color = \"#262626\",\n  className,\n  ...props\n}: {\n  radius?: number;\n  color?: string;\n  children: React.ReactNode;\n} & React.HTMLAttributes<HTMLDivElement>) => {\n  const mouseX = useMotionValue(0);\n  const mouseY = useMotionValue(0);\n  function handleMouseMove({\n    currentTarget,\n    clientX,\n    clientY,\n  }: ReactMouseEvent<HTMLDivElement>) {\n    let { left, top } = currentTarget.getBoundingClientRect();\n \n    mouseX.set(clientX - left);\n    mouseY.set(clientY - top);\n  }\n \n  const [isHovering, setIsHovering] = useState(false);\n  const handleMouseEnter = () => setIsHovering(true);\n  const handleMouseLeave = () => setIsHovering(false);\n  return (\n    <div\n      className={cn(\n        \"group/spotlight p-10 rounded-md relative border border-neutral-800 bg-black dark:border-neutral-800\",\n        className\n      )}\n      onMouseMove={handleMouseMove}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      {...props}\n    >\n      <motion.div\n        className=\"pointer-events-none absolute z-0 -inset-px rounded-md opacity-0 transition duration-300 group-hover/spotlight:opacity-100\"\n        style={{\n          backgroundColor: color,\n          maskImage: useMotionTemplate`\n            radial-gradient(\n              ${radius}px circle at ${mouseX}px ${mouseY}px,\n              white,\n              transparent 80%\n            )\n          `,\n        }}\n      >\n        {isHovering && (\n          <CanvasRevealEffect\n            animationSpeed={5}\n            containerClassName=\"bg-transparent absolute inset-0 pointer-events-none\"\n            colors={[\n              [59, 130, 246],\n              [139, 92, 246],\n            ]}\n            dotSize={3}\n          />\n        )}\n      </motion.div>\n      {children}\n    </div>\n  );\n};\nCopy\nExpand\n\ncomponents/ui/canvas-reveal-effect.tsx\n\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { Canvas, useFrame, useThree } from \"@react-three/fiber\";\nimport React, { useMemo, useRef } from \"react\";\nimport * as THREE from \"three\";\n \nexport const CanvasRevealEffect = ({\n  animationSpeed = 0.4,\n  opacities = [0.3, 0.3, 0.3, 0.5, 0.5, 0.5, 0.8, 0.8, 0.8, 1],\n  colors = [[0, 255, 255]],\n  containerClassName,\n  dotSize,\n  showGradient = true,\n}: {\n  /**\n   * 0.1 - slower\n   * 1.0 - faster\n   */\n  animationSpeed?: number;\n  opacities?: number[];\n  colors?: number[][];\n  containerClassName?: string;\n  dotSize?: number;\n  showGradient?: boolean;\n}) => {\n  return (\n    <div className={cn(\"h-full relative bg-white w-full\", containerClassName)}>\n      <div className=\"h-full w-full\">\n        <DotMatrix\n          colors={colors ?? [[0, 255, 255]]}\n          dotSize={dotSize ?? 3}\n          opacities={\n            opacities ?? [0.3, 0.3, 0.3, 0.5, 0.5, 0.5, 0.8, 0.8, 0.8, 1]\n          }\n          shader={`\n              float animation_speed_factor = ${animationSpeed.toFixed(1)};\n              float intro_offset = distance(u_resolution / 2.0 / u_total_size, st2) * 0.01 + (random(st2) * 0.15);\n              opacity *= step(intro_offset, u_time * animation_speed_factor);\n              opacity *= clamp((1.0 - step(intro_offset + 0.1, u_time * animation_speed_factor)) * 1.25, 1.0, 1.25);\n            `}\n          center={[\"x\", \"y\"]}\n        />\n      </div>\n      {showGradient && (\n        <div className=\"absolute inset-0 bg-gradient-to-t from-gray-950 to-[84%]\" />\n      )}\n    </div>\n  );\n};\n \ninterface DotMatrixProps {\n  colors?: number[][];\n  opacities?: number[];\n  totalSize?: number;\n  dotSize?: number;\n  shader?: string;\n  center?: (\"x\" | \"y\")[];\n}\n \nconst DotMatrix: React.FC<DotMatrixProps> = ({\n  colors = [[0, 0, 0]],\n  opacities = [0.04, 0.04, 0.04, 0.04, 0.04, 0.08, 0.08, 0.08, 0.08, 0.14],\n  totalSize = 4,\n  dotSize = 2,\n  shader = \"\",\n  center = [\"x\", \"y\"],\n}) => {\n  const uniforms = React.useMemo(() => {\n    let colorsArray = [\n      colors[0],\n      colors[0],\n      colors[0],\n      colors[0],\n      colors[0],\n      colors[0],\n    ];\n    if (colors.length === 2) {\n      colorsArray = [\n        colors[0],\n        colors[0],\n        colors[0],\n        colors[1],\n        colors[1],\n        colors[1],\n      ];\n    } else if (colors.length === 3) {\n      colorsArray = [\n        colors[0],\n        colors[0],\n        colors[1],\n        colors[1],\n        colors[2],\n        colors[2],\n      ];\n    }\n \n    return {\n      u_colors: {\n        value: colorsArray.map((color) => [\n          color[0] / 255,\n          color[1] / 255,\n          color[2] / 255,\n        ]),\n        type: \"uniform3fv\",\n      },\n      u_opacities: {\n        value: opacities,\n        type: \"uniform1fv\",\n      },\n      u_total_size: {\n        value: totalSize,\n        type: \"uniform1f\",\n      },\n      u_dot_size: {\n        value: dotSize,\n        type: \"uniform1f\",\n      },\n    };\n  }, [colors, opacities, totalSize, dotSize]);\n \n  return (\n    <Shader\n      source={`\n        precision mediump float;\n        in vec2 fragCoord;\n \n        uniform float u_time;\n        uniform float u_opacities[10];\n        uniform vec3 u_colors[6];\n        uniform float u_total_size;\n        uniform float u_dot_size;\n        uniform vec2 u_resolution;\n        out vec4 fragColor;\n        float PHI = 1.61803398874989484820459;\n        float random(vec2 xy) {\n            return fract(tan(distance(xy * PHI, xy) * 0.5) * xy.x);\n        }\n        float map(float value, float min1, float max1, float min2, float max2) {\n            return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n        }\n        void main() {\n            vec2 st = fragCoord.xy;\n            ${\n              center.includes(\"x\")\n                ? \"st.x -= abs(floor((mod(u_resolution.x, u_total_size) - u_dot_size) * 0.5));\"\n                : \"\"\n            }\n            ${\n              center.includes(\"y\")\n                ? \"st.y -= abs(floor((mod(u_resolution.y, u_total_size) - u_dot_size) * 0.5));\"\n                : \"\"\n            }\n      float opacity = step(0.0, st.x);\n      opacity *= step(0.0, st.y);\n \n      vec2 st2 = vec2(int(st.x / u_total_size), int(st.y / u_total_size));\n \n      float frequency = 5.0;\n      float show_offset = random(st2);\n      float rand = random(st2 * floor((u_time / frequency) + show_offset + frequency) + 1.0);\n      opacity *= u_opacities[int(rand * 10.0)];\n      opacity *= 1.0 - step(u_dot_size / u_total_size, fract(st.x / u_total_size));\n      opacity *= 1.0 - step(u_dot_size / u_total_size, fract(st.y / u_total_size));\n \n      vec3 color = u_colors[int(show_offset * 6.0)];\n \n      ${shader}\n \n      fragColor = vec4(color, opacity);\n      fragColor.rgb *= fragColor.a;\n        }`}\n      uniforms={uniforms}\n      maxFps={60}\n    />\n  );\n};\n \ntype Uniforms = {\n  [key: string]: {\n    value: number[] | number[][] | number;\n    type: string;\n  };\n};\nconst ShaderMaterial = ({\n  source,\n  uniforms,\n  maxFps = 60,\n}: {\n  source: string;\n  hovered?: boolean;\n  maxFps?: number;\n  uniforms: Uniforms;\n}) => {\n  const { size } = useThree();\n  const ref = useRef<THREE.Mesh>();\n  let lastFrameTime = 0;\n \n  useFrame(({ clock }) => {\n    if (!ref.current) return;\n    const timestamp = clock.getElapsedTime();\n    if (timestamp - lastFrameTime < 1 / maxFps) {\n      return;\n    }\n    lastFrameTime = timestamp;\n \n    const material: any = ref.current.material;\n    const timeLocation = material.uniforms.u_time;\n    timeLocation.value = timestamp;\n  });\n \n  const getUniforms = () => {\n    const preparedUniforms: any = {};\n \n    for (const uniformName in uniforms) {\n      const uniform: any = uniforms[uniformName];\n \n      switch (uniform.type) {\n        case \"uniform1f\":\n          preparedUniforms[uniformName] = { value: uniform.value, type: \"1f\" };\n          break;\n        case \"uniform3f\":\n          preparedUniforms[uniformName] = {\n            value: new THREE.Vector3().fromArray(uniform.value),\n            type: \"3f\",\n          };\n          break;\n        case \"uniform1fv\":\n          preparedUniforms[uniformName] = { value: uniform.value, type: \"1fv\" };\n          break;\n        case \"uniform3fv\":\n          preparedUniforms[uniformName] = {\n            value: uniform.value.map((v: number[]) =>\n              new THREE.Vector3().fromArray(v)\n            ),\n            type: \"3fv\",\n          };\n          break;\n        case \"uniform2f\":\n          preparedUniforms[uniformName] = {\n            value: new THREE.Vector2().fromArray(uniform.value),\n            type: \"2f\",\n          };\n          break;\n        default:\n          console.error(`Invalid uniform type for '${uniformName}'.`);\n          break;\n      }\n    }\n \n    preparedUniforms[\"u_time\"] = { value: 0, type: \"1f\" };\n    preparedUniforms[\"u_resolution\"] = {\n      value: new THREE.Vector2(size.width * 2, size.height * 2),\n    }; // Initialize u_resolution\n    return preparedUniforms;\n  };\n \n  // Shader material\n  const material = useMemo(() => {\n    const materialObject = new THREE.ShaderMaterial({\n      vertexShader: `\n      precision mediump float;\n      in vec2 coordinates;\n      uniform vec2 u_resolution;\n      out vec2 fragCoord;\n      void main(){\n        float x = position.x;\n        float y = position.y;\n        gl_Position = vec4(x, y, 0.0, 1.0);\n        fragCoord = (position.xy + vec2(1.0)) * 0.5 * u_resolution;\n        fragCoord.y = u_resolution.y - fragCoord.y;\n      }\n      `,\n      fragmentShader: source,\n      uniforms: getUniforms(),\n      glslVersion: THREE.GLSL3,\n      blending: THREE.CustomBlending,\n      blendSrc: THREE.SrcAlphaFactor,\n      blendDst: THREE.OneFactor,\n    });\n \n    return materialObject;\n  }, [size.width, size.height, source]);\n \n  return (\n    <mesh ref={ref as any}>\n      <planeGeometry args={[2, 2]} />\n      <primitive object={material} attach=\"material\" />\n    </mesh>\n  );\n};\n \nconst Shader: React.FC<ShaderProps> = ({ source, uniforms, maxFps = 60 }) => {\n  return (\n    <Canvas className=\"absolute inset-0  h-full w-full\">\n      <ShaderMaterial source={source} uniforms={uniforms} maxFps={maxFps} />\n    </Canvas>\n  );\n};\ninterface ShaderProps {\n  source: string;\n  uniforms: {\n    [key: string]: {\n      value: number[] | number[][] | number;\n      type: string;\n    };\n  };\n  maxFps?: number;\n}\nCopy\nExpand\nProps\nProp Name\tType\tDefault Value\tDescription\nchildren\tReact.ReactNode\tRequired\tThe content to be rendered inside the card.\nradius\tnumber\t350\tThe radius of the spotlight effect in pixels.\ncolor\tstring\t\"#262626\"\tThe background color of the spotlight effect.\nclassName\tstring\tundefined\tAdditional CSS classes to be applied to the con\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Hover Effect",
    "url": "https://ui.aceternity.com/components/card-hover-effect",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nHover Effect\n\nHover over the cards and the effect slides to the currently hovered card.\n\nCard\nSpecial\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/card-hover-effect.tsx\n\nimport { cn } from \"@/lib/utils\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport Link from \"next/link\";\nimport { useState } from \"react\";\n \nexport const HoverEffect = ({\n  items,\n  className,\n}: {\n  items: {\n    title: string;\n    description: string;\n    link: string;\n  }[];\n  className?: string;\n}) => {\n  let [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n \n  return (\n    <div\n      className={cn(\n        \"grid grid-cols-1 md:grid-cols-2  lg:grid-cols-3  py-10\",\n        className\n      )}\n    >\n      {items.map((item, idx) => (\n        <Link\n          href={item?.link}\n          key={item?.link}\n          className=\"relative group  block p-2 h-full w-full\"\n          onMouseEnter={() => setHoveredIndex(idx)}\n          onMouseLeave={() => setHoveredIndex(null)}\n        >\n          <AnimatePresence>\n            {hoveredIndex === idx && (\n              <motion.span\n                className=\"absolute inset-0 h-full w-full bg-neutral-200 dark:bg-slate-800/[0.8] block  rounded-3xl\"\n                layoutId=\"hoverBackground\"\n                initial={{ opacity: 0 }}\n                animate={{\n                  opacity: 1,\n                  transition: { duration: 0.15 },\n                }}\n                exit={{\n                  opacity: 0,\n                  transition: { duration: 0.15, delay: 0.2 },\n                }}\n              />\n            )}\n          </AnimatePresence>\n          <Card>\n            <CardTitle>{item.title}</CardTitle>\n            <CardDescription>{item.description}</CardDescription>\n          </Card>\n        </Link>\n      ))}\n    </div>\n  );\n};\n \nexport const Card = ({\n  className,\n  children,\n}: {\n  className?: string;\n  children: React.ReactNode;\n}) => {\n  return (\n    <div\n      className={cn(\n        \"rounded-2xl h-full w-full p-4 overflow-hidden bg-black border border-transparent dark:border-white/[0.2] group-hover:border-slate-700 relative z-20\",\n        className\n      )}\n    >\n      <div className=\"relative z-50\">\n        <div className=\"p-4\">{children}</div>\n      </div>\n    </div>\n  );\n};\nexport const CardTitle = ({\n  className,\n  children,\n}: {\n  className?: string;\n  children: React.ReactNode;\n}) => {\n  return (\n    <h4 className={cn(\"text-zinc-100 font-bold tracking-wide mt-4\", className)}>\n      {children}\n    </h4>\n  );\n};\nexport const CardDescription = ({\n  className,\n  children,\n}: {\n  className?: string;\n  children: React.ReactNode;\n}) => {\n  return (\n    <p\n      className={cn(\n        \"mt-8 text-zinc-400 tracking-wide leading-relaxed text-sm\",\n        className\n      )}\n    >\n      {children}\n    </p>\n  );\n};\nCopy\nExpand\nProps\nProp name\tType\tDescription\nclassName\tstring\tThe class name of the child component.\nitems\t{title: string, description: string, link: ReactNode}\titems that you can map through, passed as props to the HoverEffect component\nchildren\tReactNode\tChildren to the Card CardTitle and CardDescription component\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Canvas Reveal Effect",
    "url": "https://ui.aceternity.com/components/canvas-reveal-effect",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nCanvas Reveal Effect\n\nA dot background that expands on hover, as seen on Clerk's website\n\nCard\nBackground\nGradient\nCanvas\nSpecial\nCall To Action\nPreview\nCode\nSheetal is Nisha\nNisha is Munni\nMunni is Aditi\nInstallation\nCLI\nManual\nInstall util dependencies\nnpm i framer-motion clsx tailwind-merge three @react-three/fiber\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/canvas-reveal-effect.tsx\n\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { Canvas, useFrame, useThree } from \"@react-three/fiber\";\nimport React, { useMemo, useRef } from \"react\";\nimport * as THREE from \"three\";\n \nexport const CanvasRevealEffect = ({\n  animationSpeed = 0.4,\n  opacities = [0.3, 0.3, 0.3, 0.5, 0.5, 0.5, 0.8, 0.8, 0.8, 1],\n  colors = [[0, 255, 255]],\n  containerClassName,\n  dotSize,\n  showGradient = true,\n}: {\n  /**\n   * 0.1 - slower\n   * 1.0 - faster\n   */\n  animationSpeed?: number;\n  opacities?: number[];\n  colors?: number[][];\n  containerClassName?: string;\n  dotSize?: number;\n  showGradient?: boolean;\n}) => {\n  return (\n    <div className={cn(\"h-full relative bg-white w-full\", containerClassName)}>\n      <div className=\"h-full w-full\">\n        <DotMatrix\n          colors={colors ?? [[0, 255, 255]]}\n          dotSize={dotSize ?? 3}\n          opacities={\n            opacities ?? [0.3, 0.3, 0.3, 0.5, 0.5, 0.5, 0.8, 0.8, 0.8, 1]\n          }\n          shader={`\n              float animation_speed_factor = ${animationSpeed.toFixed(1)};\n              float intro_offset = distance(u_resolution / 2.0 / u_total_size, st2) * 0.01 + (random(st2) * 0.15);\n              opacity *= step(intro_offset, u_time * animation_speed_factor);\n              opacity *= clamp((1.0 - step(intro_offset + 0.1, u_time * animation_speed_factor)) * 1.25, 1.0, 1.25);\n            `}\n          center={[\"x\", \"y\"]}\n        />\n      </div>\n      {showGradient && (\n        <div className=\"absolute inset-0 bg-gradient-to-t from-gray-950 to-[84%]\" />\n      )}\n    </div>\n  );\n};\n \ninterface DotMatrixProps {\n  colors?: number[][];\n  opacities?: number[];\n  totalSize?: number;\n  dotSize?: number;\n  shader?: string;\n  center?: (\"x\" | \"y\")[];\n}\n \nconst DotMatrix: React.FC<DotMatrixProps> = ({\n  colors = [[0, 0, 0]],\n  opacities = [0.04, 0.04, 0.04, 0.04, 0.04, 0.08, 0.08, 0.08, 0.08, 0.14],\n  totalSize = 4,\n  dotSize = 2,\n  shader = \"\",\n  center = [\"x\", \"y\"],\n}) => {\n  const uniforms = React.useMemo(() => {\n    let colorsArray = [\n      colors[0],\n      colors[0],\n      colors[0],\n      colors[0],\n      colors[0],\n      colors[0],\n    ];\n    if (colors.length === 2) {\n      colorsArray = [\n        colors[0],\n        colors[0],\n        colors[0],\n        colors[1],\n        colors[1],\n        colors[1],\n      ];\n    } else if (colors.length === 3) {\n      colorsArray = [\n        colors[0],\n        colors[0],\n        colors[1],\n        colors[1],\n        colors[2],\n        colors[2],\n      ];\n    }\n \n    return {\n      u_colors: {\n        value: colorsArray.map((color) => [\n          color[0] / 255,\n          color[1] / 255,\n          color[2] / 255,\n        ]),\n        type: \"uniform3fv\",\n      },\n      u_opacities: {\n        value: opacities,\n        type: \"uniform1fv\",\n      },\n      u_total_size: {\n        value: totalSize,\n        type: \"uniform1f\",\n      },\n      u_dot_size: {\n        value: dotSize,\n        type: \"uniform1f\",\n      },\n    };\n  }, [colors, opacities, totalSize, dotSize]);\n \n  return (\n    <Shader\n      source={`\n        precision mediump float;\n        in vec2 fragCoord;\n \n        uniform float u_time;\n        uniform float u_opacities[10];\n        uniform vec3 u_colors[6];\n        uniform float u_total_size;\n        uniform float u_dot_size;\n        uniform vec2 u_resolution;\n        out vec4 fragColor;\n        float PHI = 1.61803398874989484820459;\n        float random(vec2 xy) {\n            return fract(tan(distance(xy * PHI, xy) * 0.5) * xy.x);\n        }\n        float map(float value, float min1, float max1, float min2, float max2) {\n            return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n        }\n        void main() {\n            vec2 st = fragCoord.xy;\n            ${\n              center.includes(\"x\")\n                ? \"st.x -= abs(floor((mod(u_resolution.x, u_total_size) - u_dot_size) * 0.5));\"\n                : \"\"\n            }\n            ${\n              center.includes(\"y\")\n                ? \"st.y -= abs(floor((mod(u_resolution.y, u_total_size) - u_dot_size) * 0.5));\"\n                : \"\"\n            }\n      float opacity = step(0.0, st.x);\n      opacity *= step(0.0, st.y);\n \n      vec2 st2 = vec2(int(st.x / u_total_size), int(st.y / u_total_size));\n \n      float frequency = 5.0;\n      float show_offset = random(st2);\n      float rand = random(st2 * floor((u_time / frequency) + show_offset + frequency) + 1.0);\n      opacity *= u_opacities[int(rand * 10.0)];\n      opacity *= 1.0 - step(u_dot_size / u_total_size, fract(st.x / u_total_size));\n      opacity *= 1.0 - step(u_dot_size / u_total_size, fract(st.y / u_total_size));\n \n      vec3 color = u_colors[int(show_offset * 6.0)];\n \n      ${shader}\n \n      fragColor = vec4(color, opacity);\n      fragColor.rgb *= fragColor.a;\n        }`}\n      uniforms={uniforms}\n      maxFps={60}\n    />\n  );\n};\n \ntype Uniforms = {\n  [key: string]: {\n    value: number[] | number[][] | number;\n    type: string;\n  };\n};\nconst ShaderMaterial = ({\n  source,\n  uniforms,\n  maxFps = 60,\n}: {\n  source: string;\n  hovered?: boolean;\n  maxFps?: number;\n  uniforms: Uniforms;\n}) => {\n  const { size } = useThree();\n  const ref = useRef<THREE.Mesh>();\n  let lastFrameTime = 0;\n \n  useFrame(({ clock }) => {\n    if (!ref.current) return;\n    const timestamp = clock.getElapsedTime();\n    if (timestamp - lastFrameTime < 1 / maxFps) {\n      return;\n    }\n    lastFrameTime = timestamp;\n \n    const material: any = ref.current.material;\n    const timeLocation = material.uniforms.u_time;\n    timeLocation.value = timestamp;\n  });\n \n  const getUniforms = () => {\n    const preparedUniforms: any = {};\n \n    for (const uniformName in uniforms) {\n      const uniform: any = uniforms[uniformName];\n \n      switch (uniform.type) {\n        case \"uniform1f\":\n          preparedUniforms[uniformName] = { value: uniform.value, type: \"1f\" };\n          break;\n        case \"uniform3f\":\n          preparedUniforms[uniformName] = {\n            value: new THREE.Vector3().fromArray(uniform.value),\n            type: \"3f\",\n          };\n          break;\n        case \"uniform1fv\":\n          preparedUniforms[uniformName] = { value: uniform.value, type: \"1fv\" };\n          break;\n        case \"uniform3fv\":\n          preparedUniforms[uniformName] = {\n            value: uniform.value.map((v: number[]) =>\n              new THREE.Vector3().fromArray(v)\n            ),\n            type: \"3fv\",\n          };\n          break;\n        case \"uniform2f\":\n          preparedUniforms[uniformName] = {\n            value: new THREE.Vector2().fromArray(uniform.value),\n            type: \"2f\",\n          };\n          break;\n        default:\n          console.error(`Invalid uniform type for '${uniformName}'.`);\n          break;\n      }\n    }\n \n    preparedUniforms[\"u_time\"] = { value: 0, type: \"1f\" };\n    preparedUniforms[\"u_resolution\"] = {\n      value: new THREE.Vector2(size.width * 2, size.height * 2),\n    }; // Initialize u_resolution\n    return preparedUniforms;\n  };\n \n  // Shader material\n  const material = useMemo(() => {\n    const materialObject = new THREE.ShaderMaterial({\n      vertexShader: `\n      precision mediump float;\n      in vec2 coordinates;\n      uniform vec2 u_resolution;\n      out vec2 fragCoord;\n      void main(){\n        float x = position.x;\n        float y = position.y;\n        gl_Position = vec4(x, y, 0.0, 1.0);\n        fragCoord = (position.xy + vec2(1.0)) * 0.5 * u_resolution;\n        fragCoord.y = u_resolution.y - fragCoord.y;\n      }\n      `,\n      fragmentShader: source,\n      uniforms: getUniforms(),\n      glslVersion: THREE.GLSL3,\n      blending: THREE.CustomBlending,\n      blendSrc: THREE.SrcAlphaFactor,\n      blendDst: THREE.OneFactor,\n    });\n \n    return materialObject;\n  }, [size.width, size.height, source]);\n \n  return (\n    <mesh ref={ref as any}>\n      <planeGeometry args={[2, 2]} />\n      <primitive object={material} attach=\"material\" />\n    </mesh>\n  );\n};\n \nconst Shader: React.FC<ShaderProps> = ({ source, uniforms, maxFps = 60 }) => {\n  return (\n    <Canvas className=\"absolute inset-0  h-full w-full\">\n      <ShaderMaterial source={source} uniforms={uniforms} maxFps={maxFps} />\n    </Canvas>\n  );\n};\ninterface ShaderProps {\n  source: string;\n  uniforms: {\n    [key: string]: {\n      value: number[] | number[][] | number;\n      type: string;\n    };\n  };\n  maxFps?: number;\n}\nCopy\nExpand\nSection\nPreview\nCode\n\nWith insomnia, nothing's real. Everything is far away. Everything is a copy, of a copy, of a copy\n\nStatic\nPreview\nCode\nI'm static and I know it.\nProps\nComponent\tProp Name\tType\tDefault Value\tDescription\nCanvasRevealEffect\tanimationSpeed\tnumber\t0.4\tAnimation speed, where 0.1 is slower and 1.0 is faster.\nCanvasRevealEffect\topacities\tnumber[]\t[0.3, 0.3, 0.3, 0.5, 0.5, 0.5, 0.8, 0.8, 0.8, 1]\tArray of opacities for the effect.\nCanvasRevealEffect\tcolors\tnumber[][]\t[[0, 255, 255]]\tArray of RGB color arrays to use in the effect.\nCanvasRevealEffect\tcontainerClassName\tstring\t\tAdditional class name(s) for the container div.\nCanvasRevealEffect\tdotSize\tnumber\t\tSize of the dots in the effect.\nDotMatrix\tcolors\tnumber[][]\t[[0, 0, 0]]\tArray of RGB color arrays for the dots. Default is black.\nDotMatrix\topacities\tnumber[]\t[0.04, 0.04, 0.04, 0.04, 0.04, 0.08, 0.08, 0.08, 0.08, 0.14]\tArray of opacities for the dots.\nDotMatrix\ttotalSize\tnumber\t4\tTotal size of the effect area.\nDotMatrix\tdotSize\tnumber\t2\tSize of the individual dots.\nDotMatrix\tshader\tstring\t\tCustom shader code to apply to the dots.\nDotMatrix\tcenter\t(\"x\" | \"y\")[]\t[\"x\", \"y\"]\tArray indicating whether to center the effect on the x and/or y axis.\nShaderMaterial\tsource\tstring\t\tGLSL source code for the shader.\nShaderMaterial\tuniforms\tUniforms\t\tUniform variables for the shader.\nShaderMaterial\tmaxFps\tnumber\t60\tMaximum frames per second for the shader animation.\nShader\tsource\tstring\t\tGLSL source code for the shader.\nShader\tuniforms\tUniforms\t\tUniform variables for the shader.\nShader\tmaxFps\tnumber\t60\tMaximum frames per second for the shader animation.\n\nThe inspiration for this effect is directly taken from Clerk's website.\n\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Bento Grid",
    "url": "https://ui.aceternity.com/components/bento-grid",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nBento Grid\n\nA skewed grid layout with Title, description and a header component\n\nCard\nGrid\nHover\nFeatures\nPreview\nCode\nThe Dawn of Innovation\nExplore the birth of groundbreaking ideas and inventions.\nThe Digital Revolution\nDive into the transformative power of technology.\nThe Art of Design\nDiscover the beauty of thoughtful and functional design.\nThe Power of Communication\nUnderstand the impact of effective communication in our lives.\nThe Pursuit of Knowledge\nJoin the quest for understanding and enlightenment.\nThe Joy of Creation\nExperience the thrill of bringing ideas to life.\nThe Spirit of Adventure\nEmbark on exciting journeys and thrilling discoveries.\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge @tabler/icons-react\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/bento-grid.tsx\n\nimport { cn } from \"@/lib/utils\";\n \nexport const BentoGrid = ({\n  className,\n  children,\n}: {\n  className?: string;\n  children?: React.ReactNode;\n}) => {\n  return (\n    <div\n      className={cn(\n        \"grid md:auto-rows-[18rem] grid-cols-1 md:grid-cols-3 gap-4 max-w-7xl mx-auto \",\n        className\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n \nexport const BentoGridItem = ({\n  className,\n  title,\n  description,\n  header,\n  icon,\n}: {\n  className?: string;\n  title?: string | React.ReactNode;\n  description?: string | React.ReactNode;\n  header?: React.ReactNode;\n  icon?: React.ReactNode;\n}) => {\n  return (\n    <div\n      className={cn(\n        \"row-span-1 rounded-xl group/bento hover:shadow-xl transition duration-200 shadow-input dark:shadow-none p-4 dark:bg-black dark:border-white/[0.2] bg-white border border-transparent justify-between flex flex-col space-y-4\",\n        className\n      )}\n    >\n      {header}\n      <div className=\"group-hover/bento:translate-x-2 transition duration-200\">\n        {icon}\n        <div className=\"font-sans font-bold text-neutral-600 dark:text-neutral-200 mb-2 mt-2\">\n          {title}\n        </div>\n        <div className=\"font-sans font-normal text-neutral-600 text-xs dark:text-neutral-300\">\n          {description}\n        </div>\n      </div>\n    </div>\n  );\n};\nCopy\nExpand\nExample\nPopulated with Header and Content\nPreview\nCode\nAI Content Generation\nExperience the power of AI in generating unique content.\nAutomated Proofreading\nLet AI handle the proofreading of your documents.\nContextual Suggestions\nGet AI-powered suggestions based on your writing context.\n\nJust code in Vanilla Javascript\n\nDelusional\n\nTailwind CSS is cool, you know\n\nSensible\n\nI love angular, RSC, and Redux.\n\nHelpless\n\nSentiment Analysis\nUnderstand the sentiment of your text with AI analysis.\n\nThere are a lot of cool framerworks out there like React, Angular, Vue, Svelte that can make your life ....\n\nUse PHP.\n\nText Summarization\nSummarize your lengthy documents with AI technology.\n2 Column Grid\nPreview\nCode\nThe Dawn of Innovation\nExplore the birth of groundbreaking ideas and inventions.\nThe Digital Revolution\nDive into the transformative power of technology.\nThe Art of Design\nDiscover the beauty of thoughtful and functional design.\nThe Power of Communication\nUnderstand the impact of effective communication in our lives.\nProps\nProp name\tType\tDescription\nclassName\tstring\tThe class name of the child component.\nitems\t{title: string, description: string, header: ReactNode, icon: ReactNode}\titems that you can map through, passed as props to the BentoGridItem component\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Background Boxes",
    "url": "https://ui.aceternity.com/components/background-boxes",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nBackground Boxes\n\nA full width background box container that highlights on hover\n\nCard\nBackground\nGradient\nSpecial\nCall To Action\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nAdd the following code in tailwind.config.js file\nconst defaultTheme = require(\"tailwindcss/defaultTheme\");\nconst colors = require(\"tailwindcss/colors\");\nconst {\n  default: flattenColorPalette,\n} = require(\"tailwindcss/lib/util/flattenColorPalette\");\n \n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./src/**/*.{ts,tsx}\"],\n  darkMode: \"class\",\n  theme: {\n    // rest of the code\n  },\n  plugins: [\n    // rest of the code\n    addVariablesForColors,\n  ],\n};\n \n// This plugin adds each Tailwind color as a global CSS variable, e.g. var(--gray-200).\nfunction addVariablesForColors({ addBase, theme }: any) {\n  let allColors = flattenColorPalette(theme(\"colors\"));\n  let newVars = Object.fromEntries(\n    Object.entries(allColors).map(([key, val]) => [`--${key}`, val])\n  );\n \n  addBase({\n    \":root\": newVars,\n  });\n}\nCopy\nCopy the source code\n\ncomponents/ui/background-boxes.tsx\n\n\"use client\";\nimport React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n \nexport const BoxesCore = ({ className, ...rest }: { className?: string }) => {\n  const rows = new Array(150).fill(1);\n  const cols = new Array(100).fill(1);\n  let colors = [\n    \"--sky-300\",\n    \"--pink-300\",\n    \"--green-300\",\n    \"--yellow-300\",\n    \"--red-300\",\n    \"--purple-300\",\n    \"--blue-300\",\n    \"--indigo-300\",\n    \"--violet-300\",\n  ];\n  const getRandomColor = () => {\n    return colors[Math.floor(Math.random() * colors.length)];\n  };\n \n  return (\n    <div\n      style={{\n        transform: `translate(-40%,-60%) skewX(-48deg) skewY(14deg) scale(0.675) rotate(0deg) translateZ(0)`,\n      }}\n      className={cn(\n        \"absolute left-1/4 p-4 -top-1/4 flex  -translate-x-1/2 -translate-y-1/2 w-full h-full z-0 \",\n        className\n      )}\n      {...rest}\n    >\n      {rows.map((_, i) => (\n        <motion.div\n          key={`row` + i}\n          className=\"w-16 h-8  border-l  border-slate-700 relative\"\n        >\n          {cols.map((_, j) => (\n            <motion.div\n              whileHover={{\n                backgroundColor: `var(${getRandomColor()})`,\n                transition: { duration: 0 },\n              }}\n              animate={{\n                transition: { duration: 2 },\n              }}\n              key={`col` + j}\n              className=\"w-16 h-8  border-r border-t border-slate-700 relative\"\n            >\n              {j % 2 === 0 && i % 2 === 0 ? (\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  strokeWidth=\"1.5\"\n                  stroke=\"currentColor\"\n                  className=\"absolute h-6 w-10 -top-[14px] -left-[22px] text-slate-700 stroke-[1px] pointer-events-none\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    d=\"M12 6v12m6-6H6\"\n                  />\n                </svg>\n              ) : null}\n            </motion.div>\n          ))}\n        </motion.div>\n      ))}\n    </div>\n  );\n};\n \nexport const Boxes = React.memo(BoxesCore);\nCopy\nExpand\nProps\nProp name\tType\tDescription\nclassName\tstring (optional)\tThe class name of the Boxes component.\nrest\tany (optional)\tThe rest of the props.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Background Gradient",
    "url": "https://ui.aceternity.com/components/background-gradient",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nBackground Gradient\n\nAn animated gradient that sits at the background of a card, button or anything.\n\nCard\nBackground\nGradient\nSpecial\nCall To Action\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/background-gradient.tsx\n\nimport { cn } from \"@/lib/utils\";\nimport React from \"react\";\nimport { motion } from \"framer-motion\";\n \nexport const BackgroundGradient = ({\n  children,\n  className,\n  containerClassName,\n  animate = true,\n}: {\n  children?: React.ReactNode;\n  className?: string;\n  containerClassName?: string;\n  animate?: boolean;\n}) => {\n  const variants = {\n    initial: {\n      backgroundPosition: \"0 50%\",\n    },\n    animate: {\n      backgroundPosition: [\"0, 50%\", \"100% 50%\", \"0 50%\"],\n    },\n  };\n  return (\n    <div className={cn(\"relative p-[4px] group\", containerClassName)}>\n      <motion.div\n        variants={animate ? variants : undefined}\n        initial={animate ? \"initial\" : undefined}\n        animate={animate ? \"animate\" : undefined}\n        transition={\n          animate\n            ? {\n                duration: 5,\n                repeat: Infinity,\n                repeatType: \"reverse\",\n              }\n            : undefined\n        }\n        style={{\n          backgroundSize: animate ? \"400% 400%\" : undefined,\n        }}\n        className={cn(\n          \"absolute inset-0 rounded-3xl z-[1] opacity-60 group-hover:opacity-100 blur-xl  transition duration-500 will-change-transform\",\n          \" bg-[radial-gradient(circle_farthest-side_at_0_100%,#00ccb1,transparent),radial-gradient(circle_farthest-side_at_100%_0,#7b61ff,transparent),radial-gradient(circle_farthest-side_at_100%_100%,#ffc414,transparent),radial-gradient(circle_farthest-side_at_0_0,#1ca0fb,#141316)]\"\n        )}\n      />\n      <motion.div\n        variants={animate ? variants : undefined}\n        initial={animate ? \"initial\" : undefined}\n        animate={animate ? \"animate\" : undefined}\n        transition={\n          animate\n            ? {\n                duration: 5,\n                repeat: Infinity,\n                repeatType: \"reverse\",\n              }\n            : undefined\n        }\n        style={{\n          backgroundSize: animate ? \"400% 400%\" : undefined,\n        }}\n        className={cn(\n          \"absolute inset-0 rounded-3xl z-[1] will-change-transform\",\n          \"bg-[radial-gradient(circle_farthest-side_at_0_100%,#00ccb1,transparent),radial-gradient(circle_farthest-side_at_100%_0,#7b61ff,transparent),radial-gradient(circle_farthest-side_at_100%_100%,#ffc414,transparent),radial-gradient(circle_farthest-side_at_0_0,#1ca0fb,#141316)]\"\n        )}\n      />\n \n      <div className={cn(\"relative z-10\", className)}>{children}</div>\n    </div>\n  );\n};\nCopy\nExpand\nProps\nProp\tType\tDefault\tDescription\nchildren\tReact.ReactNode\tundefined\tThe content to be rendered within the gradient background.\nclassName\tstring\tundefined\tThe CSS class to be applied to the inner div.\ncontainerClassName\tstring\tundefined\tThe CSS class to be applied to the outermost div.\nanimate\tboolean\ttrue\tDetermines whether the gradient background should animate. If false, the gradient background will be static.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Background Beams With Collision",
    "url": "https://ui.aceternity.com/components/background-beams-with-collision",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nBackground Beams With Collision\n\nExploding beams in the background\n\nUi\nBackground\nPreview\nCode\nWhat's cooler than Beams? \nExploding beams.\nExploding beams.\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge @tabler/icons-react\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/background-beams-with-collision.tsx\n\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport React, { useRef, useState, useEffect } from \"react\";\n \nexport const BackgroundBeamsWithCollision = ({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const parentRef = useRef<HTMLDivElement>(null);\n \n  const beams = [\n    {\n      initialX: 10,\n      translateX: 10,\n      duration: 7,\n      repeatDelay: 3,\n      delay: 2,\n    },\n    {\n      initialX: 600,\n      translateX: 600,\n      duration: 3,\n      repeatDelay: 3,\n      delay: 4,\n    },\n    {\n      initialX: 100,\n      translateX: 100,\n      duration: 7,\n      repeatDelay: 7,\n      className: \"h-6\",\n    },\n    {\n      initialX: 400,\n      translateX: 400,\n      duration: 5,\n      repeatDelay: 14,\n      delay: 4,\n    },\n    {\n      initialX: 800,\n      translateX: 800,\n      duration: 11,\n      repeatDelay: 2,\n      className: \"h-20\",\n    },\n    {\n      initialX: 1000,\n      translateX: 1000,\n      duration: 4,\n      repeatDelay: 2,\n      className: \"h-12\",\n    },\n    {\n      initialX: 1200,\n      translateX: 1200,\n      duration: 6,\n      repeatDelay: 4,\n      delay: 2,\n      className: \"h-6\",\n    },\n  ];\n \n  return (\n    <div\n      ref={parentRef}\n      className={cn(\n        \"h-96 md:h-[40rem] bg-gradient-to-b from-white to-neutral-100 dark:from-neutral-950 dark:to-neutral-800 relative flex items-center w-full justify-center overflow-hidden\",\n        // h-screen if you want bigger\n        className\n      )}\n    >\n      {beams.map((beam) => (\n        <CollisionMechanism\n          key={beam.initialX + \"beam-idx\"}\n          beamOptions={beam}\n          containerRef={containerRef}\n          parentRef={parentRef}\n        />\n      ))}\n \n      {children}\n      <div\n        ref={containerRef}\n        className=\"absolute bottom-0 bg-neutral-100 w-full inset-x-0 pointer-events-none\"\n        style={{\n          boxShadow:\n            \"0 0 24px rgba(34, 42, 53, 0.06), 0 1px 1px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(34, 42, 53, 0.04), 0 0 4px rgba(34, 42, 53, 0.08), 0 16px 68px rgba(47, 48, 55, 0.05), 0 1px 0 rgba(255, 255, 255, 0.1) inset\",\n        }}\n      ></div>\n    </div>\n  );\n};\n \nconst CollisionMechanism = React.forwardRef<\n  HTMLDivElement,\n  {\n    containerRef: React.RefObject<HTMLDivElement>;\n    parentRef: React.RefObject<HTMLDivElement>;\n    beamOptions?: {\n      initialX?: number;\n      translateX?: number;\n      initialY?: number;\n      translateY?: number;\n      rotate?: number;\n      className?: string;\n      duration?: number;\n      delay?: number;\n      repeatDelay?: number;\n    };\n  }\n>(({ parentRef, containerRef, beamOptions = {} }, ref) => {\n  const beamRef = useRef<HTMLDivElement>(null);\n  const [collision, setCollision] = useState<{\n    detected: boolean;\n    coordinates: { x: number; y: number } | null;\n  }>({\n    detected: false,\n    coordinates: null,\n  });\n  const [beamKey, setBeamKey] = useState(0);\n  const [cycleCollisionDetected, setCycleCollisionDetected] = useState(false);\n \n  useEffect(() => {\n    const checkCollision = () => {\n      if (\n        beamRef.current &&\n        containerRef.current &&\n        parentRef.current &&\n        !cycleCollisionDetected\n      ) {\n        const beamRect = beamRef.current.getBoundingClientRect();\n        const containerRect = containerRef.current.getBoundingClientRect();\n        const parentRect = parentRef.current.getBoundingClientRect();\n \n        if (beamRect.bottom >= containerRect.top) {\n          const relativeX =\n            beamRect.left - parentRect.left + beamRect.width / 2;\n          const relativeY = beamRect.bottom - parentRect.top;\n \n          setCollision({\n            detected: true,\n            coordinates: {\n              x: relativeX,\n              y: relativeY,\n            },\n          });\n          setCycleCollisionDetected(true);\n        }\n      }\n    };\n \n    const animationInterval = setInterval(checkCollision, 50);\n \n    return () => clearInterval(animationInterval);\n  }, [cycleCollisionDetected, containerRef]);\n \n  useEffect(() => {\n    if (collision.detected && collision.coordinates) {\n      setTimeout(() => {\n        setCollision({ detected: false, coordinates: null });\n        setCycleCollisionDetected(false);\n      }, 2000);\n \n      setTimeout(() => {\n        setBeamKey((prevKey) => prevKey + 1);\n      }, 2000);\n    }\n  }, [collision]);\n \n  return (\n    <>\n      <motion.div\n        key={beamKey}\n        ref={beamRef}\n        animate=\"animate\"\n        initial={{\n          translateY: beamOptions.initialY || \"-200px\",\n          translateX: beamOptions.initialX || \"0px\",\n          rotate: beamOptions.rotate || 0,\n        }}\n        variants={{\n          animate: {\n            translateY: beamOptions.translateY || \"1800px\",\n            translateX: beamOptions.translateX || \"0px\",\n            rotate: beamOptions.rotate || 0,\n          },\n        }}\n        transition={{\n          duration: beamOptions.duration || 8,\n          repeat: Infinity,\n          repeatType: \"loop\",\n          ease: \"linear\",\n          delay: beamOptions.delay || 0,\n          repeatDelay: beamOptions.repeatDelay || 0,\n        }}\n        className={cn(\n          \"absolute left-0 top-20 m-auto h-14 w-px rounded-full bg-gradient-to-t from-indigo-500 via-purple-500 to-transparent\",\n          beamOptions.className\n        )}\n      />\n      <AnimatePresence>\n        {collision.detected && collision.coordinates && (\n          <Explosion\n            key={`${collision.coordinates.x}-${collision.coordinates.y}`}\n            className=\"\"\n            style={{\n              left: `${collision.coordinates.x}px`,\n              top: `${collision.coordinates.y}px`,\n              transform: \"translate(-50%, -50%)\",\n            }}\n          />\n        )}\n      </AnimatePresence>\n    </>\n  );\n});\n \nCollisionMechanism.displayName = \"CollisionMechanism\";\n \nconst Explosion = ({ ...props }: React.HTMLProps<HTMLDivElement>) => {\n  const spans = Array.from({ length: 20 }, (_, index) => ({\n    id: index,\n    initialX: 0,\n    initialY: 0,\n    directionX: Math.floor(Math.random() * 80 - 40),\n    directionY: Math.floor(Math.random() * -50 - 10),\n  }));\n \n  return (\n    <div {...props} className={cn(\"absolute z-50 h-2 w-2\", props.className)}>\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ duration: 1.5, ease: \"easeOut\" }}\n        className=\"absolute -inset-x-10 top-0 m-auto h-2 w-10 rounded-full bg-gradient-to-r from-transparent via-indigo-500 to-transparent blur-sm\"\n      ></motion.div>\n      {spans.map((span) => (\n        <motion.span\n          key={span.id}\n          initial={{ x: span.initialX, y: span.initialY, opacity: 1 }}\n          animate={{\n            x: span.directionX,\n            y: span.directionY,\n            opacity: 0,\n          }}\n          transition={{ duration: Math.random() * 1.5 + 0.5, ease: \"easeOut\" }}\n          className=\"absolute h-1 w-1 rounded-full bg-gradient-to-b from-indigo-500 to-purple-500\"\n        />\n      ))}\n    </div>\n  );\n};\nCopy\nExpand\nProps\nBackgroundBeamsWithCollision\nProp Name\tType\tDescription\tDefault\nchildren\tReact.ReactNode\tThe content to be rendered inside the component\tRequired\nclassName\tstring?\tAdditional CSS classes to be applied to the container\tundefined\nCollisionMechanism\nProp Name\tType\tDescription\tDefault\ncontainerRef\tReact.RefObject<HTMLDivElement>\tReference to the container element\tRequired\nparentRef\tReact.RefObject<HTMLDivElement>\tReference to the parent element\tRequired\nbeamOptions\tobject\tConfiguration options for the beam\t\nbeamOptions\nProperty\tType\tDescription\tDefault\ninitialX\tnumber?\tInitial X position of the beam\t0\ntranslateX\tnumber?\tX position to translate to\t0\ninitialY\tnumber?\tInitial Y position of the beam\t\"-200px\"\ntranslateY\tnumber?\tY position to translate to\t\"1800px\"\nrotate\tnumber?\tRotation angle of the beam\t0\nclassName\tstring?\tAdditional CSS classes for the beam\tundefined\nduration\tnumber?\tDuration of the animation in seconds\t8\ndelay\tnumber?\tDelay before the animation starts in seconds\t0\nrepeatDelay\tnumber?\tDelay before the animation repeats in seconds\t0\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Background Beams",
    "url": "https://ui.aceternity.com/components/background-beams",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nBackground Beams\n\nMultiple background beams that follow a path of SVG, makes a good hero section background.\n\nCard\nBackground\nGradient\nSpecial\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nAdd Tailwind CSS plugin for variable classes\ntailwind.config.ts\nconst defaultTheme = require(\"tailwindcss/defaultTheme\");\n \nconst colors = require(\"tailwindcss/colors\");\nconst {\n  default: flattenColorPalette,\n} = require(\"tailwindcss/lib/util/flattenColorPalette\");\n \n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./src/**/*.{ts,tsx}\"],\n  darkMode: \"class\",\n  theme: {\n    // rest of the code\n  },\n  plugins: [addVariablesForColors],\n};\n \nfunction addVariablesForColors({ addBase, theme }: any) {\n  let allColors = flattenColorPalette(theme(\"colors\"));\n  let newVars = Object.fromEntries(\n    Object.entries(allColors).map(([key, val]) => [`--${key}`, val])\n  );\n \n  addBase({\n    \":root\": newVars,\n  });\n}\nCopy\nCopy the source code\n\ncomponents/ui/background-beams.tsx\n\n\"use client\";\nimport React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n \nexport const BackgroundBeams = React.memo(\n  ({ className }: { className?: string }) => {\n    const paths = [\n      \"M-380 -189C-380 -189 -312 216 152 343C616 470 684 875 684 875\",\n      \"M-373 -197C-373 -197 -305 208 159 335C623 462 691 867 691 867\",\n      \"M-366 -205C-366 -205 -298 200 166 327C630 454 698 859 698 859\",\n      \"M-359 -213C-359 -213 -291 192 173 319C637 446 705 851 705 851\",\n      \"M-352 -221C-352 -221 -284 184 180 311C644 438 712 843 712 843\",\n      \"M-345 -229C-345 -229 -277 176 187 303C651 430 719 835 719 835\",\n      \"M-338 -237C-338 -237 -270 168 194 295C658 422 726 827 726 827\",\n      \"M-331 -245C-331 -245 -263 160 201 287C665 414 733 819 733 819\",\n      \"M-324 -253C-324 -253 -256 152 208 279C672 406 740 811 740 811\",\n      \"M-317 -261C-317 -261 -249 144 215 271C679 398 747 803 747 803\",\n      \"M-310 -269C-310 -269 -242 136 222 263C686 390 754 795 754 795\",\n      \"M-303 -277C-303 -277 -235 128 229 255C693 382 761 787 761 787\",\n      \"M-296 -285C-296 -285 -228 120 236 247C700 374 768 779 768 779\",\n      \"M-289 -293C-289 -293 -221 112 243 239C707 366 775 771 775 771\",\n      \"M-282 -301C-282 -301 -214 104 250 231C714 358 782 763 782 763\",\n      \"M-275 -309C-275 -309 -207 96 257 223C721 350 789 755 789 755\",\n      \"M-268 -317C-268 -317 -200 88 264 215C728 342 796 747 796 747\",\n      \"M-261 -325C-261 -325 -193 80 271 207C735 334 803 739 803 739\",\n      \"M-254 -333C-254 -333 -186 72 278 199C742 326 810 731 810 731\",\n      \"M-247 -341C-247 -341 -179 64 285 191C749 318 817 723 817 723\",\n      \"M-240 -349C-240 -349 -172 56 292 183C756 310 824 715 824 715\",\n      \"M-233 -357C-233 -357 -165 48 299 175C763 302 831 707 831 707\",\n      \"M-226 -365C-226 -365 -158 40 306 167C770 294 838 699 838 699\",\n      \"M-219 -373C-219 -373 -151 32 313 159C777 286 845 691 845 691\",\n      \"M-212 -381C-212 -381 -144 24 320 151C784 278 852 683 852 683\",\n      \"M-205 -389C-205 -389 -137 16 327 143C791 270 859 675 859 675\",\n      \"M-198 -397C-198 -397 -130 8 334 135C798 262 866 667 866 667\",\n      \"M-191 -405C-191 -405 -123 0 341 127C805 254 873 659 873 659\",\n      \"M-184 -413C-184 -413 -116 -8 348 119C812 246 880 651 880 651\",\n      \"M-177 -421C-177 -421 -109 -16 355 111C819 238 887 643 887 643\",\n      \"M-170 -429C-170 -429 -102 -24 362 103C826 230 894 635 894 635\",\n      \"M-163 -437C-163 -437 -95 -32 369 95C833 222 901 627 901 627\",\n      \"M-156 -445C-156 -445 -88 -40 376 87C840 214 908 619 908 619\",\n      \"M-149 -453C-149 -453 -81 -48 383 79C847 206 915 611 915 611\",\n      \"M-142 -461C-142 -461 -74 -56 390 71C854 198 922 603 922 603\",\n      \"M-135 -469C-135 -469 -67 -64 397 63C861 190 929 595 929 595\",\n      \"M-128 -477C-128 -477 -60 -72 404 55C868 182 936 587 936 587\",\n      \"M-121 -485C-121 -485 -53 -80 411 47C875 174 943 579 943 579\",\n      \"M-114 -493C-114 -493 -46 -88 418 39C882 166 950 571 950 571\",\n      \"M-107 -501C-107 -501 -39 -96 425 31C889 158 957 563 957 563\",\n      \"M-100 -509C-100 -509 -32 -104 432 23C896 150 964 555 964 555\",\n      \"M-93 -517C-93 -517 -25 -112 439 15C903 142 971 547 971 547\",\n      \"M-86 -525C-86 -525 -18 -120 446 7C910 134 978 539 978 539\",\n      \"M-79 -533C-79 -533 -11 -128 453 -1C917 126 985 531 985 531\",\n      \"M-72 -541C-72 -541 -4 -136 460 -9C924 118 992 523 992 523\",\n      \"M-65 -549C-65 -549 3 -144 467 -17C931 110 999 515 999 515\",\n      \"M-58 -557C-58 -557 10 -152 474 -25C938 102 1006 507 1006 507\",\n      \"M-51 -565C-51 -565 17 -160 481 -33C945 94 1013 499 1013 499\",\n      \"M-44 -573C-44 -573 24 -168 488 -41C952 86 1020 491 1020 491\",\n      \"M-37 -581C-37 -581 31 -176 495 -49C959 78 1027 483 1027 483\",\n    ];\n    return (\n      <div\n        className={cn(\n          \"absolute  h-full w-full inset-0  [mask-size:40px] [mask-repeat:no-repeat] flex items-center justify-center\",\n          className\n        )}\n      >\n        <svg\n          className=\" z-0 h-full w-full pointer-events-none absolute \"\n          width=\"100%\"\n          height=\"100%\"\n          viewBox=\"0 0 696 316\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M-380 -189C-380 -189 -312 216 152 343C616 470 684 875 684 875M-373 -197C-373 -197 -305 208 159 335C623 462 691 867 691 867M-366 -205C-366 -205 -298 200 166 327C630 454 698 859 698 859M-359 -213C-359 -213 -291 192 173 319C637 446 705 851 705 851M-352 -221C-352 -221 -284 184 180 311C644 438 712 843 712 843M-345 -229C-345 -229 -277 176 187 303C651 430 719 835 719 835M-338 -237C-338 -237 -270 168 194 295C658 422 726 827 726 827M-331 -245C-331 -245 -263 160 201 287C665 414 733 819 733 819M-324 -253C-324 -253 -256 152 208 279C672 406 740 811 740 811M-317 -261C-317 -261 -249 144 215 271C679 398 747 803 747 803M-310 -269C-310 -269 -242 136 222 263C686 390 754 795 754 795M-303 -277C-303 -277 -235 128 229 255C693 382 761 787 761 787M-296 -285C-296 -285 -228 120 236 247C700 374 768 779 768 779M-289 -293C-289 -293 -221 112 243 239C707 366 775 771 775 771M-282 -301C-282 -301 -214 104 250 231C714 358 782 763 782 763M-275 -309C-275 -309 -207 96 257 223C721 350 789 755 789 755M-268 -317C-268 -317 -200 88 264 215C728 342 796 747 796 747M-261 -325C-261 -325 -193 80 271 207C735 334 803 739 803 739M-254 -333C-254 -333 -186 72 278 199C742 326 810 731 810 731M-247 -341C-247 -341 -179 64 285 191C749 318 817 723 817 723M-240 -349C-240 -349 -172 56 292 183C756 310 824 715 824 715M-233 -357C-233 -357 -165 48 299 175C763 302 831 707 831 707M-226 -365C-226 -365 -158 40 306 167C770 294 838 699 838 699M-219 -373C-219 -373 -151 32 313 159C777 286 845 691 845 691M-212 -381C-212 -381 -144 24 320 151C784 278 852 683 852 683M-205 -389C-205 -389 -137 16 327 143C791 270 859 675 859 675M-198 -397C-198 -397 -130 8 334 135C798 262 866 667 866 667M-191 -405C-191 -405 -123 0 341 127C805 254 873 659 873 659M-184 -413C-184 -413 -116 -8 348 119C812 246 880 651 880 651M-177 -421C-177 -421 -109 -16 355 111C819 238 887 643 887 643M-170 -429C-170 -429 -102 -24 362 103C826 230 894 635 894 635M-163 -437C-163 -437 -95 -32 369 95C833 222 901 627 901 627M-156 -445C-156 -445 -88 -40 376 87C840 214 908 619 908 619M-149 -453C-149 -453 -81 -48 383 79C847 206 915 611 915 611M-142 -461C-142 -461 -74 -56 390 71C854 198 922 603 922 603M-135 -469C-135 -469 -67 -64 397 63C861 190 929 595 929 595M-128 -477C-128 -477 -60 -72 404 55C868 182 936 587 936 587M-121 -485C-121 -485 -53 -80 411 47C875 174 943 579 943 579M-114 -493C-114 -493 -46 -88 418 39C882 166 950 571 950 571M-107 -501C-107 -501 -39 -96 425 31C889 158 957 563 957 563M-100 -509C-100 -509 -32 -104 432 23C896 150 964 555 964 555M-93 -517C-93 -517 -25 -112 439 15C903 142 971 547 971 547M-86 -525C-86 -525 -18 -120 446 7C910 134 978 539 978 539M-79 -533C-79 -533 -11 -128 453 -1C917 126 985 531 985 531M-72 -541C-72 -541 -4 -136 460 -9C924 118 992 523 992 523M-65 -549C-65 -549 3 -144 467 -17C931 110 999 515 999 515M-58 -557C-58 -557 10 -152 474 -25C938 102 1006 507 1006 507M-51 -565C-51 -565 17 -160 481 -33C945 94 1013 499 1013 499M-44 -573C-44 -573 24 -168 488 -41C952 86 1020 491 1020 491M-37 -581C-37 -581 31 -176 495 -49C959 78 1027 483 1027 483M-30 -589C-30 -589 38 -184 502 -57C966 70 1034 475 1034 475M-23 -597C-23 -597 45 -192 509 -65C973 62 1041 467 1041 467M-16 -605C-16 -605 52 -200 516 -73C980 54 1048 459 1048 459M-9 -613C-9 -613 59 -208 523 -81C987 46 1055 451 1055 451M-2 -621C-2 -621 66 -216 530 -89C994 38 1062 443 1062 443M5 -629C5 -629 73 -224 537 -97C1001 30 1069 435 1069 435M12 -637C12 -637 80 -232 544 -105C1008 22 1076 427 1076 427M19 -645C19 -645 87 -240 551 -113C1015 14 1083 419 1083 419\"\n            stroke=\"url(#paint0_radial_242_278)\"\n            strokeOpacity=\"0.05\"\n            strokeWidth=\"0.5\"\n          ></path>\n \n          {paths.map((path, index) => (\n            <motion.path\n              key={`path-` + index}\n              d={path}\n              stroke={`url(#linearGradient-${index})`}\n              strokeOpacity=\"0.4\"\n              strokeWidth=\"0.5\"\n            ></motion.path>\n          ))}\n          <defs>\n            {paths.map((path, index) => (\n              <motion.linearGradient\n                id={`linearGradient-${index}`}\n                key={`gradient-${index}`}\n                initial={{\n                  x1: \"0%\",\n                  x2: \"0%\",\n                  y1: \"0%\",\n                  y2: \"0%\",\n                }}\n                animate={{\n                  x1: [\"0%\", \"100%\"],\n                  x2: [\"0%\", \"95%\"],\n                  y1: [\"0%\", \"100%\"],\n                  y2: [\"0%\", `${93 + Math.random() * 8}%`],\n                }}\n                transition={{\n                  duration: Math.random() * 10 + 10,\n                  ease: \"easeInOut\",\n                  repeat: Infinity,\n                  delay: Math.random() * 10,\n                }}\n              >\n                <stop stopColor=\"#18CCFC\" stopOpacity=\"0\"></stop>\n                <stop stopColor=\"#18CCFC\"></stop>\n                <stop offset=\"32.5%\" stopColor=\"#6344F5\"></stop>\n                <stop offset=\"100%\" stopColor=\"#AE48FF\" stopOpacity=\"0\"></stop>\n              </motion.linearGradient>\n            ))}\n \n            <radialGradient\n              id=\"paint0_radial_242_278\"\n              cx=\"0\"\n              cy=\"0\"\n              r=\"1\"\n              gradientUnits=\"userSpaceOnUse\"\n              gradientTransform=\"translate(352 34) rotate(90) scale(555 1560.62)\"\n            >\n              <stop offset=\"0.0666667\" stopColor=\"var(--neutral-300)\"></stop>\n              <stop offset=\"0.243243\" stopColor=\"var(--neutral-300)\"></stop>\n              <stop offset=\"0.43594\" stopColor=\"white\" stopOpacity=\"0\"></stop>\n            </radialGradient>\n          </defs>\n        </svg>\n      </div>\n    );\n  }\n);\n \nBackgroundBeams.displayName = \"BackgroundBeams\";\nCopy\nExpand\nProps\nProp name\tType\tDescription\nclassName\tstring\tThe class name of the Background Beams component.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Apple Cards Carousel",
    "url": "https://ui.aceternity.com/components/apple-cards-carousel",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nApple Cards Carousel\n\nA sleek and minimal carousel implementation, as seen on apple.com\n\nCard\nFeatures\nCarousel\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nAdd useOutsideClick hook\nhooks/use-outside-click.ts\nimport React, { useEffect } from \"react\";\n \nexport const useOutsideClick = (\n  ref: React.RefObject<HTMLDivElement>,\n  callback: Function\n) => {\n  useEffect(() => {\n    const listener = (event: any) => {\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n      callback(event);\n    };\n \n    document.addEventListener(\"mousedown\", listener);\n    document.addEventListener(\"touchstart\", listener);\n \n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n      document.removeEventListener(\"touchstart\", listener);\n    };\n  }, [ref, callback]);\n};\nCopy\nCopy the source code\n\ncomponents/ui/apple-cards-carousel.tsx\n\n\"use client\";\nimport React, {\n  useEffect,\n  useRef,\n  useState,\n  createContext,\n  useContext,\n} from \"react\";\nimport {\n  IconArrowNarrowLeft,\n  IconArrowNarrowRight,\n  IconX,\n} from \"@tabler/icons-react\";\nimport { cn } from \"@/lib/utils\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport Image, { ImageProps } from \"next/image\";\nimport { useOutsideClick } from \"@/hooks/use-outside-click\";\n \ninterface CarouselProps {\n  items: JSX.Element[];\n  initialScroll?: number;\n}\n \ntype Card = {\n  src: string;\n  title: string;\n  category: string;\n  content: React.ReactNode;\n};\n \nexport const CarouselContext = createContext<{\n  onCardClose: (index: number) => void;\n  currentIndex: number;\n}>({\n  onCardClose: () => {},\n  currentIndex: 0,\n});\n \nexport const Carousel = ({ items, initialScroll = 0 }: CarouselProps) => {\n  const carouselRef = React.useRef<HTMLDivElement>(null);\n  const [canScrollLeft, setCanScrollLeft] = React.useState(false);\n  const [canScrollRight, setCanScrollRight] = React.useState(true);\n  const [currentIndex, setCurrentIndex] = useState(0);\n \n  useEffect(() => {\n    if (carouselRef.current) {\n      carouselRef.current.scrollLeft = initialScroll;\n      checkScrollability();\n    }\n  }, [initialScroll]);\n \n  const checkScrollability = () => {\n    if (carouselRef.current) {\n      const { scrollLeft, scrollWidth, clientWidth } = carouselRef.current;\n      setCanScrollLeft(scrollLeft > 0);\n      setCanScrollRight(scrollLeft < scrollWidth - clientWidth);\n    }\n  };\n \n  const scrollLeft = () => {\n    if (carouselRef.current) {\n      carouselRef.current.scrollBy({ left: -300, behavior: \"smooth\" });\n    }\n  };\n \n  const scrollRight = () => {\n    if (carouselRef.current) {\n      carouselRef.current.scrollBy({ left: 300, behavior: \"smooth\" });\n    }\n  };\n \n  const handleCardClose = (index: number) => {\n    if (carouselRef.current) {\n      const cardWidth = isMobile() ? 230 : 384; // (md:w-96)\n      const gap = isMobile() ? 4 : 8;\n      const scrollPosition = (cardWidth + gap) * (index + 1);\n      carouselRef.current.scrollTo({\n        left: scrollPosition,\n        behavior: \"smooth\",\n      });\n      setCurrentIndex(index);\n    }\n  };\n \n  const isMobile = () => {\n    return window && window.innerWidth < 768;\n  };\n \n  return (\n    <CarouselContext.Provider\n      value={{ onCardClose: handleCardClose, currentIndex }}\n    >\n      <div className=\"relative w-full\">\n        <div\n          className=\"flex w-full overflow-x-scroll overscroll-x-auto py-10 md:py-20 scroll-smooth [scrollbar-width:none]\"\n          ref={carouselRef}\n          onScroll={checkScrollability}\n        >\n          <div\n            className={cn(\n              \"absolute right-0  z-[1000] h-auto  w-[5%] overflow-hidden bg-gradient-to-l\"\n            )}\n          ></div>\n \n          <div\n            className={cn(\n              \"flex flex-row justify-start gap-4 pl-4\",\n              \"max-w-7xl mx-auto\" // remove max-w-4xl if you want the carousel to span the full width of its container\n            )}\n          >\n            {items.map((item, index) => (\n              <motion.div\n                initial={{\n                  opacity: 0,\n                  y: 20,\n                }}\n                animate={{\n                  opacity: 1,\n                  y: 0,\n                  transition: {\n                    duration: 0.5,\n                    delay: 0.2 * index,\n                    ease: \"easeOut\",\n                    once: true,\n                  },\n                }}\n                key={\"card\" + index}\n                className=\"last:pr-[5%] md:last:pr-[33%]  rounded-3xl\"\n              >\n                {item}\n              </motion.div>\n            ))}\n          </div>\n        </div>\n        <div className=\"flex justify-end gap-2 mr-10\">\n          <button\n            className=\"relative z-40 h-10 w-10 rounded-full bg-gray-100 flex items-center justify-center disabled:opacity-50\"\n            onClick={scrollLeft}\n            disabled={!canScrollLeft}\n          >\n            <IconArrowNarrowLeft className=\"h-6 w-6 text-gray-500\" />\n          </button>\n          <button\n            className=\"relative z-40 h-10 w-10 rounded-full bg-gray-100 flex items-center justify-center disabled:opacity-50\"\n            onClick={scrollRight}\n            disabled={!canScrollRight}\n          >\n            <IconArrowNarrowRight className=\"h-6 w-6 text-gray-500\" />\n          </button>\n        </div>\n      </div>\n    </CarouselContext.Provider>\n  );\n};\n \nexport const Card = ({\n  card,\n  index,\n  layout = false,\n}: {\n  card: Card;\n  index: number;\n  layout?: boolean;\n}) => {\n  const [open, setOpen] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { onCardClose, currentIndex } = useContext(CarouselContext);\n \n  useEffect(() => {\n    function onKeyDown(event: KeyboardEvent) {\n      if (event.key === \"Escape\") {\n        handleClose();\n      }\n    }\n \n    if (open) {\n      document.body.style.overflow = \"hidden\";\n    } else {\n      document.body.style.overflow = \"auto\";\n    }\n \n    window.addEventListener(\"keydown\", onKeyDown);\n    return () => window.removeEventListener(\"keydown\", onKeyDown);\n  }, [open]);\n \n  useOutsideClick(containerRef, () => handleClose());\n \n  const handleOpen = () => {\n    setOpen(true);\n  };\n \n  const handleClose = () => {\n    setOpen(false);\n    onCardClose(index);\n  };\n \n  return (\n    <>\n      <AnimatePresence>\n        {open && (\n          <div className=\"fixed inset-0 h-screen z-50 overflow-auto\">\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              className=\"bg-black/80 backdrop-blur-lg h-full w-full fixed inset-0\"\n            />\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              ref={containerRef}\n              layoutId={layout ? `card-${card.title}` : undefined}\n              className=\"max-w-5xl mx-auto bg-white dark:bg-neutral-900 h-fit  z-[60] my-10 p-4 md:p-10 rounded-3xl font-sans relative\"\n            >\n              <button\n                className=\"sticky top-4 h-8 w-8 right-0 ml-auto bg-black dark:bg-white rounded-full flex items-center justify-center\"\n                onClick={handleClose}\n              >\n                <IconX className=\"h-6 w-6 text-neutral-100 dark:text-neutral-900\" />\n              </button>\n              <motion.p\n                layoutId={layout ? `category-${card.title}` : undefined}\n                className=\"text-base font-medium text-black dark:text-white\"\n              >\n                {card.category}\n              </motion.p>\n              <motion.p\n                layoutId={layout ? `title-${card.title}` : undefined}\n                className=\"text-2xl md:text-5xl font-semibold text-neutral-700 mt-4 dark:text-white\"\n              >\n                {card.title}\n              </motion.p>\n              <div className=\"py-10\">{card.content}</div>\n            </motion.div>\n          </div>\n        )}\n      </AnimatePresence>\n      <motion.button\n        layoutId={layout ? `card-${card.title}` : undefined}\n        onClick={handleOpen}\n        className=\"rounded-3xl bg-gray-100 dark:bg-neutral-900 h-80 w-56 md:h-[40rem] md:w-96 overflow-hidden flex flex-col items-start justify-start relative z-10\"\n      >\n        <div className=\"absolute h-full top-0 inset-x-0 bg-gradient-to-b from-black/50 via-transparent to-transparent z-30 pointer-events-none\" />\n        <div className=\"relative z-40 p-8\">\n          <motion.p\n            layoutId={layout ? `category-${card.category}` : undefined}\n            className=\"text-white text-sm md:text-base font-medium font-sans text-left\"\n          >\n            {card.category}\n          </motion.p>\n          <motion.p\n            layoutId={layout ? `title-${card.title}` : undefined}\n            className=\"text-white text-xl md:text-3xl font-semibold max-w-xs text-left [text-wrap:balance] font-sans mt-2\"\n          >\n            {card.title}\n          </motion.p>\n        </div>\n        <BlurImage\n          src={card.src}\n          alt={card.title}\n          fill\n          className=\"object-cover absolute z-10 inset-0\"\n        />\n      </motion.button>\n    </>\n  );\n};\n \nexport const BlurImage = ({\n  height,\n  width,\n  src,\n  className,\n  alt,\n  ...rest\n}: ImageProps) => {\n  const [isLoading, setLoading] = useState(true);\n  return (\n    <Image\n      className={cn(\n        \"transition duration-300\",\n        isLoading ? \"blur-sm\" : \"blur-0\",\n        className\n      )}\n      onLoad={() => setLoading(false)}\n      src={src}\n      width={width}\n      height={height}\n      loading=\"lazy\"\n      decoding=\"async\"\n      blurDataURL={typeof src === \"string\" ? src : undefined}\n      alt={alt ? alt : \"Background of a beautiful view\"}\n      {...rest}\n    />\n  );\n};\nCopy\nExpand\nExamples\nStandard\nPreview\nCode\nLoading...\nWith Layout Changes\nPreview\nCode\nLoading...\nProps\nCarousel Component\nProp\tType\tDefault\tDescription\nitems\tJSX.Element[]\tRequired\tArray of JSX elements to be displayed in the carousel\ninitialScroll\tnumber\t0\tInitial scroll position of the carousel\nCard Component\nProp\tType\tDefault\tDescription\ncard\tCard\tRequired\tObject containing card details (src, title, category, content)\nindex\tnumber\tRequired\tIndex of the card in the carousel\nlayout\tboolean\tfalse\tWhether to use layout animations\nBlurImage Component\nProp\tType\tDefault\tDescription\nheight\tnumber | string\t-\tHeight of the image\nwidth\tnumber | string\t-\tWidth of the image\nsrc\tstring\tRequired\tSource URL of the image\nclassName\tstring\t-\tAdditional CSS classes for the image\nalt\tstring\t\"Background of a beautiful view\"\tAlt text for the image\n...rest\tImageProps\t-\tAny other props accepted by Next.js Image component\n\nNote: The Card type is defined as:\n\ntype Card = {\n  src: string;\n  title: string;\n  category: string;\n  content: React.ReactNode;\n};\nCopy\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Aurora Background",
    "url": "https://ui.aceternity.com/components/aurora-background",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nAurora Background\n\nA subtle Aurora or Southern Lights background for your website.\n\nCard\nBackground\nGradient\nSpecial\nPreview\nCode\nBackground lights are cool you know.\nAnd this, is chemical burn.\nDebug now\nInstallation\nCLI\nManual\nInstall util dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nModify the config file to add animation and colors as variables\ntailwind.config.js\nconst {\n  default: flattenColorPalette,\n} = require(\"tailwindcss/lib/util/flattenColorPalette\");\n \n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    // your paths\n    \"./src/**/*.{ts,tsx}\",\n  ],\n  darkMode: \"class\",\n  theme: {\n    extend: {\n      animation: {\n        aurora: \"aurora 60s linear infinite\",\n      },\n      keyframes: {\n        aurora: {\n          from: {\n            backgroundPosition: \"50% 50%, 50% 50%\",\n          },\n          to: {\n            backgroundPosition: \"350% 50%, 350% 50%\",\n          },\n        },\n      },\n    },\n  },\n  plugins: [addVariablesForColors],\n};\n \n// This plugin adds each Tailwind color as a global CSS variable, e.g. var(--gray-200).\nfunction addVariablesForColors({ addBase, theme }: any) {\n  let allColors = flattenColorPalette(theme(\"colors\"));\n  let newVars = Object.fromEntries(\n    Object.entries(allColors).map(([key, val]) => [`--${key}`, val])\n  );\n \n  addBase({\n    \":root\": newVars,\n  });\n}\nCopy\nCopy the source code\n\ncomponents/ui/aurora-background.tsx\n\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport React, { ReactNode } from \"react\";\n \ninterface AuroraBackgroundProps extends React.HTMLProps<HTMLDivElement> {\n  children: ReactNode;\n  showRadialGradient?: boolean;\n}\n \nexport const AuroraBackground = ({\n  className,\n  children,\n  showRadialGradient = true,\n  ...props\n}: AuroraBackgroundProps) => {\n  return (\n    <main>\n      <div\n        className={cn(\n          \"relative flex flex-col  h-[100vh] items-center justify-center bg-zinc-50 dark:bg-zinc-900  text-slate-950 transition-bg\",\n          className\n        )}\n        {...props}\n      >\n        <div className=\"absolute inset-0 overflow-hidden\">\n          <div\n            //   I'm sorry but this is what peak developer performance looks like // trigger warning\n            className={cn(\n              `\n            [--white-gradient:repeating-linear-gradient(100deg,var(--white)_0%,var(--white)_7%,var(--transparent)_10%,var(--transparent)_12%,var(--white)_16%)]\n            [--dark-gradient:repeating-linear-gradient(100deg,var(--black)_0%,var(--black)_7%,var(--transparent)_10%,var(--transparent)_12%,var(--black)_16%)]\n            [--aurora:repeating-linear-gradient(100deg,var(--blue-500)_10%,var(--indigo-300)_15%,var(--blue-300)_20%,var(--violet-200)_25%,var(--blue-400)_30%)]\n            [background-image:var(--white-gradient),var(--aurora)]\n            dark:[background-image:var(--dark-gradient),var(--aurora)]\n            [background-size:300%,_200%]\n            [background-position:50%_50%,50%_50%]\n            filter blur-[10px] invert dark:invert-0\n            after:content-[\"\"] after:absolute after:inset-0 after:[background-image:var(--white-gradient),var(--aurora)] \n            after:dark:[background-image:var(--dark-gradient),var(--aurora)]\n            after:[background-size:200%,_100%] \n            after:animate-aurora after:[background-attachment:fixed] after:mix-blend-difference\n            pointer-events-none\n            absolute -inset-[10px] opacity-50 will-change-transform`,\n \n              showRadialGradient &&\n                `[mask-image:radial-gradient(ellipse_at_100%_0%,black_10%,var(--transparent)_70%)]`\n            )}\n          ></div>\n        </div>\n        {children}\n      </div>\n    </main>\n  );\n};\nCopy\nExpand\nProps\nProp\tType\tDefault\tDescription\nchildren\tReactNode\tN/A\tThe content to be displayed within the AuroraBackground component.\nclassName\tstring\tN/A\tAdditional CSS classes to apply to the component for styling.\nshowRadialGradient\tboolean\ttrue\tDetermines whether a radial gradient effect is applied to the background.\n...props\tobject\tN/A\tAny other props that should be passed to the div element of the component.\n\nThis component is ideated and initialized by Akshith Pottigari\n\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Animated Tooltip",
    "url": "https://ui.aceternity.com/components/animated-tooltip",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nAnimated Tooltip\n\nA cool tooltip that reveals on hover, follows mouse pointer\n\nCard\nHover\nSpecial\nUtility\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/animated-tooltip.tsx\n\n\"use client\";\nimport Image from \"next/image\";\nimport React, { useState } from \"react\";\nimport {\n  motion,\n  useTransform,\n  AnimatePresence,\n  useMotionValue,\n  useSpring,\n} from \"framer-motion\";\n \nexport const AnimatedTooltip = ({\n  items,\n}: {\n  items: {\n    id: number;\n    name: string;\n    designation: string;\n    image: string;\n  }[];\n}) => {\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n  const springConfig = { stiffness: 100, damping: 5 };\n  const x = useMotionValue(0); // going to set this value on mouse move\n  // rotate the tooltip\n  const rotate = useSpring(\n    useTransform(x, [-100, 100], [-45, 45]),\n    springConfig\n  );\n  // translate the tooltip\n  const translateX = useSpring(\n    useTransform(x, [-100, 100], [-50, 50]),\n    springConfig\n  );\n  const handleMouseMove = (event: any) => {\n    const halfWidth = event.target.offsetWidth / 2;\n    x.set(event.nativeEvent.offsetX - halfWidth); // set the x value, which is then used in transform and rotate\n  };\n \n  return (\n    <>\n      {items.map((item, idx) => (\n        <div\n          className=\"-mr-4  relative group\"\n          key={item.name}\n          onMouseEnter={() => setHoveredIndex(item.id)}\n          onMouseLeave={() => setHoveredIndex(null)}\n        >\n          <AnimatePresence mode=\"popLayout\">\n            {hoveredIndex === item.id && (\n              <motion.div\n                initial={{ opacity: 0, y: 20, scale: 0.6 }}\n                animate={{\n                  opacity: 1,\n                  y: 0,\n                  scale: 1,\n                  transition: {\n                    type: \"spring\",\n                    stiffness: 260,\n                    damping: 10,\n                  },\n                }}\n                exit={{ opacity: 0, y: 20, scale: 0.6 }}\n                style={{\n                  translateX: translateX,\n                  rotate: rotate,\n                  whiteSpace: \"nowrap\",\n                }}\n                className=\"absolute -top-16 -left-1/2 translate-x-1/2 flex text-xs  flex-col items-center justify-center rounded-md bg-black z-50 shadow-xl px-4 py-2\"\n              >\n                <div className=\"absolute inset-x-10 z-30 w-[20%] -bottom-px bg-gradient-to-r from-transparent via-emerald-500 to-transparent h-px \" />\n                <div className=\"absolute left-10 w-[40%] z-30 -bottom-px bg-gradient-to-r from-transparent via-sky-500 to-transparent h-px \" />\n                <div className=\"font-bold text-white relative z-30 text-base\">\n                  {item.name}\n                </div>\n                <div className=\"text-white text-xs\">{item.designation}</div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n          <Image\n            onMouseMove={handleMouseMove}\n            height={100}\n            width={100}\n            src={item.image}\n            alt={item.name}\n            className=\"object-cover !m-0 !p-0 object-top rounded-full h-14 w-14 border-2 group-hover:scale-105 group-hover:z-30 border-white  relative transition duration-500\"\n          />\n        </div>\n      ))}\n    </>\n  );\n};\nCopy\nExpand\nProps\nProp name\tType\tDescription\nitems\tArray<{id: number, name: string, designation: string, image: string}>\tAn array of objects, each representing an item. Each object in the array should have the following properties: id, name, designation, image\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Animated Modal",
    "url": "https://ui.aceternity.com/components/animated-modal",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nAnimated Modal\n\nA customizable, compound modal component with animated transitions\n\nSpecial\nUtilities\nModal\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall util dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/animated-modal.tsx\n\n\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport React, {\n  ReactNode,\n  createContext,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\n \ninterface ModalContextType {\n  open: boolean;\n  setOpen: (open: boolean) => void;\n}\n \nconst ModalContext = createContext<ModalContextType | undefined>(undefined);\n \nexport const ModalProvider = ({ children }: { children: ReactNode }) => {\n  const [open, setOpen] = useState(false);\n \n  return (\n    <ModalContext.Provider value={{ open, setOpen }}>\n      {children}\n    </ModalContext.Provider>\n  );\n};\n \nexport const useModal = () => {\n  const context = useContext(ModalContext);\n  if (!context) {\n    throw new Error(\"useModal must be used within a ModalProvider\");\n  }\n  return context;\n};\n \nexport function Modal({ children }: { children: ReactNode }) {\n  return <ModalProvider>{children}</ModalProvider>;\n}\n \nexport const ModalTrigger = ({\n  children,\n  className,\n}: {\n  children: ReactNode;\n  className?: string;\n}) => {\n  const { setOpen } = useModal();\n  return (\n    <button\n      className={cn(\n        \"px-4 py-2 rounded-md text-black dark:text-white text-center relative overflow-hidden\",\n        className\n      )}\n      onClick={() => setOpen(true)}\n    >\n      {children}\n    </button>\n  );\n};\n \nexport const ModalBody = ({\n  children,\n  className,\n}: {\n  children: ReactNode;\n  className?: string;\n}) => {\n  const { open } = useModal();\n \n  useEffect(() => {\n    if (open) {\n      document.body.style.overflow = \"hidden\";\n    } else {\n      document.body.style.overflow = \"auto\";\n    }\n  }, [open]);\n \n  const modalRef = useRef(null);\n  const { setOpen } = useModal();\n  useOutsideClick(modalRef, () => setOpen(false));\n \n  return (\n    <AnimatePresence>\n      {open && (\n        <motion.div\n          initial={{\n            opacity: 0,\n          }}\n          animate={{\n            opacity: 1,\n            backdropFilter: \"blur(10px)\",\n          }}\n          exit={{\n            opacity: 0,\n            backdropFilter: \"blur(0px)\",\n          }}\n          className=\"fixed [perspective:800px] [transform-style:preserve-3d] inset-0 h-full w-full  flex items-center justify-center z-50\"\n        >\n          <Overlay />\n \n          <motion.div\n            ref={modalRef}\n            className={cn(\n              \"min-h-[50%] max-h-[90%] md:max-w-[40%] bg-white dark:bg-neutral-950 border border-transparent dark:border-neutral-800 md:rounded-2xl relative z-50 flex flex-col flex-1 overflow-hidden\",\n              className\n            )}\n            initial={{\n              opacity: 0,\n              scale: 0.5,\n              rotateX: 40,\n              y: 40,\n            }}\n            animate={{\n              opacity: 1,\n              scale: 1,\n              rotateX: 0,\n              y: 0,\n            }}\n            exit={{\n              opacity: 0,\n              scale: 0.8,\n              rotateX: 10,\n            }}\n            transition={{\n              type: \"spring\",\n              stiffness: 260,\n              damping: 15,\n            }}\n          >\n            <CloseIcon />\n            {children}\n          </motion.div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n};\n \nexport const ModalContent = ({\n  children,\n  className,\n}: {\n  children: ReactNode;\n  className?: string;\n}) => {\n  return (\n    <div className={cn(\"flex flex-col flex-1 p-8 md:p-10\", className)}>\n      {children}\n    </div>\n  );\n};\n \nexport const ModalFooter = ({\n  children,\n  className,\n}: {\n  children: ReactNode;\n  className?: string;\n}) => {\n  return (\n    <div\n      className={cn(\n        \"flex justify-end p-4 bg-gray-100 dark:bg-neutral-900\",\n        className\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n \nconst Overlay = ({ className }: { className?: string }) => {\n  return (\n    <motion.div\n      initial={{\n        opacity: 0,\n      }}\n      animate={{\n        opacity: 1,\n        backdropFilter: \"blur(10px)\",\n      }}\n      exit={{\n        opacity: 0,\n        backdropFilter: \"blur(0px)\",\n      }}\n      className={`fixed inset-0 h-full w-full bg-black bg-opacity-50 z-50 ${className}`}\n    ></motion.div>\n  );\n};\n \nconst CloseIcon = () => {\n  const { setOpen } = useModal();\n  return (\n    <button\n      onClick={() => setOpen(false)}\n      className=\"absolute top-4 right-4 group\"\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        className=\"text-black dark:text-white h-4 w-4 group-hover:scale-125 group-hover:rotate-3 transition duration-200\"\n      >\n        <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M18 6l-12 12\" />\n        <path d=\"M6 6l12 12\" />\n      </svg>\n    </button>\n  );\n};\n \n// Hook to detect clicks outside of a component.\n// Add it in a separate file, I've added here for simplicity\nexport const useOutsideClick = (\n  ref: React.RefObject<HTMLDivElement>,\n  callback: Function\n) => {\n  useEffect(() => {\n    const listener = (event: any) => {\n      // DO NOTHING if the element being clicked is the target element or their children\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n      callback(event);\n    };\n \n    document.addEventListener(\"mousedown\", listener);\n    document.addEventListener(\"touchstart\", listener);\n \n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n      document.removeEventListener(\"touchstart\", listener);\n    };\n  }, [ref, callback]);\n};\nCopy\nExpand\nprops\nModalProvider\nProp\tType\tDescription\nchildren\tReactNode\tThe content to be wrapped by the provider.\nModal\nProp\tType\tDescription\nchildren\tReactNode\tThe content to be displayed inside the modal.\nModalTrigger\nProp\tType\tDescription\nchildren\tReactNode\tThe content to be displayed inside the trigger button.\nclassName\tstring?\tOptional additional class names for the trigger button.\nModalBody\nProp\tType\tDescription\nchildren\tReactNode\tThe content to be displayed inside the modal body.\nclassName\tstring?\tOptional additional class names for the modal body.\nModalContent\nProp\tType\tDescription\nchildren\tReactNode\tThe content to be displayed inside the modal content.\nclassName\tstring?\tOptional additional class names for the modal content.\nModalFooter\nProp\tType\tDescription\nchildren\tReactNode\tThe content to be displayed inside the modal footer.\nclassName\tstring?\tOptional additional class names for the modal footer.\nOverlay\nProp\tType\tDescription\nclassName\tstring?\tOptional additional class names for the overlay.\nuseOutsideClick\nProp\tType\tDescription\nref\tReact.RefObject<HTMLDivElement>\tThe reference to the element to detect outside clicks.\ncallback\tFunction\tThe callback function to be called when an outside click is detected.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "3D Card Effect",
    "url": "https://ui.aceternity.com/components/3d-card-effect",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\n3D Card Effect\n\nA card perspective effect, hover over the card to elevate card elements.\n\nCard\nBackground\nSpecial\nPreview\nCode\nMake things float in air\n\nHover over this card to unleash the power of CSS perspective\n\nTry now →\nSign up\nInstallation\nCLI\nManual\nRun the following command\nnpx aceternity-ui@latest add 3d-card\nCopy\nExamples\n\nWith rotation\n\nPreview\nCode\nMake things float in air\n\nHover over this card to unleash the power of CSS perspective\n\nTry now →\nSign up\nProps\n\nCardContainer\n\nProp\tType\tDescription\nchildren\tReact.ReactNode\tThe child elements to be rendered within the container.\nclassName\tstring\tThe CSS class to be applied to the container.\ncontainerClassName\tstring\tThe CSS class to be applied to the outer container.\n\nCardBody\n\nProp\tType\tDescription\nchildren\tReact.ReactNode\tThe child elements to be rendered within the body.\nclassName\tstring\tThe CSS class to be applied to the body.\n\nCardItem\n\nProp\tType\tDescription\nas\tReact.ElementType\tThe HTML tag to be used for the item. Defaults to \"div\".\nchildren\tReact.ReactNode\tThe child elements to be rendered within the item.\nclassName\tstring\tThe CSS class to be applied to the item.\ntranslateX\tnumber or string\tThe X translation of the item.\ntranslateY\tnumber or string\tThe Y translation of the item.\ntranslateZ\tnumber or string\tThe Z translation of the item.\nrotateX\tnumber or string\tThe X rotation of the item.\nrotateY\tnumber or string\tThe Y rotation of the item.\nrotateZ\tnumber or string\tThe Z rotation of the item.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "3D Animated Pin",
    "url": "https://ui.aceternity.com/components/3d-pin",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\n3D Animated Pin\n\nA gradient pin that animates on hover, perfect for product links.\n\nCard\nHover\nSpecial\nPreview\nCode\nLoading...\nInstallation\nCLI\nManual\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nCopy the source code\n\ncomponents/ui/3d-pin.tsx\n\n\"use client\";\nimport React, { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport Link from \"next/link\";\n \nexport const PinContainer = ({\n  children,\n  title,\n  href,\n  className,\n  containerClassName,\n}: {\n  children: React.ReactNode;\n  title?: string;\n  href?: string;\n  className?: string;\n  containerClassName?: string;\n}) => {\n  const [transform, setTransform] = useState(\n    \"translate(-50%,-50%) rotateX(0deg)\"\n  );\n \n  const onMouseEnter = () => {\n    setTransform(\"translate(-50%,-50%) rotateX(40deg) scale(0.8)\");\n  };\n  const onMouseLeave = () => {\n    setTransform(\"translate(-50%,-50%) rotateX(0deg) scale(1)\");\n  };\n \n  return (\n    <Link\n      className={cn(\n        \"relative group/pin z-50  cursor-pointer\",\n        containerClassName\n      )}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      href={href || \"/\"}\n    >\n      <div\n        style={{\n          perspective: \"1000px\",\n          transform: \"rotateX(70deg) translateZ(0deg)\",\n        }}\n        className=\"absolute left-1/2 top-1/2 ml-[0.09375rem] mt-4 -translate-x-1/2 -translate-y-1/2\"\n      >\n        <div\n          style={{\n            transform: transform,\n          }}\n          className=\"absolute left-1/2 p-4 top-1/2  flex justify-start items-start  rounded-2xl  shadow-[0_8px_16px_rgb(0_0_0/0.4)] bg-black border border-white/[0.1] group-hover/pin:border-white/[0.2] transition duration-700 overflow-hidden\"\n        >\n          <div className={cn(\" relative z-50 \", className)}>{children}</div>\n        </div>\n      </div>\n      <PinPerspective title={title} href={href} />\n    </Link>\n  );\n};\n \nexport const PinPerspective = ({\n  title,\n  href,\n}: {\n  title?: string;\n  href?: string;\n}) => {\n  return (\n    <motion.div className=\"pointer-events-none  w-96 h-80 flex items-center justify-center opacity-0 group-hover/pin:opacity-100 z-[60] transition duration-500\">\n      <div className=\" w-full h-full -mt-7 flex-none  inset-0\">\n        <div className=\"absolute top-0 inset-x-0  flex justify-center\">\n          <a\n            href={href}\n            target={\"_blank\"}\n            className=\"relative flex space-x-2 items-center z-10 rounded-full bg-zinc-950 py-0.5 px-4 ring-1 ring-white/10 \"\n          >\n            <span className=\"relative z-20 text-white text-xs font-bold inline-block py-0.5\">\n              {title}\n            </span>\n \n            <span className=\"absolute -bottom-0 left-[1.125rem] h-px w-[calc(100%-2.25rem)] bg-gradient-to-r from-emerald-400/0 via-emerald-400/90 to-emerald-400/0 transition-opacity duration-500 group-hover/btn:opacity-40\"></span>\n          </a>\n        </div>\n \n        <div\n          style={{\n            perspective: \"1000px\",\n            transform: \"rotateX(70deg) translateZ(0)\",\n          }}\n          className=\"absolute left-1/2 top-1/2 ml-[0.09375rem] mt-4 -translate-x-1/2 -translate-y-1/2\"\n        >\n          <>\n            <motion.div\n              initial={{\n                opacity: 0,\n                scale: 0,\n                x: \"-50%\",\n                y: \"-50%\",\n              }}\n              animate={{\n                opacity: [0, 1, 0.5, 0],\n                scale: 1,\n \n                z: 0,\n              }}\n              transition={{\n                duration: 6,\n                repeat: Infinity,\n                delay: 0,\n              }}\n              className=\"absolute left-1/2 top-1/2  h-[11.25rem] w-[11.25rem] rounded-[50%] bg-sky-500/[0.08] shadow-[0_8px_16px_rgb(0_0_0/0.4)]\"\n            ></motion.div>\n            <motion.div\n              initial={{\n                opacity: 0,\n                scale: 0,\n                x: \"-50%\",\n                y: \"-50%\",\n              }}\n              animate={{\n                opacity: [0, 1, 0.5, 0],\n                scale: 1,\n \n                z: 0,\n              }}\n              transition={{\n                duration: 6,\n                repeat: Infinity,\n                delay: 2,\n              }}\n              className=\"absolute left-1/2 top-1/2  h-[11.25rem] w-[11.25rem] rounded-[50%] bg-sky-500/[0.08] shadow-[0_8px_16px_rgb(0_0_0/0.4)]\"\n            ></motion.div>\n            <motion.div\n              initial={{\n                opacity: 0,\n                scale: 0,\n                x: \"-50%\",\n                y: \"-50%\",\n              }}\n              animate={{\n                opacity: [0, 1, 0.5, 0],\n                scale: 1,\n \n                z: 0,\n              }}\n              transition={{\n                duration: 6,\n                repeat: Infinity,\n                delay: 4,\n              }}\n              className=\"absolute left-1/2 top-1/2  h-[11.25rem] w-[11.25rem] rounded-[50%] bg-sky-500/[0.08] shadow-[0_8px_16px_rgb(0_0_0/0.4)]\"\n            ></motion.div>\n          </>\n        </div>\n \n        <>\n          <motion.div className=\"absolute right-1/2 bottom-1/2 bg-gradient-to-b from-transparent to-cyan-500 translate-y-[14px] w-px h-20 group-hover/pin:h-40 blur-[2px]\" />\n          <motion.div className=\"absolute right-1/2 bottom-1/2 bg-gradient-to-b from-transparent to-cyan-500 translate-y-[14px] w-px h-20 group-hover/pin:h-40  \" />\n          <motion.div className=\"absolute right-1/2 translate-x-[1.5px] bottom-1/2 bg-cyan-600 translate-y-[14px] w-[4px] h-[4px] rounded-full z-40 blur-[3px]\" />\n          <motion.div className=\"absolute right-1/2 translate-x-[0.5px] bottom-1/2 bg-cyan-300 translate-y-[14px] w-[2px] h-[2px] rounded-full z-40 \" />\n        </>\n      </div>\n    </motion.div>\n  );\n};\nCopy\nExpand\nProps\nProp name\tType\tDescription\nclassName\tstring\tThe class name of the child component.\ncontainerClassName\tstring\tThe class name of the Container Component.\ntitle\tstring | ReactNode\tTitle that shows up on hover.\nhref\tstring\tLink of the component that you want to redirect to.\nchildren\tReactNode\tThe component that you want to render.\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Add Utilities",
    "url": "https://ui.aceternity.com/docs/add-utilities",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nAdd Utilities\n\nCommonly used utilities for using Aceternity UI\n\nInstall dependencies\nnpm i framer-motion clsx tailwind-merge\nCopy\nAdd util file\nlib/utils.ts\nimport { ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\nCopy\nBase Tailwind Config File\ntailwind.config.ts\nconst {\n  default: flattenColorPalette,\n} = require(\"tailwindcss/lib/util/flattenColorPalette\");\n \n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./src/pages/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./src/components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./src/app/**/*.{js,ts,jsx,tsx,mdx}\",\n \n    // Or if using `src` directory:\n    \"./src/**/*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  darkMode: \"class\",\n  theme: {\n    extend: {},\n  },\n  plugins: [addVariablesForColors],\n};\n \n// This plugin adds each Tailwind color as a global CSS variable, e.g. var(--gray-200).\nfunction addVariablesForColors({ addBase, theme }: any) {\n  let allColors = flattenColorPalette(theme(\"colors\"));\n  let newVars = Object.fromEntries(\n    Object.entries(allColors).map(([key, val]) => [`--${key}`, val])\n  );\n \n  addBase({\n    \":root\": newVars,\n  });\n}\nCopy\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "CLI",
    "url": "https://ui.aceternity.com/docs/cli",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nCLI\n\nInstalling Aceternity UI with the CLI\n\nUsage\nnpx aceternity-ui@latest init\nCopy\n\ninit command initializes a components.json file and a tailwind.config.js file for a new project.\n\nIt installs framer-motion, cn and other dependencies, compatible with shadcnui.\n\nadd\nnpx aceternity-ui@latest add [component]\nCopy\n\nAdds a new component to your project.\n\nExample\nnpx aceternity-ui@latest add bento-grid\nCopy\n\nYou can also use the optional --all flag to install all components:\n\nnpx aceternity-ui@latest add --all\nCopy\n\nYou can install the related demos / examples for the related components by using the -e flag with the add command\n\nnpx aceternity-ui@latest add [component] -e\nCopy\nExample\nnpx aceternity-ui@latest add bento-grid -e\nCopy\n\nTo check all the available components / blocks and aliases, you can use the add without supplying anything extra:\n\nnpx aceternity-ui@latest add\nCopy\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Install Next.js",
    "url": "https://ui.aceternity.com/docs/install-nextjs",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nInstall Next.js\n\nInstall Next.js with Create Next App\n\nCreate a new project\nnpx create-next-app@latest\nCopy\nOn installation, you'll see the following prompts:\n \nWhat is your project named? my-app\nWould you like to use TypeScript? No / Yes\nWould you like to use ESLint? No / Yes\nWould you like to use Tailwind CSS? No / Yes\nWould you like to use `src/` directory? No / Yes\nWould you like to use App Router? (recommended) No / Yes\nWould you like to customize the default import alias (@/*)? No / Yes\nWhat import alias would you like configured? @/*\n \nCopy\nStart the app\ncd my-app\nnpm run dev\nCopy\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Install Tailwind CSS",
    "url": "https://ui.aceternity.com/docs/install-tailwindcss",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\nInstall Tailwind CSS\n\nInstall Tailwind CSS with Next.js\n\nCreate your project\nnpx create-next-app@latest my-project --typescript --eslint\ncd my-project\nCopy\nInstall Tailwind CSS\n \nnpm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p\n \nCopy\nConfigure your template paths\ntailwind.config.ts\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./app/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./pages/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./components/**/*.{js,ts,jsx,tsx,mdx}\",\n \n    // Or if using `src` directory:\n    \"./src/**/*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\nCopy\nAdd the Tailwind directives to your CSS\nglobals.css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\nCopy\nStart your build process\nnpm run dev\nCopy\nStart using Tailwind\nindex.tsx\nexport default function Home() {\n  return <h1 className=\"text-3xl font-bold underline\">Hello world!</h1>;\n}\nCopy\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  },
  {
    "title": "Components - Aceternity UI",
    "url": "https://ui.aceternity.com/components",
    "html": "Introducing Aceternity UI Pro - Premium component packs and templates to build awesome websites.\nAceternity UI\nComponents\nTemplates\nnew\nPricing\nDiscord\nTwitter\nToggle theme\nSearch Components\n⌘\nK\nFollow for updates\nTwitter @mannupaaji\nInstallation\nInstall Next.js\nInstall Tailwind CSS\nAdd utilities\nCLI\nAll Components\n3D Card Effect\n3D Pin\nAnimated Modal\nAnimated Tooltip\nApple Cards Carousel\nAurora Background\nBackground Beams\nBackground Beams With Collision\nBackground Boxes\nBackground Gradient\nBento Grid\nCanvas Reveal Effect\nCard Hover Effect\nCard Spotlight\nNew\nCard Stack\nCompare\nNew\nContainer Cover\nNew\nContainer Scroll Animation\nDirection Aware Hover\nEvervault Card\nExpandable Card\nFile Upload\nNew\nFlip Words\nFloating Dock\nNew\nFloating Navbar\nFocus Cards\nFollowing Pointer\nGitHub Globe\nGlare Card\nGlowing Stars\nGoogle Gemini Effect\nGradient Animation\nGrid and Dot Backgrounds\nHero Highlight\nHero Parallax\nHover Border Gradient\nImages Slider\nInfinite Moving Cards\nLamp effect\nLayout Grid\nLink Preview\nMacbook Scroll\nMeteors\nMoving Border\nMulti Step Loader\nNavbar Menu\nParallax Scroll\nPlaceholders And Vanish Input\nShooting Stars\nNew\nSidebar\nSignup Form\nSparkles\nSpotlight\nSticky Scroll Reveal\nSVG Mask Effect\nTabs\nTailwind CSS buttons\nText Generate Effect\nText Reveal Card\nTracing Beam\nTypewriter Effect\nVortex\nWavy Background\nWobble Card\nMarketing\nCards\n4\nFeature sections\n3\n✨ Request a component\n\nMacbook Scroll\n\nScroll through the page and see the image come out of the screen.\n\n3D Card Effect\n\nA card perspective effect, hover over the card to elevate card elements.\n\nApple Cards Carousel\n\nA sleek and minimal carousel implementation, as seen on apple.com\n\nBackground Beams With Collision\n\nExploding beams in the background\n\nCard Spotlight\n\nA card component with a spotlight effect revealing a radial gradient background\n\nCompare\n\nA comparison component between two images, slide or drag to compare\n\nCover\n\nA Cover component that wraps any children, providing beams and space effect, hover to reveal speed.\n\nExpandable Cards\n\nClick cards to expand them and show additional information\n\nFeature Sections\n\nA set of feature sections ranging from bento grids to simple layouts\n\nFile Upload\n\nA minimal file upload form with background grid, drag and drop, and micro interactions.\n\nFloating Dock\n\nA floating dock mac os style component, acts as a navigation bar.\n\nFocus Cards\n\nHover over the card to focus on it, blurring the rest of the cards.\n\nGoogle Gemini Effect\n\nAn effect of SVGs as seen on the Google Gemini Website\n\nTracing Beam\n\nA Beam that follows the path of an SVG as the user scrolls. Adjusts beam length with scroll speed.\n\nAnimated Modal\n\nA customizable, compound modal component with animated transitions\n\nAnimated Tooltip\n\nA cool tooltip that reveals on hover, follows mouse pointer\n\nAurora Background\n\nA subtle Aurora or Southern Lights background for your website.\n\nBackground Beams\n\nMultiple background beams that follow a path of SVG, makes a good hero section background.\n\nBackground Gradient Animation\n\nA smooth and elegant background gradient animation that changes the gradient position over time.\n\nBento Grid\n\nA skewed grid layout with Title, description and a header component\n\nCanvas Reveal Effect\n\nA dot background that expands on hover, as seen on Clerk's website\n\nCard Stack\n\nCards stack on top of each other after some interval. Perfect for showing testimonials.\n\nCards\n\nA set of cards that can be used for different use cases\n\nContainer Scroll Animation\n\nA scroll animation that rotates in 3d on scroll. Perfect for hero or marketing sections.\n\nEvervault Card\n\nA cool card with amazing hover effect, reveals encrypted text and a mixed gradient.\n\nFlip Words\n\nA component that flips through a list of words\n\nGitHub Globe\n\nA globe animation as seen on GitHub's homepage. Interactive and customizable.\n\nGlare Card\n\nA glare effect that happens on hover, as seen on Linear's website\n\nGlowing Background Stars Card\n\nCard background stars that animate on hover and animate anyway\n\nGrid and Dot Backgrounds\n\nA simple grid and dots background to make your sections stand out.\n\nHero Highlight\n\nA background effect with a text highlight component, perfect for hero sections.\n\nHero Parallax\n\nA scroll effect with rotation, translation and opacity animations.\n\nInfinite Moving Cards\n\nA customizable group of cards that move infinitely in a loop. Made with Framer Motion and Tailwind CSS.\n\nLamp Section Header\n\nA lamp effect as seen on linear, great for section headers.\n\nLayout Grid\n\nA layout effect that animates the grid item on click, powered by framer motion layout\n\nLink Preview\n\nDynamic link previews for your anchor tags\n\nMeteor Effect\n\nA group of beams in the background of a container, sort of like meteors.\n\nMoving Border\n\nA border that moves around the container. Perfect for making your buttons stand out.\n\nParallax Grid Scroll\n\nA grid where two columns scroll in oposite directions, giving a parallax effect.\n\nPlaceholders And Vanish Input\n\nSliding in placeholders and vanish effect of input on submit\n\nShooting Stars and Stars Background\n\nA shooting star animation on top of a starry background, as seen on figmaplug.in\n\nSidebar\n\nExpandable sidebar that expands on hover, mobile responsive and dark mode support\n\nSignup Form\n\nA customizable form built on top of shadcn's input and label, with a touch of framer motion\n\nSparkles\n\nA configurable sparkles component that can be used as a background or as a standalone component.\n\nSpotlight\n\nA spotlight effect with Tailwind CSS, good for drawing attention to a particular element on the page.\n\nSticky Scroll Reveal\n\nA sticky container that sticks while scrolling, text reveals on scroll\n\nSVG Mask Effect\n\nA mask reveal effect, hover the cursor over a container to reveal what's underneath.\n\nAnimated Tabs\n\nTabs to switch content, click on a tab to check background animation.\n\nText Generate Effect\n\nA cool text effect that fades in text on page load, one by one.\n\nText Reveal Card\n\nMousemove effect to reveal text content at the bottom of the card.\n\nTypewriter Effect\n\nText generates as if it is being typed on the screen.\n\nVortex Background\n\nA wavy, swirly, vortex background ideal for CTAs and backgrounds.\n\nWavy Background\n\nA cool background effect with waves that move.\n\nWobble Card\n\nA card effect that translates and scales on mousemove, perfect for feature cards.\n\nHover Border Gradient\n\nA hover effect that expands to the entire container with a gradient border.\n\nMulti Step Loader\n\nA step loader for screens that take a lot of time to load.\n\n3D Animated Pin\n\nA gradient pin that animates on hover, perfect for product links.\n\nBackground Boxes\n\nA full width background box container that highlights on hover\n\nBackground Gradient\n\nAn animated gradient that sits at the background of a card, button or anything.\n\nHover Effect\n\nHover over the cards and the effect slides to the currently hovered card.\n\nDirection Aware Hover\n\nA direction aware hover effect using Framer Motion, Tailwindcss and good old javascript.\n\nFloating Navbar\n\nA sticky Navbar that hides on scroll, reveals when scrolled up.\n\nFollowing Pointer\n\nA custom pointer that follows mouse arrow and animates in pointer and content.\n\nImages Slider\n\nA full page slider with images that can be navigated with the keyboard.\n\nNavbar Menu\n\nA navbar menu that animates its children on hover, makes a beautiful bignav\n\nTailwind CSS buttons\n\nA curated list of awesome, battle tested Tailwind CSS buttons components\n\nComing Soon\n\nWe are working hard to bring you more components. Bookmark this page to stay tuned!\n\nAceternity UI\nA product by Aceternity\nBuilding in public at @mannupaaji\nPricing\nComponents\nTemplates\nCategories\nBlog\nBox Shadows\nTwitter\nDiscord\nAceternity UI Pro\nAceternity"
  }
]